//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

package TremolZFP;

import java.util.Date;

public class FP extends FPcore {
     public FP(){
        this.setVersionDef(2303271005L);
    }

    /**
     *Provides information about the amounts on hand by type of payment.
     * @return DailyAvailableAmountsRes
     * @throws Exception
     */
     public DailyAvailableAmountsRes ReadDailyAvailableAmounts() throws Exception {
             return CreateRes(Do("ReadDailyAvailableAmounts"), DailyAvailableAmountsRes.class);
     }

    /**
     *Prints an article report with or without zeroing ('Z' or 'X').
     * @param  optionZeroing
     *         1 character with following values:  
     * - 'Z' - Zeroing  
     * - 'X' - Without zeroing
     * @throws Exception
     */
     public void PrintArticleReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintArticleReport", "OptionZeroing", optionZeroing);
     }

    /**
     *Provides information about the current (the last value stored into the FM) decimal point format.
     * @return OptionDecimalPointPosition
     * @throws Exception
     */
     public OptionDecimalPointPosition ReadDecimalPoint() throws Exception {
             return CreateRes(Do("ReadDecimalPoint"), OptionDecimalPointPosition.class);
     }

    /**
     *Read Invoice receipt copy.
     * @param  cUInvoiceNum
     *         10 symbols for Invoice receipt Number.
     * @throws Exception
     */
     public void ReadInvoiceCopy(String cUInvoiceNum) throws Exception {
             Do("ReadInvoiceCopy", "CUInvoiceNum", cUInvoiceNum);
     }

    /**
     *Programs the number of POS, printing of logo, cash drawer opening, external display management mode, enable or disable currency in receipt and EJ font type.
     * @param  pOSNum
     *         4 symbols for number of POS in format ####
     * @param  optionPrintLogo
     *         1 symbol of value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionAutoOpenDrawer
     *         1 symbol of value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionExternalDispManagement
     *         1 symbol of value: 
     *  - '1' - Manual 
     *  - '0' - Auto
     * @param  optionEnableCurrency
     *         1 symbol of value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @throws Exception
     */
     public void ProgParameters(Double pOSNum, OptionPrintLogo optionPrintLogo, OptionAutoOpenDrawer optionAutoOpenDrawer, OptionExternalDispManagement optionExternalDispManagement, OptionEnableCurrency optionEnableCurrency) throws Exception {
             Do("ProgParameters", "POSNum", pOSNum, "OptionPrintLogo", optionPrintLogo, "OptionAutoOpenDrawer", optionAutoOpenDrawer, "OptionExternalDispManagement", optionExternalDispManagement, "OptionEnableCurrency", optionEnableCurrency);
     }

    /**
     *Start LAN test on the device and print out the result
     * @throws Exception
     */
     public void StartTest_Lan() throws Exception {
             Do("StartTest_Lan");
     }

    /**
     *Provides information for the programmed name from the stated department number
     * @param  depNum
     *         2 symbols for deparment number in format: ##
     * @return DepartmentRes
     * @throws Exception
     */
     public DepartmentRes ReadDepartment(Double depNum) throws Exception {
             return CreateRes(Do("ReadDepartment", "DepNum", depNum), DepartmentRes.class);
     }

    /**
     *Read Electronic Journal Report from receipt number to receipt number.
     * @param  startNum
     *         6 symbols for initial receipt number included in report in format ######.
     * @param  endNum
     *         6 symbols for final receipt number included in report in format ######.
     * @throws Exception
     */
     public void ReadEJByReceiptNum(Double startNum, Double endNum) throws Exception {
             Do("ReadEJByReceiptNum", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Print all special FM events report.
     * @throws Exception
     */
     public void PrintSpecialEventsFMReport() throws Exception {
             Do("PrintSpecialEventsFMReport");
     }

    /**
     *Programs the general data for a certain article in the internal database. The price may have variable length, while the name field is fixed.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  name
     *         34 symbols for article name
     * @param  price
     *         Up to 10 symbols for article's price
     * @param  optionPrice
     *         1 symbol for Price flag with next value: 
     *  - '0'- Free price is disable valid only programmed price 
     *  - '1'- Free price is enable 
     *  - '2'- Limited price
     * @param  measureUnit
     *         3 symbols for measure unit
     * @param  optionVATClass
     *         1 symbol for article's VAT class with optional values: 
     *  - 'A' - VAT Class A 
     *  - 'B' - VAT Class B 
     *  - 'C' - VAT Class C 
     *  - 'D' - VAT Class D 
     *  - 'E' - VAT Class E
     * @param  belongToDepNum
     *         BelongToDepNum + 80h, 1 symbol for 
     * article department attachment, formed in the following manner:
     * @param  hSCode
     *         10 symbols for HS Code in format XXXX.XX.XX
     * @param  hSName
     *         20 symbols for HS Name
     * @param  optionSingleTransaction
     *         1 symbol with value: 
     *  - '0' - Inactive, default value 
     *  - '1' - Active Single transaction in receipt
     * @param  barcode
     *         13 symbols for barcode
     * @param  availableQuantity
     *         Up to 11 symbols for quantity in stock
     * @param  optionQuantityType
     *         1 symbol for Quantity flag with next value:  
     *  - '0'- Availability of PLU stock is not monitored  
     *  - '1'- Disable negative quantity  
     *  - '2'- Enable negative quantity
     * @throws Exception
     */
     public void ProgPLUgeneral(Double pLUNum, String name, Double price, OptionPrice optionPrice, String measureUnit, OptionVATClass optionVATClass, int belongToDepNum, String hSCode, String hSName, OptionSingleTransaction optionSingleTransaction, String barcode, Double availableQuantity, OptionQuantityType optionQuantityType) throws Exception {
             Do("ProgPLUgeneral", "PLUNum", pLUNum, "Name", name, "Price", price, "OptionPrice", optionPrice, "MeasureUnit", measureUnit, "OptionVATClass", optionVATClass, "BelongToDepNum", belongToDepNum, "HSCode", hSCode, "HSName", hSName, "OptionSingleTransaction", optionSingleTransaction, "Barcode", barcode, "AvailableQuantity", availableQuantity, "OptionQuantityType", optionQuantityType);
     }

    /**
     *Store Electronic Journal Report from receipt number to receipt number to External USB Flash memory, External SD card or Print.
     * @param  optionReportStorage
     *         2 symbols for destination: 
     *  - 'J1' - Printing  
     *  - 'J2' - Storage in External USB Flash memory. 
     *  - 'J4' - Storage in External SD card memory
     * @param  startNum
     *         6 symbols for initial receipt number in format ###### 
     * included in report.
     * @param  endNum
     *         6 symbolsfor final receipt number included in format ###### 
     * in report.
     * @throws Exception
     */
     public void PrintOrStoreEJByReceiptNum(OptionReportStorage optionReportStorage, Double startNum, Double endNum) throws Exception {
             Do("PrintOrStoreEJByReceiptNum", "OptionReportStorage", optionReportStorage, "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Stores the VAT and Fiscal Memory numbers into the operative memory.
     * @param  password
     *         6-symbols string
     * @param  vATNum
     *         15 symbols VAT registration number
     * @param  fMNum
     *         12 symbols Fiscal Memory serial number
     * @param  pIN
     *         14 symbols: 2 letters, 8 digits, 1 symbol and 3 spaces
     * @throws Exception
     */
     public void SetFiscalNum(String password, String vATNum, String fMNum, String pIN) throws Exception {
             Do("SetFiscalNum", "Password", password, "VATNum", vATNum, "FMNum", fMNum, "PIN", pIN);
     }

    /**
     *Store whole Electronic Journal report to External USB Flash memory, External SD card or Print.
     * @param  optionReportStorage
     *         2 symbols for destination: 
     *  - 'J1' - Printing  
     *  - 'J2' - Storage in External USB Flash memory. 
     *  - 'J4' - Storage in External SD card memory
     * @throws Exception
     */
     public void PrintOrStoreEJ(OptionReportStorage optionReportStorage) throws Exception {
             Do("PrintOrStoreEJ", "OptionReportStorage", optionReportStorage);
     }

    /**
     *Store Electronic Journal Report by PIN number of buyer to External SD card.
     * @param  optionReportStorage
     *         2 symbols for destination: 
     *  - 'J1' - Printing  
     *  - 'J2' - Storage in External USB Flash memory. 
     *  - 'J4' - Storage in External SD card memory 
     *  - 'JX' - Storage in External SD card memory for JSON 
     * - 'Jx' - Storage in External USB Flash memory for JSON
     * @param  optionPINReportFormat
     *         1 character with value 
     *  - 'P' - Detailed EJ 
     *  - 'p' - Brief EJ
     * @param  pINnumber
     *         11 symbols for PIN number
     * @throws Exception
     */
     public void PrintOrStoreEJByPINofBuyer(OptionReportStorage1 optionReportStorage, OptionPINReportFormat optionPINReportFormat, String pINnumber) throws Exception {
             Do("PrintOrStoreEJByPINofBuyer", "OptionReportStorage", optionReportStorage, "OptionPINReportFormat", optionPINReportFormat, "PINnumber", pINnumber);
     }

    /**
     *Restore previous header if current header is not saved into fiscal memory.
     * @throws Exception
     */
     public void RestorePreviousHeader() throws Exception {
             Do("RestorePreviousHeader");
     }

    /**
     *Opens the cash drawer.
     * @throws Exception
     */
     public void CashDrawerOpen() throws Exception {
             Do("CashDrawerOpen");
     }

    /**
     *Opens a fiscal invoice debit note receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoiceDebitNotePrintType
     *         1 symbol with value: 
     *  - '@' - Step by step printing 
     *  - 'B' - Postponed Printing
     * @param  customerNum
     *         Symbol '#' and following up to 3 symbols for related customer ID 
     * number corresponding to the FD database
     * @param  relatedInvoiceNum
     *         19 symbols for the related invoice number in format 
     * ###################
     * @throws Exception
     */
     public void OpenDebitNoteWithFDCustomerDB(Double operNum, String operPass, OptionInvoiceDebitNotePrintType optionInvoiceDebitNotePrintType, String customerNum, String relatedInvoiceNum) throws Exception {
             Do("OpenDebitNoteWithFDCustomerDB", "OperNum", operNum, "OperPass", operPass, "OptionInvoiceDebitNotePrintType", optionInvoiceDebitNotePrintType, "CustomerNum", customerNum, "RelatedInvoiceNum", relatedInvoiceNum);
     }

    /**
     *Shows a 20-symbols text in the first line and last 20-symbols text in the second line of the external display lines.
     * @param  text
     *         40 symbols text
     * @throws Exception
     */
     public void DisplayTextLines1and2(String text) throws Exception {
             Do("DisplayTextLines1and2", "Text", text);
     }

    /**
     *Read Electronic Journal Report from report number to report number.
     * @param  startNum
     *         4 symbols for initial number report in format ####
     * @param  endNum
     *         4 symbols for final number report in format ####
     * @throws Exception
     */
     public void ReadEJByZReportNum(Double startNum, Double endNum) throws Exception {
             Do("ReadEJByZReportNum", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Register the sell or correction with specified quantity of article from the internal FD database. The FD will perform a correction operation only if the same quantity of the article has already been sold.
     * @param  optionSign
     *         1 symbol with optional value: 
     *  - '+' -Sale 
     *  - '-' - Correction
     * @param  pLUNum
     *         5 symbols for PLU number of FD's database in format #####
     * @param  price
     *         Up to 8 symbols for sale price
     * @param  quantity
     *         Up to 10 symbols for article's quantity sold
     * @param  discAddP
     *         Up to 7 for percentage of discount/addition. Use minus 
     * sign '-' for discount
     * @param  discAddV
     *         Up to 8 symbols for value of discount/addition. 
     * Use minus sign '-' for discount
     * @throws Exception
     */
     public void SellPLUFromFD_DB(OptionSign optionSign, Double pLUNum, Double price, Double quantity, Double discAddP, Double discAddV) throws Exception {
             Do("SellPLUFromFD_DB", "OptionSign", optionSign, "PLUNum", pLUNum, "Price", price, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
     }

    /**
     *Provides information about the current date and time.
     * @return Date
     * @throws Exception
     */
     public Date ReadDateTime() throws Exception {
             return CreateRes(Do("ReadDateTime"), Date.class);
     }

    /**
     *Register the payment in the receipt with specified type of payment and exact amount received.
     * @param  optionPaymentType
     *         1 symbol for payment type: 
     *  - '0' - Payment 0 
     *  - '1' - Payment 1 
     *  - '2' - Payment 2 
     *  - '3' - Payment 3 
     *  - '4' - Payment 4 
     *  - '5' - Currency
     * @throws Exception
     */
     public void PayExactSum(OptionPaymentType optionPaymentType) throws Exception {
             Do("PayExactSum", "OptionPaymentType", optionPaymentType);
     }

    /**
     *Start WiFi test on the device and print out the result
     * @throws Exception
     */
     public void StartTest_WiFi() throws Exception {
             Do("StartTest_WiFi");
     }

    /**
     *Read the number of the remaining free records for Z-report in the Fiscal Memory.
     * @return String
     * @throws Exception
     */
     public String ReadFMfreeRecords() throws Exception {
             return CreateRes(Do("ReadFMfreeRecords"), String.class);
     }

    /**
     *Provides information about device's Bluetooth password.
     * @return Bluetooth_PasswordRes
     * @throws Exception
     */
     public Bluetooth_PasswordRes ReadBluetooth_Password() throws Exception {
             return CreateRes(Do("ReadBluetooth_Password"), Bluetooth_PasswordRes.class);
     }

    /**
     *Available only if the receipt is not closed. Void all sales in the receipt and closes the fiscal receipt .
     * @throws Exception
     */
     public void CancelReceipt() throws Exception {
             Do("CancelReceipt");
     }

    /**
     *Provide information about invoice start and end numbers range.
     * @return InvoiceRangeRes
     * @throws Exception
     */
     public InvoiceRangeRes ReadInvoiceRange() throws Exception {
             return CreateRes(Do("ReadInvoiceRange"), InvoiceRangeRes.class);
     }

    /**
     *Provides information about device's idle timeout. This timeout is seconds in which the connection will be closed when there is an inactivity. This information is available if the device has LAN or WiFi. Maximal value - 7200, minimal value 1. 0 is for never close the connection.
     * @return Double
     * @throws Exception
     */
     public Double Read_IdleTimeout() throws Exception {
             return CreateRes(Do("Read_IdleTimeout"), Double.class);
     }

    /**
     *Programs the operator's name and password.
     * @param  number
     *         Symbols from '1' to '20' corresponding to operator's number
     * @param  name
     *         20 symbols for operator's name
     * @param  password
     *         6 symbols for operator's password
     * @throws Exception
     */
     public void ProgOperator(Double number, String name, String password) throws Exception {
             Do("ProgOperator", "Number", number, "Name", name, "Password", password);
     }

    /**
     *Providing information about the invoice threshold count
     * @return String
     * @throws Exception
     */
     public String ReadInvoice_Threshold() throws Exception {
             return CreateRes(Do("ReadInvoice_Threshold"), String.class);
     }

    /**
     *Providing information about the time threshold minutes
     * @return String
     * @throws Exception
     */
     public String ReadTimeThreshold_Minutes() throws Exception {
             return CreateRes(Do("ReadTimeThreshold_Minutes"), String.class);
     }

    /**
     *Providing information about the HTTPS server address
     * @return HTTPS_ServerRes
     * @throws Exception
     */
     public HTTPS_ServerRes ReadHTTPS_Server() throws Exception {
             return CreateRes(Do("ReadHTTPS_Server"), HTTPS_ServerRes.class);
     }

    /**
     *Storage a detailed FM report by initial and end FM report number.
     * @param  startNum
     *         4 symbols for the initial report number included in report, format ####
     * @param  endNum
     *         4 symbols for the final report number included in report, format ####
     * @param  optionStorage
     *         1 symbol for destination: 
     *  - '2' - Storage in External USB Flash memory. 
     *  - '4' - Storage in External SD card memory
     * @throws Exception
     */
     public void StoreDetailedFMReportByZNum(Double startNum, Double endNum, OptionStorage optionStorage) throws Exception {
             Do("StoreDetailedFMReportByZNum", "StartNum", startNum, "EndNum", endNum, "OptionStorage", optionStorage);
     }

    /**
     *Program device's MAC address . To apply use - SaveNetworkSettings()
     * @param  mACAddress
     *         12 symbols for the MAC address
     * @throws Exception
     */
     public void SetDeviceTCP_MACAddress(String mACAddress) throws Exception {
             Do("SetDeviceTCP_MACAddress", "MACAddress", mACAddress);
     }

    /**
     *Register the sell (for correction use minus sign in the price field) of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.
     * @param  namePLU
     *         36 symbols for article's name
     * @param  price
     *         Up to 13 symbols for article's price with upto 5 digits after decimal point
     * @param  hSCode
     *         10 symbols for HS Code in format XXXX.XX.XX
     * @param  quantity
     *         1 to 10 symbols for quantity
     * @param  discAddP
     *         1 to 7 for percentage of discount/addition
     * @throws Exception
     */
     public void SellPLUfromExtDB_HS(String namePLU, Double price, String hSCode, Double quantity, Double discAddP) throws Exception {
             Do("SellPLUfromExtDB_HS", "NamePLU", namePLU, "Price", price, "HSCode", hSCode, "Quantity", quantity, "DiscAddP", discAddP);
     }

    /**
     *Program device's Bluetooth password.
     * @param  passLength
     *         Up to 3 symbols for the BT password len
     * @param  password
     *         Up to 100 symbols for the BT password
     * @throws Exception
     */
     public void SetBluetooth_Password(Double passLength, String password) throws Exception {
             Do("SetBluetooth_Password", "PassLength", passLength, "Password", password);
     }

    /**
     *Provides information about device's GRPS APN.
     * @return GPRS_APNRes
     * @throws Exception
     */
     public GPRS_APNRes ReadGPRS_APN() throws Exception {
             return CreateRes(Do("ReadGPRS_APN"), GPRS_APNRes.class);
     }

    /**
     *Provides information about the quantity registers of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLUqtyRes
     * @throws Exception
     */
     public PLUqtyRes ReadPLUqty(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLUqty", "PLUNum", pLUNum), PLUqtyRes.class);
     }

    /**
     *Scan and print all available WiFi networks
     * @throws Exception
     */
     public void ScanAndPrintWiFiNetworks() throws Exception {
             Do("ScanAndPrintWiFiNetworks");
     }

    /**
     *Provides information about the manufacturing number of the fiscal device and FM number.
     * @return SerialAndFiscalNumsRes
     * @throws Exception
     */
     public SerialAndFiscalNumsRes ReadSerialAndFiscalNums() throws Exception {
             return CreateRes(Do("ReadSerialAndFiscalNums"), SerialAndFiscalNumsRes.class);
     }

    /**
     *Provides information about device's GPRS username.
     * @return GPRS_UsernameRes
     * @throws Exception
     */
     public GPRS_UsernameRes ReadGPRS_Username() throws Exception {
             return CreateRes(Do("ReadGPRS_Username"), GPRS_UsernameRes.class);
     }

    /**
     *Registers cash received on account or paid out.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to the operator's number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionPayType
     *         1 symbol with value 
     *  - '0' - Cash 
     *  - '5' - Currency
     * @param  amount
     *         1 to 10 symbols for the amount lodged/withdrawn
     * @param  text
     *         Text - TextLength-2 symbols length
     * @throws Exception
     */
     public void ReceivedOnAccount_PaidOut(Double operNum, String operPass, OptionPayType optionPayType, Double amount, String text) throws Exception {
             Do("ReceivedOnAccount_PaidOut", "OperNum", operNum, "OperPass", operPass, "OptionPayType", optionPayType, "Amount", amount, "Text", text);
     }

    /**
     *Storage a detailed FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @param  optionStorage
     *         1 symbol for destination: 
     *  - '2' - Storage in External USB Flash memory. 
     *  - '4' - Storage in External SD card memory
     * @throws Exception
     */
     public void StoreDetailedFMReportByDate(Date startDate, Date endDate, OptionStorage optionStorage) throws Exception {
             Do("StoreDetailedFMReportByDate", "StartDate", startDate, "EndDate", endDate, "OptionStorage", optionStorage);
     }

    /**
     *After every change on Idle timeout, LAN/WiFi/GPRS usage, LAN/WiFi/TCP/GPRS password or TCP auto start networks settings this Save command needs to be execute.
     * @throws Exception
     */
     public void SaveNetworkSettings() throws Exception {
             Do("SaveNetworkSettings");
     }

    /**
     *Provides information about the accumulated EOD turnover and VAT amounts by date
     * @param  eOD_Date
     *         6 symbols for initial date in the DDMMYY format
     * @return EODAmountsByDateRes
     * @throws Exception
     */
     public EODAmountsByDateRes ReadEODAmountsByDate(Date eOD_Date) throws Exception {
             return CreateRes(Do("ReadEODAmountsByDate", "EOD_Date", eOD_Date), EODAmountsByDateRes.class);
     }

    /**
     *Executes the direct command .
     * @param  input
     *         Raw request to FP
     * @return String
     * @throws Exception
     */
     public String DirectCommand(String input) throws Exception {
             return CreateRes(Do("DirectCommand", "Input", input), String.class);
     }

    /**
     *Storage a detailed FM report by initial and end FM report number.
     * @param  startNum
     *         4 symbols for the initial report number included in report, format ####
     * @param  endNum
     *         4 symbols for the final report number included in report, format ####
     * @throws Exception
     */
     public void ReadDetailedFMReportByZNum(Double startNum, Double endNum) throws Exception {
             Do("ReadDetailedFMReportByZNum", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Store Electronic Journal Report by CU Invoice Number (Multiple invoices) to External SD card.
     * @param  optionReportStorage
     *         2 symbols for destination: 
     *  - 'J1' - Printing  
     *  - 'J2' - Storage in External USB Flash memory. 
     *  - 'J4' - Storage in External SD card memory 
     *  - 'JX' - Storage in External SD card memory for JSON 
     * - 'Jx' - Storage in External USB Flash memory for JSON
     * @param  optionInvoiceReportFormat
     *         1 character with value 
     *  - 'M' - Detailed EJ 
     *  - 'n' - Brief EJ
     * @param  startCUInvoiceNum
     *         10 symbols for start CU invoice number in format: ##########.
     * @param  endCUInvoiceNum
     *         10 symbols for end CU invoice number in format: ##########.
     * @throws Exception
     */
     public void PrintOrStoreEJByCUInvoiceNum(OptionReportStorage1 optionReportStorage, OptionInvoiceReportFormat optionInvoiceReportFormat, Double startCUInvoiceNum, Double endCUInvoiceNum) throws Exception {
             Do("PrintOrStoreEJByCUInvoiceNum", "OptionReportStorage", optionReportStorage, "OptionInvoiceReportFormat", optionInvoiceReportFormat, "StartCUInvoiceNum", startCUInvoiceNum, "EndCUInvoiceNum", endCUInvoiceNum);
     }

    /**
     *Store Electronic Journal Report from report from datetime to datetime to External SD card.
     * @param  optionReportStorage
     *         2 symbols for destination: 
     *  - 'J1' - Printing  
     *  - 'J2' - Storage in External USB Flash memory. 
     *  - 'J4' - Storage in External SD card memory 
     *  - 'JX' - Storage in External SD card memory for JSON 
     * - 'Jx' - Storage in External USB Flash memory for JSON
     * @param  optionReportFormat
     *         1 character with value 
     *  - 'T' - Detailed EJ 
     *  - 't' - Brief EJ
     * @param  startRepFromDate
     *         16 symbols for initial date in the DD-MM-YYYY
     * @param  endRepFromDate
     *         16 symbols for final date in the DD-MM-YYYY
     * @throws Exception
     */
     public void PrintOrStoreEJByDateTime(OptionReportStorage1 optionReportStorage, OptionReportFormat optionReportFormat, Date startRepFromDate, Date endRepFromDate) throws Exception {
             Do("PrintOrStoreEJByDateTime", "OptionReportStorage", optionReportStorage, "OptionReportFormat", optionReportFormat, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
     }

    /**
     *Read Electronic Journal Report by initial to end date and time.
     * @param  optionReportFormat
     *         1 character with value 
     *  - 'T' - Detailed EJ 
     *  - 't' - Brief EJ
     * @param  startRepFromDate
     *         16 symbols for initial date in the DD-MM-
     * @param  endRepFromDate
     *         16 symbols for final date in the DD-MM-
     * @throws Exception
     */
     public void ReadEJByDateTime(OptionReportFormat optionReportFormat, Date startRepFromDate, Date endRepFromDate) throws Exception {
             Do("ReadEJByDateTime", "OptionReportFormat", optionReportFormat, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
     }

    /**
     *Program device's WiFi network name where it will connect. To apply use -SaveNetworkSettings()
     * @param  wiFiNameLength
     *         Up to 3 symbols for the WiFi network name len
     * @param  wiFiNetworkName
     *         Up to 100 symbols for the device's WiFi ssid network name
     * @throws Exception
     */
     public void SetWiFi_NetworkName(Double wiFiNameLength, String wiFiNetworkName) throws Exception {
             Do("SetWiFi_NetworkName", "WiFiNameLength", wiFiNameLength, "WiFiNetworkName", wiFiNetworkName);
     }

    /**
     *Programs HS code at a given position (HS number in order).
     * @param  hS_Number
     *         4 symbols for HS number in order in format ####
     * @return HScodeRes
     * @throws Exception
     */
     public HScodeRes ReadHScode(Double hS_Number) throws Exception {
             return CreateRes(Do("ReadHScode", "HS_Number", hS_Number), HScodeRes.class);
     }

    /**
     *Programs the customer DB for special customer receipt issuing.
     * @param  customerNum
     *         3 symbols for customer number in order in format ###
     * @param  pinNumber
     *         14 symbols for customer PIN number
     * @param  customerCompanyName
     *         30 symbols for customer name
     * @param  headQuarters
     *         30 symbols for headquarters
     * @param  address
     *         30 symbols for customer's address
     * @param  city
     *         30 symbols for customer's city
     * @param  exemptionNum
     *         30 symbols for customer's exemption number
     * @throws Exception
     */
     public void ProgCustomerData(Double customerNum, String pinNumber, String customerCompanyName, String headQuarters, String address, String city, String exemptionNum) throws Exception {
             Do("ProgCustomerData", "CustomerNum", customerNum, "PinNumber", pinNumber, "CustomerCompanyName", customerCompanyName, "HeadQuarters", headQuarters, "Address", address, "City", city, "ExemptionNum", exemptionNum);
     }

    /**
     *Read Electronic Journal Report by CU Invoice Number (Multiple invoices)
     * @param  optionInvoiceReportFormat
     *         1 character with value 
     *  - 'M' - Detailed EJ 
     *  - 'n' - Brief EJ
     * @param  startCUInvoiceNum
     *         10 symbols for start CU invoice number in format: ##########.
     * @param  endCUInvoiceNum
     *         10 symbols for end CU invoice number in format: ##########.
     * @throws Exception
     */
     public void ReadEJByCUInvoiceNum(OptionInvoiceReportFormat optionInvoiceReportFormat, Double startCUInvoiceNum, Double endCUInvoiceNum) throws Exception {
             Do("ReadEJByCUInvoiceNum", "OptionInvoiceReportFormat", optionInvoiceReportFormat, "StartCUInvoiceNum", startCUInvoiceNum, "EndCUInvoiceNum", endCUInvoiceNum);
     }

    /**
     *Print a brief FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws Exception
     */
     public void PrintBriefFMReportByDate(Date startDate, Date endDate) throws Exception {
             Do("PrintBriefFMReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Shows a 20-symbols text in the upper external display line.
     * @param  text
     *         20 symbols text
     * @throws Exception
     */
     public void DisplayTextLine1(String text) throws Exception {
             Do("DisplayTextLine1", "Text", text);
     }

    /**
     *Provides information about the current VAT rates (the last value stored in FM).
     * @return VATratesRes
     * @throws Exception
     */
     public VATratesRes ReadVATrates() throws Exception {
             return CreateRes(Do("ReadVATrates"), VATratesRes.class);
     }

    /**
     *Opens a fiscal invoice debit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoiceDebitNotePrintType
     *         1 symbol with value: 
     *  - '@' - Step by step printing 
     *  - 'B' - Postponed Printing
     * @param  companyName
     *         30 symbols for Invoice company name
     * @param  clientPINnum
     *         11 symbols for client PIN number
     * @param  headQuarters
     *         30 symbols for customer headquarters
     * @param  address
     *         30 symbols for Address
     * @param  postalCodeAndCity
     *         30 symbols for postal code and city
     * @param  exemptionNum
     *         30 symbols for exemption number
     * @param  relatedInvoiceNum
     *         19 symbols for the related invoice number in format 
     * ####################
     * @throws Exception
     */
     public void OpenDebitNoteWithFreeCustomerData(Double operNum, String operPass, OptionInvoiceDebitNotePrintType optionInvoiceDebitNotePrintType, String companyName, String clientPINnum, String headQuarters, String address, String postalCodeAndCity, String exemptionNum, String relatedInvoiceNum) throws Exception {
             Do("OpenDebitNoteWithFreeCustomerData", "OperNum", operNum, "OperPass", operPass, "OptionInvoiceDebitNotePrintType", optionInvoiceDebitNotePrintType, "CompanyName", companyName, "ClientPINnum", clientPINnum, "HeadQuarters", headQuarters, "Address", address, "PostalCodeAndCity", postalCodeAndCity, "ExemptionNum", exemptionNum, "RelatedInvoiceNum", relatedInvoiceNum);
     }

    /**
     *Read Electronic Journal Report by initial to end date and time in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.
     * @param  optionReportFormat
     *         1 character with value 
     *  - 'T' - Detailed EJ 
     *  - 't' - Brief EJ
     * @param  startRepFromDate
     *         16 symbols for initial date in the DD-MM-
     * @param  endRepFromDate
     *         16 symbols for final date in the DD-MM-
     * @return Double
     * @throws Exception
     */
     public Double ReadEJByDateTime_JSON(OptionReportFormat optionReportFormat, Date startRepFromDate, Date endRepFromDate) throws Exception {
             return CreateRes(Do("ReadEJByDateTime_JSON", "OptionReportFormat", optionReportFormat, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate), Double.class);
     }

    /**
     *Provides information about the proxy server address.
     * @return ProxyServerAddressRes
     * @throws Exception
     */
     public ProxyServerAddressRes ReadProxyServerAddress() throws Exception {
             return CreateRes(Do("ReadProxyServerAddress"), ProxyServerAddressRes.class);
     }

    /**
     *Read the number of HS codes.
     * @return Double
     * @throws Exception
     */
     public Double ReadHScodeNumber() throws Exception {
             return CreateRes(Do("ReadHScodeNumber"), Double.class);
     }

    /**
     *Provides information about the amounts received from sales by type of payment.
     * @return DailyReceivedSalesAmountsRes
     * @throws Exception
     */
     public DailyReceivedSalesAmountsRes ReadDailyReceivedSalesAmounts() throws Exception {
             return CreateRes(Do("ReadDailyReceivedSalesAmounts"), DailyReceivedSalesAmountsRes.class);
     }

    /**
     *Provides information about the number of the last issued receipt.
     * @return LastAndTotalReceiptNumRes
     * @throws Exception
     */
     public LastAndTotalReceiptNumRes ReadLastAndTotalReceiptNum() throws Exception {
             return CreateRes(Do("ReadLastAndTotalReceiptNum"), LastAndTotalReceiptNumRes.class);
     }

    /**
     *Programs available quantity and Quantiy type for a certain article in the internal database.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  availableQuantity
     *         Up to 11 symbols for quantity in stock
     * @param  optionQuantityType
     *         1 symbol for Quantity flag with next value:  
     *  - '0'- Availability of PLU stock is not monitored  
     *  - '1'- Disable negative quantity  
     *  - '2'- Enable negative quantity
     * @throws Exception
     */
     public void ProgPLUqty(Double pLUNum, Double availableQuantity, OptionQuantityType optionQuantityType) throws Exception {
             Do("ProgPLUqty", "PLUNum", pLUNum, "AvailableQuantity", availableQuantity, "OptionQuantityType", optionQuantityType);
     }

    /**
     *Clears the external display.
     * @throws Exception
     */
     public void ClearDisplay() throws Exception {
             Do("ClearDisplay");
     }

    /**
     *Program device's TCP network DHCP enabled or disabled. To apply use -SaveNetworkSettings()
     * @param  optionDHCPEnabled
     *         1 symbol with value: 
     *  - '0' - Disabled 
     *  - '1' - Enabled
     * @throws Exception
     */
     public void SetDHCP_Enabled(OptionDHCPEnabled optionDHCPEnabled) throws Exception {
             Do("SetDHCP_Enabled", "OptionDHCPEnabled", optionDHCPEnabled);
     }

    /**
     *Program device's GPRS APN. To apply use -SaveNetworkSettings()
     * @param  gPRS_APN_Len
     *         Up to 3 symbols for the APN len
     * @param  aPN
     *         Up to 100 symbols for the device's GPRS APN
     * @throws Exception
     */
     public void SetGPRS_APN(Double gPRS_APN_Len, String aPN) throws Exception {
             Do("SetGPRS_APN", "GPRS_APN_Len", gPRS_APN_Len, "APN", aPN);
     }

    /**
     *Read the PO by type of payment and the total number of operations by specified operator
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's number
     * @return DailyPObyOperatorRes
     * @throws Exception
     */
     public DailyPObyOperatorRes ReadDailyPObyOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyPObyOperator", "OperNum", operNum), DailyPObyOperatorRes.class);
     }

    /**
     *Read Electronic Journal Report by PIN number of buyer.
     * @param  optionPINReportFormat
     *         1 character with value 
     *  - 'P' - Detailed EJ 
     *  - 'p' - Brief EJ
     * @param  pINnumber
     *         11 symbols for PIN number
     * @throws Exception
     */
     public void ReadEJByPINofBuyer(OptionPINReportFormat optionPINReportFormat, String pINnumber) throws Exception {
             Do("ReadEJByPINofBuyer", "OptionPINReportFormat", optionPINReportFormat, "PINnumber", pINnumber);
     }

    /**
     *Programs the customer DB for special customer receipt issuing.
     * @param  hS_Code
     *         10 symbols for HS code
     * @param  hS_Name
     *         20 symbols for name of HS group
     * @param  optionTaxable
     *         1 symbol for parameter: 
     * - '1' - Exempted 
     * - '0' - Taxable
     * @param  mesureUnit
     *         3 symbols for mesure unit of item's code
     * @param  vAT_rate
     *         Value of VAT rate from 2 to 5 symbols with format ##.##
     * @throws Exception
     */
     public void AddNewHScode(String hS_Code, String hS_Name, OptionTaxable optionTaxable, String mesureUnit, Double vAT_rate) throws Exception {
             Do("AddNewHScode", "HS_Code", hS_Code, "HS_Name", hS_Name, "OptionTaxable", optionTaxable, "MesureUnit", mesureUnit, "VAT_rate", vAT_rate);
     }

    /**
     *Stores the Manufacturing number into the operative memory.
     * @param  password
     *         6-symbols string
     * @param  serialNum
     *         20 symbols Manufacturing number
     * @throws Exception
     */
     public void SetSerialNum(String password, String serialNum) throws Exception {
             Do("SetSerialNum", "Password", password, "SerialNum", serialNum);
     }

    /**
     *Print a detailed FM payment report by initial and end FM report number.
     * @param  startNum
     *         4 symbols for the initial report number included in report, format ####
     * @param  endNum
     *         4 symbols for the final report number included in report, format ####
     * @throws Exception
     */
     public void PrintDetailedFMPaymentsReportByZNum(Double startNum, Double endNum) throws Exception {
             Do("PrintDetailedFMPaymentsReportByZNum", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Program the price, Option Price and Measure Unit for a certain article (item) from the internal database. Measure Unit parameter is optional.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  price
     *         Up to 10 symbols for article price
     * @param  optionPrice
     *         1 symbol for Price flag with next value: 
     *  - '0'- Free price is disable valid only programmed price 
     *  - '1'- Free price is enable 
     *  - '2'- Limited price
     * @param  measureUnit
     *         3 symbols for measure unit
     * @throws Exception
     */
     public void ProgPLUprice(Double pLUNum, Double price, OptionPrice optionPrice, String measureUnit) throws Exception {
             Do("ProgPLUprice", "PLUNum", pLUNum, "Price", price, "OptionPrice", optionPrice, "MeasureUnit", measureUnit);
     }

    /**
     * Reads raw bytes from FP.
     * @param  count
     *         How many bytes to read if EndChar is not specified
     * @param  endChar
     *         The character marking the end of the data. If present Count parameter is ignored.
     * @return byte[]
     * @throws Exception
     */
     public byte[] RawRead(Double count, String endChar) throws Exception {
             return CreateRes(Do("RawRead", "Count", count, "EndChar", endChar), byte[].class);
     }

    /**
     *Provides information about device's DHCP status
     * @return OptionDhcpStatus
     * @throws Exception
     */
     public OptionDhcpStatus ReadDHCP_Status() throws Exception {
             return CreateRes(Do("ReadDHCP_Status"), OptionDhcpStatus.class);
     }

    /**
     *Provides information about device's IP address, subnet mask, gateway address, DNS address.
     * @param  optionAddressType
     *         1 symbol with value: 
     *  - '2' - IP address 
     *  - '3' - Subnet Mask 
     *  - '4' - Gateway address 
     *  - '5' - DNS address
     * @return TCP_AddressesRes
     * @throws Exception
     */
     public TCP_AddressesRes ReadTCP_Addresses(OptionAddressType optionAddressType) throws Exception {
             return CreateRes(Do("ReadTCP_Addresses", "OptionAddressType", optionAddressType), TCP_AddressesRes.class);
     }

    /**
     *Program the contents of header lines.
     * @param  optionHeaderLine
     *         1 symbol with value: 
     *  - '1' - Header 1 
     *  - '2' - Header 2 
     *  - '3' - Header 3 
     *  - '4' - Header 4 
     *  - '5' - Header 5 
     *  - '6' - Header 6 
     *  - '7' - Header 7 
     *  - '8' - Header 8
     * @param  headerText
     *         TextLength symbols for header lines
     * @throws Exception
     */
     public void ProgHeader(OptionHeaderLine optionHeaderLine, String headerText) throws Exception {
             Do("ProgHeader", "OptionHeaderLine", optionHeaderLine, "HeaderText", headerText);
     }

    /**
     *Closes the non-fiscal receipt.
     * @throws Exception
     */
     public void CloseNonFiscalReceipt() throws Exception {
             Do("CloseNonFiscalReceipt");
     }

    /**
     *Print a brief payment FM report by initial and end FM report number.
     * @param  startNum
     *         4 symbols for the initial report number included in report, format ####
     * @param  endNum
     *         4 symbols for the final report number included in report, format ####
     * @throws Exception
     */
     public void PrintBriefFMPaymentsReportByZNum(Double startNum, Double endNum) throws Exception {
             Do("PrintBriefFMPaymentsReportByZNum", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Removes all paired devices.
     * @throws Exception
     */
     public void UnpairAllDevices() throws Exception {
             Do("UnpairAllDevices");
     }

    /**
     *Shows the current date and time on the external display.
     * @throws Exception
     */
     public void DisplayDateTime() throws Exception {
             Do("DisplayDateTime");
     }

    /**
     *Set device's TCP autostart . To apply use -SaveNetworkSettings()
     * @param  optionTCPAutoStart
     *         1 symbol with value: 
     *  - '0' - No 
     *  - '1' - Yes
     * @throws Exception
     */
     public void SetTCP_AutoStart(OptionTCPAutoStart optionTCPAutoStart) throws Exception {
             Do("SetTCP_AutoStart", "OptionTCPAutoStart", optionTCPAutoStart);
     }

    /**
     *Store Electronic Journal Report from report from date to date to External USB Flash memory, External SD card or Print.
     * @param  optionReportStorage
     *         2 symbols for destination: 
     *  - 'J1' - Printing  
     *  - 'J2' - Storage in External USB Flash memory. 
     *  - 'J4' - Storage in External SD card memory
     * @param  startRepFromDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endRepFromDate
     *         6 symbols for final date in the DDMMYY format
     * @throws Exception
     */
     public void PrintOrStoreEJByDate(OptionReportStorage optionReportStorage, Date startRepFromDate, Date endRepFromDate) throws Exception {
             Do("PrintOrStoreEJByDate", "OptionReportStorage", optionReportStorage, "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
     }

    /**
     *Sets the used TCP module for communication - Lan or WiFi. To apply use -SaveNetworkSettings()
     * @param  optionUsedModule
     *         1 symbol with value: 
     *  - '1' - LAN 
     *  - '2' - WiFi
     * @throws Exception
     */
     public void SetTCP_ActiveModule(OptionUsedModule optionUsedModule) throws Exception {
             Do("SetTCP_ActiveModule", "OptionUsedModule", optionUsedModule);
     }

    /**
     *Read the used TCP module for communication - Lan or WiFi
     * @return OptionUsedModule
     * @throws Exception
     */
     public OptionUsedModule ReadTCP_UsedModule() throws Exception {
             return CreateRes(Do("ReadTCP_UsedModule"), OptionUsedModule.class);
     }

    /**
     *Provides information about device's MAC address.
     * @return String
     * @throws Exception
     */
     public String ReadTCP_MACAddress() throws Exception {
             return CreateRes(Do("ReadTCP_MACAddress"), String.class);
     }

    /**
     *Feeds one line of paper.
     * @throws Exception
     */
     public void PaperFeed() throws Exception {
             Do("PaperFeed");
     }

    /**
     *Closes the opened fiscal receipt and returns receipt info.
     * @return CloseReceiptRes
     * @throws Exception
     */
     public CloseReceiptRes CloseReceipt() throws Exception {
             return CreateRes(Do("CloseReceipt"), CloseReceiptRes.class);
     }

    /**
     *Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoiceCreditNotePrintType
     *         1 symbol with value: 
     * - 'A' - Step by step printing 
     * - 'C' - Postponed Printing
     * @param  companyName
     *         30 symbols for Invoice company name
     * @param  clientPINnum
     *         11 symbols for client PIN number
     * @param  headQuarters
     *         30 symbols for customer headquarters
     * @param  address
     *         30 symbols for Address
     * @param  postalCodeAndCity
     *         30 symbols for postal code and city
     * @param  exemptionNum
     *         30 symbols for exemption number
     * @param  relatedInvoiceNum
     *         19 symbols for the related invoice number in format 
     * ###################
     * @throws Exception
     */
     public void OpenCreditNoteWithFreeCustomerData(Double operNum, String operPass, OptionInvoiceCreditNotePrintType optionInvoiceCreditNotePrintType, String companyName, String clientPINnum, String headQuarters, String address, String postalCodeAndCity, String exemptionNum, String relatedInvoiceNum) throws Exception {
             Do("OpenCreditNoteWithFreeCustomerData", "OperNum", operNum, "OperPass", operPass, "OptionInvoiceCreditNotePrintType", optionInvoiceCreditNotePrintType, "CompanyName", companyName, "ClientPINnum", clientPINnum, "HeadQuarters", headQuarters, "Address", address, "PostalCodeAndCity", postalCodeAndCity, "ExemptionNum", exemptionNum, "RelatedInvoiceNum", relatedInvoiceNum);
     }

    /**
     *Prints barcode from type stated by CodeType and CodeLen and with data stated in CodeData field.
     * @param  optionCodeType
     *         1 symbol with possible values: 
     *  - '0' - UPC A 
     *  - '1' - UPC E 
     *  - '2' - EAN 13 
     *  - '3' - EAN 8 
     *  - '4' - CODE 39 
     *  - '5' - ITF 
     *  - '6' - CODABAR 
     *  - 'H' - CODE 93 
     *  - 'I' - CODE 128
     * @param  codeLen
     *         1 or 2 bytes for number of bytes according to the table without checksum
     * @param  codeData
     *         From 0 to 255 bytes data in range according to the table
     * @throws Exception
     */
     public void PrintBarcode(OptionCodeType optionCodeType, Double codeLen, String codeData) throws Exception {
             Do("PrintBarcode", "OptionCodeType", optionCodeType, "CodeLen", codeLen, "CodeData", codeData);
     }

    /**
     *Print a department report with or without zeroing ('Z' or 'X').
     * @param  optionZeroing
     *         1 symbol with value: 
     *  - 'Z' - Zeroing 
     *  - 'X' - Without zeroing
     * @throws Exception
     */
     public void PrintDepartmentReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintDepartmentReport", "OptionZeroing", optionZeroing);
     }

    /**
     *Provides information about device's TCP port number.
     * @return Double
     * @throws Exception
     */
     public Double ReadTcpPortNumber() throws Exception {
             return CreateRes(Do("ReadTcpPortNumber"), Double.class);
     }

    /**
     *Shows a 20-symbols text in the lower external display line.
     * @param  text
     *         20 symbols text
     * @throws Exception
     */
     public void DisplayTextLine2(String text) throws Exception {
             Do("DisplayTextLine2", "Text", text);
     }

    /**
     *Provides information about the current reading of the daily-report- with-zeroing counter, the number of the last block stored in FM, the number of EJ and the date and time of the last block storage in the FM.
     * @return DailyCountersRes
     * @throws Exception
     */
     public DailyCountersRes ReadDailyCounters() throws Exception {
             return CreateRes(Do("ReadDailyCounters"), DailyCountersRes.class);
     }

    /**
     *Print a detailed FM report by initial and end FM report number.
     * @param  startNum
     *         4 symbols for the initial report number included in report, format ####
     * @param  endNum
     *         4 symbols for the final report number included in report, format ####
     * @throws Exception
     */
     public void PrintDetailedFMReportByZNum(Double startNum, Double endNum) throws Exception {
             Do("PrintDetailedFMReportByZNum", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Store a brief FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @param  optionStorage
     *         1 symbol for destination: 
     *  - '2' - Storage in External USB Flash memory. 
     *  - '4' - Storage in External SD card memory
     * @throws Exception
     */
     public void StoreBriefFMReportByDate(Date startDate, Date endDate, OptionStorage optionStorage) throws Exception {
             Do("StoreBriefFMReportByDate", "StartDate", startDate, "EndDate", endDate, "OptionStorage", optionStorage);
     }

    /**
     *Read Electronic Journal Report by Trader System Invoice Number (Single Invoice).
     * @param  optionTraderSystemReportFormat
     *         1 character with value 
     *  - 'S' - Detailed EJ 
     *  - 's' - Brief EJ
     * @param  traderSystemInvNum
     *         15 symbols for trader system invoice 
     * number
     * @throws Exception
     */
     public void ReadEJByTraderSystemInvNum(OptionTraderSystemReportFormat optionTraderSystemReportFormat, String traderSystemInvNum) throws Exception {
             Do("ReadEJByTraderSystemInvNum", "OptionTraderSystemReportFormat", optionTraderSystemReportFormat, "TraderSystemInvNum", traderSystemInvNum);
     }

    /**
     *Program device's WiFi network password where it will connect. To apply use -SaveNetworkSettings()
     * @param  passLength
     *         Up to 3 symbols for the WiFi password len
     * @param  password
     *         Up to 100 symbols for the device's WiFi password
     * @throws Exception
     */
     public void SetWiFi_Password(Double passLength, String password) throws Exception {
             Do("SetWiFi_Password", "PassLength", passLength, "Password", password);
     }

    /**
     *Start Bluetooth test on the device and print out the result
     * @throws Exception
     */
     public void StartTest_Bluetooth() throws Exception {
             Do("StartTest_Bluetooth");
     }

    /**
     *Provide information from the last communication with the server.
     * @param  optionServerResponse
     *         1 symbol with value 
     * - 'R' - At send receipt 
     * - 'Z' - At send EOD
     * @param  optionTransactionType
     *         1 symbol with value 
     * - 'c' - Error Code 
     * - 'm' - Error Message 
     * - 's' - Status 
     * - 'e' - Exception Message 
     * - 'r' - Response Code
     * @return InfoFromLastServerCommunicationRes
     * @throws Exception
     */
     public InfoFromLastServerCommunicationRes ReadInfoFromLastServerCommunication(OptionServerResponse optionServerResponse, OptionTransactionType optionTransactionType) throws Exception {
             return CreateRes(Do("ReadInfoFromLastServerCommunication", "OptionServerResponse", optionServerResponse, "OptionTransactionType", optionTransactionType), InfoFromLastServerCommunicationRes.class);
     }

    /**
     *Print current headers and Fiscal Memory operative header
     * @throws Exception
     */
     public void PrintCurrentHeader() throws Exception {
             Do("PrintCurrentHeader");
     }

    /**
     *Erase all PLUs data from the internal database and return the default values.
     * @param  password
     *         6 symbols for password
     * @throws Exception
     */
     public void EraseAllPLUs(String password) throws Exception {
             Do("EraseAllPLUs", "Password", password);
     }

    /**
     *Confirm VAT and Fiscal Memory number into the operative memory.
     * @param  password
     *         6-symbols string
     * @throws Exception
     */
     public void ConfirmFiscalization(String password) throws Exception {
             Do("ConfirmFiscalization", "Password", password);
     }

    /**
     *Store the header into fiscal memory.
     * @param  password
     *         6-symbols string
     * @throws Exception
     */
     public void StoreCurrentHeaderInFM(String password) throws Exception {
             Do("StoreCurrentHeaderInFM", "Password", password);
     }

    /**
     *Read the RA by type of payment and the total number of operations by specified operator.
     * @param  operNum
     *         Symbols from 1 to 20corresponding to operator's number
     * @return DailyRAbyOperatorRes
     * @throws Exception
     */
     public DailyRAbyOperatorRes ReadDailyRAbyOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyRAbyOperator", "OperNum", operNum), DailyRAbyOperatorRes.class);
     }

    /**
     *Provides information about first EOD date
     * @return Date
     * @throws Exception
     */
     public Date ReadFirstEODDate() throws Exception {
             return CreateRes(Do("ReadFirstEODDate"), Date.class);
     }

    /**
     *Start GPRS test on the device and print out the result
     * @throws Exception
     */
     public void StartTest_GPRS() throws Exception {
             Do("StartTest_GPRS");
     }

    /**
     *Provides the content of the header lines
     * @param  optionHeaderLine
     *         1 symbol with value: 
     *  - '1' - Header 1 
     *  - '2' - Header 2 
     *  - '3' - Header 3 
     *  - '4' - Header 4 
     *  - '5' - Header 5 
     *  - '6' - Header 6 
     *  - '7' - Header 7 
     *  - '8' - Header 8
     * @return HeaderRes
     * @throws Exception
     */
     public HeaderRes ReadHeader(OptionHeaderLine optionHeaderLine) throws Exception {
             return CreateRes(Do("ReadHeader", "OptionHeaderLine", optionHeaderLine), HeaderRes.class);
     }

    /**
     *Read the VAT registration number.
     * @return VATNumRes
     * @throws Exception
     */
     public VATNumRes ReadVATNum() throws Exception {
             return CreateRes(Do("ReadVATNum"), VATNumRes.class);
     }

    /**
     *Start paper cutter devices.
     * @throws Exception
     */
     public void CutPaper() throws Exception {
             Do("CutPaper");
     }

    /**
     *Provide an information about modules supported by device's firmware
     * @return DeviceModuleSupportByFirmwareRes
     * @throws Exception
     */
     public DeviceModuleSupportByFirmwareRes ReadDeviceModuleSupportByFirmware() throws Exception {
             return CreateRes(Do("ReadDeviceModuleSupportByFirmware"), DeviceModuleSupportByFirmwareRes.class);
     }

    /**
     *Set invoice start and end number range. To execute the command is necessary to grand following condition: the number range to be spent, not used, or not set after the last RAM reset.
     * @param  startNum
     *         15 characters for start number in format: ###############
     * @param  endNum
     *         15 characters for end number in format: ###############
     * @throws Exception
     */
     public void SetInvoiceRange(Double startNum, Double endNum) throws Exception {
             Do("SetInvoiceRange", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Read device's connected WiFi network password
     * @return WiFi_PasswordRes
     * @throws Exception
     */
     public WiFi_PasswordRes ReadWiFi_Password() throws Exception {
             return CreateRes(Do("ReadWiFi_Password"), WiFi_PasswordRes.class);
     }

    /**
     *Read Electronic Journal Report by PIN number of buyer in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.
     * @param  optionPINReportFormat
     *         1 character with value 
     *  - 'P' - Detailed EJ 
     *  - 'p' - Brief EJ
     * @param  pINnumber
     *         11 symbols for PIN number
     * @return Double
     * @throws Exception
     */
     public Double ReadEJByPINofBuyer_JSON(OptionPINReportFormat optionPINReportFormat, String pINnumber) throws Exception {
             return CreateRes(Do("ReadEJByPINofBuyer_JSON", "OptionPINReportFormat", optionPINReportFormat, "PINnumber", pINnumber), Double.class);
     }

    /**
     *Provides information about device's NTP address.
     * @return NTP_AddressRes
     * @throws Exception
     */
     public NTP_AddressRes ReadNTP_Address() throws Exception {
             return CreateRes(Do("ReadNTP_Address"), NTP_AddressRes.class);
     }

    /**
     *Provides information about the accumulated amounts and refunded amounts by VAT class.
     * @return DailyAmountsByVATRes
     * @throws Exception
     */
     public DailyAmountsByVATRes ReadDailyAmountsByVAT() throws Exception {
             return CreateRes(Do("ReadDailyAmountsByVAT"), DailyAmountsByVATRes.class);
     }

    /**
     *Program the barcode number for a certain article from the internal database.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  barcode
     *         13 symbols for barcode
     * @throws Exception
     */
     public void ProgPLUbarcode(Double pLUNum, String barcode) throws Exception {
             Do("ProgPLUbarcode", "PLUNum", pLUNum, "Barcode", barcode);
     }

    /**
     *Prints a detailed FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws Exception
     */
     public void PrintDetailedFMReportByDate(Date startDate, Date endDate) throws Exception {
             Do("PrintDetailedFMReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Store a brief FM report by initial and end FM report number.
     * @param  startNum
     *         4 symbols for the initial report number included in report, format ####
     * @param  endNum
     *         4 symbols for the final report number included in report, format ####
     * @throws Exception
     */
     public void ReadBriefFMReportByNum(Double startNum, Double endNum) throws Exception {
             Do("ReadBriefFMReportByNum", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Provides information about the general registers of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLUgeneralRes
     * @throws Exception
     */
     public PLUgeneralRes ReadPLUgeneral(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLUgeneral", "PLUNum", pLUNum), PLUgeneralRes.class);
     }

    /**
     *Read the amounts received from sales by type of payment and specified operator.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's 
     * number
     * @return DailyReceivedSalesAmountsByOperatorRes
     * @throws Exception
     */
     public DailyReceivedSalesAmountsByOperatorRes ReadDailyReceivedSalesAmountsByOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyReceivedSalesAmountsByOperator", "OperNum", operNum), DailyReceivedSalesAmountsByOperatorRes.class);
     }

    /**
     *Provide information for specified customer from FD database.
     * @param  customerNum
     *         3 symbols for customer number in order in format ###
     * @return CustomerDataRes
     * @throws Exception
     */
     public CustomerDataRes ReadCustomerData(Double customerNum) throws Exception {
             return CreateRes(Do("ReadCustomerData", "CustomerNum", customerNum), CustomerDataRes.class);
     }

    /**
     *Reads all messages from log
     * @return String
     * @throws Exception
     */
     public String ReadTotalMessagesCount() throws Exception {
             return CreateRes(Do("ReadTotalMessagesCount"), String.class);
     }

    /**
     *Program device's invoice threshold count. To apply use - SaveNetworkSettings()
     * @param  threshold
     *         10 symbols for the device's invoice threshold count
     * @throws Exception
     */
     public void SetInvoice_ThresholdCount(String threshold) throws Exception {
             Do("SetInvoice_ThresholdCount", "Threshold", threshold);
     }

    /**
     *Program device used to talk with the server . To apply use - SaveNetworkSettings()
     * @param  optionModule
     *         1 symbol with value: 
     *  - '0' - GSM 
     *  - '1' - LAN/WiFi
     * @throws Exception
     */
     public void SetServer_UsedComModule(OptionModule optionModule) throws Exception {
             Do("SetServer_UsedComModule", "OptionModule", optionModule);
     }

    /**
     *Program device's TCP password. To apply use - SaveNetworkSettings()
     * @param  passLength
     *         Up to 3 symbols for the password len
     * @param  password
     *         Up to 100 symbols for the TCP password
     * @throws Exception
     */
     public void SetTCP_Password(Double passLength, String password) throws Exception {
             Do("SetTCP_Password", "PassLength", passLength, "Password", password);
     }

    /**
     *Read the current status of the receipt.
     * @return CurrentReceiptInfoRes
     * @throws Exception
     */
     public CurrentReceiptInfoRes ReadCurrentReceiptInfo() throws Exception {
             return CreateRes(Do("ReadCurrentReceiptInfo"), CurrentReceiptInfoRes.class);
     }

    /**
     *Opens a fiscal invoice receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoicePrintType
     *         1 symbol with value: 
     *  - '1' - Step by step printing 
     *  - '3' - Postponed Printing
     * @param  customerNum
     *         Symbol '#' and following up to 3 symbols for related customer ID number 
     * corresponding to the FD database
     * @throws Exception
     */
     public void OpenInvoiceWithFDCustomerDB(Double operNum, String operPass, OptionInvoicePrintType optionInvoicePrintType, String customerNum) throws Exception {
             Do("OpenInvoiceWithFDCustomerDB", "OperNum", operNum, "OperPass", operPass, "OptionInvoicePrintType", optionInvoicePrintType, "CustomerNum", customerNum);
     }

    /**
     *Read whole Electronic Journal report from beginning to the end.
     * @throws Exception
     */
     public void ReadEJ() throws Exception {
             Do("ReadEJ");
     }

    /**
     *Register the payment in the receipt with specified type of payment with amount received.
     * @param  optionPaymentType
     *         1 symbol for payment type: 
     *  - '0' - Payment 0 
     *  - '1' - Payment 1 
     *  - '2' - Payment 2 
     *  - '3' - Payment 3 
     *  - '4' - Payment 4 
     *  - '5' - Currency
     * @param  optionChange
     *         Default value is 0, 1 symbol with value: 
     *  - '0 - With Change 
     *  - '1' - Without Change
     * @param  amount
     *         Up to 10 characters for received amount
     * @param  optionChangeType
     *         1 symbols with value: 
     *  - '0' - Change In Cash 
     *  - '1' - Same As The payment 
     *  - '2' - Change In Currency
     * @throws Exception
     */
     public void Payment(OptionPaymentType optionPaymentType, OptionChange optionChange, Double amount, OptionChangeType optionChangeType) throws Exception {
             Do("Payment", "OptionPaymentType", optionPaymentType, "OptionChange", optionChange, "Amount", amount, "OptionChangeType", optionChangeType);
     }

    /**
     *Provides consequently information about every single block stored in the FM starting with Acknowledgements and ending with end message.
     * @throws Exception
     */
     public void ReadFMcontent() throws Exception {
             Do("ReadFMcontent");
     }

    /**
     *Program device's network IP address, subnet mask, gateway address, DNS address. To apply use -SaveNetworkSettings()
     * @param  optionAddressType
     *         1 symbol with value: 
     *  - '2' - IP address 
     *  - '3' - Subnet Mask 
     *  - '4' - Gateway address 
     *  - '5' - DNS address
     * @param  deviceAddress
     *         15 symbols for the selected address
     * @throws Exception
     */
     public void SetDeviceTCP_Addresses(OptionAddressType optionAddressType, String deviceAddress) throws Exception {
             Do("SetDeviceTCP_Addresses", "OptionAddressType", optionAddressType, "DeviceAddress", deviceAddress);
     }

    /**
     *Read the date and number of the last Z-report and the last RAM reset event.
     * @return LastDailyReportInfoRes
     * @throws Exception
     */
     public LastDailyReportInfoRes ReadLastDailyReportInfo() throws Exception {
             return CreateRes(Do("ReadLastDailyReportInfo"), LastDailyReportInfoRes.class);
     }

    /**
     *Store Electronic Journal Report from report number to report number to External USB Flash memory, External SD card or Print.
     * @param  optionReportStorage
     *         2 symbols for destination: 
     *  - 'J1' - Printing  
     *  - 'J2' - Storage in External USB Flash memory. 
     *  - 'J4' - Storage in External SD card memory
     * @param  startNum
     *         4 symbols for initial number report in format ####
     * @param  endNum
     *         4 symbols for final number report in format ####
     * @throws Exception
     */
     public void PrintOrStoreEJByZReportNum(OptionReportStorage optionReportStorage, Double startNum, Double endNum) throws Exception {
             Do("PrintOrStoreEJByZReportNum", "OptionReportStorage", optionReportStorage, "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Read Electronic Journal Report by initial to end date in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.
     * @param  startRepFromDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endRepFromDate
     *         6 symbols for final date in the DDMMYY format
     * @return Double
     * @throws Exception
     */
     public Double ReadEJByDate_JSON(Date startRepFromDate, Date endRepFromDate) throws Exception {
             return CreateRes(Do("ReadEJByDate_JSON", "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate), Double.class);
     }

    /**
     *Prints a free text.
     * @param  text
     *         Free text - TextLength symbols
     * @throws Exception
     */
     public void PrintText(String text) throws Exception {
             Do("PrintText", "Text", text);
     }

    /**
     *Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoiceCreditNotePrintType
     *         1 symbol with value: 
     *  - 'A' - Step by step printing 
     *  - 'C' - Postponed Printing
     * @param  customerNum
     *         Symbol '#' and following up to 3 symbols for related customer ID 
     * number corresponding to the FD database
     * @param  relatedInvoiceNum
     *         19 symbols for the related invoice number in format 
     * ###################
     * @throws Exception
     */
     public void OpenCreditNoteWithFDCustomerDB(Double operNum, String operPass, OptionInvoiceCreditNotePrintType optionInvoiceCreditNotePrintType, String customerNum, String relatedInvoiceNum) throws Exception {
             Do("OpenCreditNoteWithFDCustomerDB", "OperNum", operNum, "OperPass", operPass, "OptionInvoiceCreditNotePrintType", optionInvoiceCreditNotePrintType, "CustomerNum", customerNum, "RelatedInvoiceNum", relatedInvoiceNum);
     }

    /**
     *Print a brief FM report by initial and end FM report number.
     * @param  startNum
     *         4 symbols for the initial FM report number included in report, format ####
     * @param  endNum
     *         4 symbols for the final FM report number included in report, format ####
     * @throws Exception
     */
     public void PrintBriefFMReportByZNum(Double startNum, Double endNum) throws Exception {
             Do("PrintBriefFMReportByZNum", "StartNum", startNum, "EndNum", endNum);
     }

    /**
     *Print a brief payment FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws Exception
     */
     public void PrintBriefFMPaymentReportByDate(Date startDate, Date endDate) throws Exception {
             Do("PrintBriefFMPaymentReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Prints an operator's report for a specified operator (0 = all operators) with or without zeroing ('Z' or 'X'). When a 'Z' value is specified the report should include all operators.
     * @param  optionZeroing
     *         1 character with following values:  
     * - 'Z' - Zeroing  
     * - 'X' - Without zeroing
     * @param  number
     *         Symbols from 0 to 20 corresponding to operator's number, 
     * 0 = all operators
     * @throws Exception
     */
     public void PrintOperatorReport(OptionZeroing optionZeroing, Double number) throws Exception {
             Do("PrintOperatorReport", "OptionZeroing", optionZeroing, "Number", number);
     }

    /**
     *Read Electronic Journal Report by Trader System Invoice Number (Single Invoice) in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.
     * @param  optionTraderSystemReportFormat
     *         1 character with value 
     *  - 'S' - Detailed EJ 
     *  - 's' - Brief EJ
     * @param  traderSystemInvNum
     *         15 symbols for trader system invoice 
     * number
     * @return Double
     * @throws Exception
     */
     public Double ReadEJByTraderSystemInvNum_JSON(OptionTraderSystemReportFormat optionTraderSystemReportFormat, String traderSystemInvNum) throws Exception {
             return CreateRes(Do("ReadEJByTraderSystemInvNum_JSON", "OptionTraderSystemReportFormat", optionTraderSystemReportFormat, "TraderSystemInvNum", traderSystemInvNum), Double.class);
     }

    /**
     *Provides detailed 6 bytes information about the current status of the fiscal printer.
     * @return StatusRes
     * @throws Exception
     */
     public StatusRes ReadStatus() throws Exception {
             return CreateRes(Do("ReadStatus"), StatusRes.class);
     }

    /**
     *Opens a fiscal receipt assigned to the specified operator number and operator password, parameters for receipt format, print VAT and printing type.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionReceiptFormat
     *         1 symbol with value: 
     *  - '1' - Detailed 
     *  - '0' - Brief
     * @param  optionFiscalReceiptPrintType
     *         1 symbol with value: 
     * - '0' - Step by step printing 
     * - '2' - Postponed printing
     * @throws Exception
     */
     public void OpenReceipt(Double operNum, String operPass, OptionReceiptFormat optionReceiptFormat, OptionFiscalReceiptPrintType optionFiscalReceiptPrintType) throws Exception {
             Do("OpenReceipt", "OperNum", operNum, "OperPass", operPass, "OptionReceiptFormat", optionReceiptFormat, "OptionFiscalReceiptPrintType", optionFiscalReceiptPrintType);
     }

    /**
     *Sets the date and time and prints out the current values.
     * @param  dateTime
     *         Date Time parameter in format: DD-MM-YY HH:MM
     * @throws Exception
     */
     public void SetDateTime(Date dateTime) throws Exception {
             Do("SetDateTime", "DateTime", dateTime);
     }

    /**
     *Stores a block containing the number format into the fiscal memory. Print the current status on the printer.
     * @param  password
     *         6-symbol string
     * @param  optionDecimalPointPosition
     *         1 symbol with values: 
     *  - '0'- Whole numbers 
     *  - '2' - Fractions
     * @throws Exception
     */
     public void ProgDecimalPointPosition(String password, OptionDecimalPointPosition optionDecimalPointPosition) throws Exception {
             Do("ProgDecimalPointPosition", "Password", password, "OptionDecimalPointPosition", optionDecimalPointPosition);
     }

    /**
     *Register the sell (for correction use minus sign in the price field) of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.
     * @param  namePLU
     *         36 symbols for article's name
     * @param  optionVATClass
     *         1 symbol for article's VAT class with optional values:" 
     *  - 'A' - VAT Class A
     * @param  price
     *         1 to 13 symbols for article's price with upto 5 digits after decimal point
     * @param  measureUnit
     *         3 symbols for measure unit
     * @param  hSCode
     *         10 symbols for HS Code in format XXXX.XX.XX
     * @param  hSName
     *         20 symbols for HS Name
     * @param  quantity
     *         1 to 10 symbols for quantity
     * @param  discAddP
     *         1 to 7 for percentage of discount/addition
     * @param  discAddV
     *         Up to 8 symbols for value of discount/addition. 
     * Use minus sign '-' for discount
     * @throws Exception
     */
     public void SellPLUfromExtDB(String namePLU, OptionVATClass1 optionVATClass, Double price, String measureUnit, String hSCode, String hSName, Double quantity, Double discAddP, Double discAddV) throws Exception {
             Do("SellPLUfromExtDB", "NamePLU", namePLU, "OptionVATClass", optionVATClass, "Price", price, "MeasureUnit", measureUnit, "HSCode", hSCode, "HSName", hSName, "Quantity", quantity, "DiscAddP", discAddP, "DiscAddV", discAddV);
     }

    /**
     *Provides information about an operator's name and password.
     * @param  number
     *         Symbol from 1 to 9 corresponding to the number of operators
     * @return OperatorNamePasswordRes
     * @throws Exception
     */
     public OperatorNamePasswordRes ReadOperatorNamePassword(Double number) throws Exception {
             return CreateRes(Do("ReadOperatorNamePassword", "Number", number), OperatorNamePasswordRes.class);
     }

    /**
     *Read the last operator's report number and date and time.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to 
     * operator's number
     * @return DailyCountersByOperatorRes
     * @throws Exception
     */
     public DailyCountersByOperatorRes ReadDailyCountersByOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyCountersByOperator", "OperNum", operNum), DailyCountersByOperatorRes.class);
     }

    /**
     *Provides information about all programmed types of payment.
     * @return PaymentsRes
     * @throws Exception
     */
     public PaymentsRes ReadPayments() throws Exception {
             return CreateRes(Do("ReadPayments"), PaymentsRes.class);
     }

    /**
     *Programs the name of the type of payment.
     * @param  optionPaymentNum
     *         1 symbol for payment type: 
     *  - '1' - Payment 1 
     *  - '2' - Payment 2 
     *  - '3' - Payment 3 
     *  - '4' - Payment 4 
     *  - '5' - Currency
     * @param  name
     *         10 symbols for payment type name
     * @param  rate
     *         10 symbols for exchange rate in format: ####.#####  
     * of the 5th payment type, maximal value 0420.00000
     * @throws Exception
     */
     public void ProgPayment(OptionPaymentNum optionPaymentNum, String name, Double rate) throws Exception {
             Do("ProgPayment", "OptionPaymentNum", optionPaymentNum, "Name", name, "Rate", rate);
     }

    /**
     *Print/Store Invoice receipt copy to External USB Flash memory, External SD card or Print.
     * @param  optionReportStorage
     *         2 symbols for destination: 
     *  - 'J1' - Printing  
     *  - 'J2' - Storage in External USB Flash memory. 
     *  - 'J4' - Storage in External SD card memory
     * @param  cUInvoiceNum
     *         10 symbols for Invoice receipt Number.
     * @throws Exception
     */
     public void PrintOrStoreInvoiceCopy(OptionReportStorage optionReportStorage, String cUInvoiceNum) throws Exception {
             Do("PrintOrStoreInvoiceCopy", "OptionReportStorage", optionReportStorage, "CUInvoiceNum", cUInvoiceNum);
     }

    /**
     *Store Electronic Journal Report by Trader System Invoice Number (Single Invoice) to External SD card.
     * @param  optionReportStorage
     *         2 symbols for destination: 
     *  - 'J1' - Printing  
     *  - 'J2' - Storage in External USB Flash memory. 
     *  - 'J4' - Storage in External SD card memory 
     *  - 'JX' - Storage in External SD card memory for JSON 
     * - 'Jx' - Storage in External USB Flash memory for JSON
     * @param  optionTraderSystemReportFormat
     *         1 character with value 
     *  - 'S' - Detailed EJ 
     *  - 's' - Brief EJ
     * @param  traderSystemInvNum
     *         15 symbols for trader system invoice 
     * number
     * @throws Exception
     */
     public void PrintOrStoreEJByTraderSystemInvNum(OptionReportStorage1 optionReportStorage, OptionTraderSystemReportFormat optionTraderSystemReportFormat, String traderSystemInvNum) throws Exception {
             Do("PrintOrStoreEJByTraderSystemInvNum", "OptionReportStorage", optionReportStorage, "OptionTraderSystemReportFormat", optionTraderSystemReportFormat, "TraderSystemInvNum", traderSystemInvNum);
     }

    /**
     *Prints out a diagnostic receipt.
     * @throws Exception
     */
     public void PrintDiagnostics() throws Exception {
             Do("PrintDiagnostics");
     }

    /**
     *Provides information about the price, price type and measure unit of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLUprice_MURes
     * @throws Exception
     */
     public PLUprice_MURes ReadPLUprice_MU(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLUprice_MU", "PLUNum", pLUNum), PLUprice_MURes.class);
     }

    /**
     *Opens a fiscal invoice receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.
     * @param  operNum
     *         Symbol from 1 to 20 corresponding to operator's number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionInvoicePrintType
     *         1 symbol with value: 
     * - '1' - Step by step printing 
     * - '3' - Postponed Printing
     * @param  companyName
     *         30 symbols for Invoice company name
     * @param  clientPINnum
     *         11 symbols for client PIN number
     * @param  headQuarters
     *         30 symbols for customer headquarters
     * @param  address
     *         30 symbols for Address
     * @param  postalCodeAndCity
     *         30 symbols for postal code and city
     * @param  exemptionNum
     *         30 symbols for exemption number
     * @throws Exception
     */
     public void OpenInvoiceWithFreeCustomerData(Double operNum, String operPass, OptionInvoicePrintType optionInvoicePrintType, String companyName, String clientPINnum, String headQuarters, String address, String postalCodeAndCity, String exemptionNum) throws Exception {
             Do("OpenInvoiceWithFreeCustomerData", "OperNum", operNum, "OperPass", operPass, "OptionInvoicePrintType", optionInvoicePrintType, "CompanyName", companyName, "ClientPINnum", clientPINnum, "HeadQuarters", headQuarters, "Address", address, "PostalCodeAndCity", postalCodeAndCity, "ExemptionNum", exemptionNum);
     }

    /**
     *Program the content of footer line.
     * @param  footerText
     *         TextLength symbols for footer line
     * @throws Exception
     */
     public void ProgFooter(String footerText) throws Exception {
             Do("ProgFooter", "FooterText", footerText);
     }

    /**
     *Print a copy of the last receipt document issued
     * @throws Exception
     */
     public void PrintLastReceiptDuplicate() throws Exception {
             Do("PrintLastReceiptDuplicate");
     }

    /**
     *Program device's GPRS password. To apply use - SaveNetworkSettings()
     * @param  passLength
     *         Up to 3 symbols for the GPRS password len
     * @param  password
     *         Up to 100 symbols for the device's GPRS password
     * @throws Exception
     */
     public void SetGPRS_Password(Double passLength, String password) throws Exception {
             Do("SetGPRS_Password", "PassLength", passLength, "Password", password);
     }

    /**
     *Restore default parameters of the device.
     * @param  password
     *         6-symbols string
     * @throws Exception
     */
     public void SoftwareReset(String password) throws Exception {
             Do("SoftwareReset", "Password", password);
     }

    /**
     *Program device's GPRS user name. To apply use - SaveNetworkSettings()
     * @param  optionAuthType
     *         1 symbol with value: 
     *  - '0' - None 
     *  - '1' - PAP 
     *  - '2' - CHAP 
     *  - '3' - PAP or CHAP
     * @throws Exception
     */
     public void SetGPRS_AuthType(OptionAuthType optionAuthType) throws Exception {
             Do("SetGPRS_AuthType", "OptionAuthType", optionAuthType);
     }

    /**
     *Provides information about device's TCP password.
     * @return TCP_PasswordRes
     * @throws Exception
     */
     public TCP_PasswordRes ReadTCP_Password() throws Exception {
             return CreateRes(Do("ReadTCP_Password"), TCP_PasswordRes.class);
     }

    /**
     *Stores a block containing the values of the VAT rates into the fiscal memory. Print the values on the printer.
     * @param  password
     *         6-symbols string
     * @param  vATrateA
     *         Value of VAT rate A from 2 to 6 symbols with format ##.##
     * @param  vATrateB
     *         Value of VAT rate B from 2 to 6 symbols with format ##.##
     * @param  vATrateC
     *         Value of VAT rate C from 2 to 6 symbols with format ##.##
     * @param  vATrateD
     *         Value of VAT rate D from 2 to 6 symbols with format ##.##
     * @param  vATrateE
     *         Value of VAT rate E from 2 to 6 symbols with format ##.##
     * @throws Exception
     */
     public void ProgVATrates(String password, Double vATrateA, Double vATrateB, Double vATrateC, Double vATrateD, Double vATrateE) throws Exception {
             Do("ProgVATrates", "Password", password, "VATrateA", vATrateA, "VATrateB", vATrateB, "VATrateC", vATrateC, "VATrateD", vATrateD, "VATrateE", vATrateE);
     }

    /**
     *Provides information about the category of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLU_HScodeAndHSnameRes
     * @throws Exception
     */
     public PLU_HScodeAndHSnameRes ReadPLU_HScodeAndHSname(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLU_HScodeAndHSname", "PLUNum", pLUNum), PLU_HScodeAndHSnameRes.class);
     }

    /**
     *Program device's NTP address . To apply use - SaveNetworkSettings()
     * @param  addressLen
     *         Up to 3 symbols for the address length
     * @param  nTPAddress
     *         50 symbols for the device's NTP address
     * @throws Exception
     */
     public void SetDeviceNTP_Address(Double addressLen, String nTPAddress) throws Exception {
             Do("SetDeviceNTP_Address", "AddressLen", addressLen, "NTPAddress", nTPAddress);
     }

    /**
     *Program device's Bluetooth module to be enabled or disabled.
     * @param  optionBTstatus
     *         1 symbol with value: 
     *  - '0' - Disabled 
     *  - '1' - Enabled
     * @throws Exception
     */
     public void SetBluetooth_Status(OptionBTstatus optionBTstatus) throws Exception {
             Do("SetBluetooth_Status", "OptionBTstatus", optionBTstatus);
     }

    /**
     *Read Electronic Journal Report initial date to report end date.
     * @param  startRepFromDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endRepFromDate
     *         6 symbols for final date in the DDMMYY format
     * @throws Exception
     */
     public void ReadEJByDate(Date startRepFromDate, Date endRepFromDate) throws Exception {
             Do("ReadEJByDate", "StartRepFromDate", startRepFromDate, "EndRepFromDate", endRepFromDate);
     }

    /**
     *Provides information about the barcode of the specified article.
     * @param  pLUNum
     *         5 symbols for article number with leading zeroes in format: #####
     * @return PLUbarcodeRes
     * @throws Exception
     */
     public PLUbarcodeRes ReadPLUbarcode(Double pLUNum) throws Exception {
             return CreateRes(Do("ReadPLUbarcode", "PLUNum", pLUNum), PLUbarcodeRes.class);
     }

    /**
     *Set name for the stated department number from the internal FD database.
     * @param  number
     *         2 symbols department number in format: ##
     * @param  name
     *         23 characters department name
     * @throws Exception
     */
     public void ProgDepartment(Double number, String name) throws Exception {
             Do("ProgDepartment", "Number", number, "Name", name);
     }

    /**
     *Sets device's idle timeout setting. Set timeout for closing the connection if there is an inactivity. Maximal value - 7200, minimal value 1. 0 is for never close the connection. This option can be used only if the device has LAN or WiFi. To apply use - SaveNetworkSettings()
     * @param  idleTimeout
     *         4 symbols for Idle timeout in format ####
     * @throws Exception
     */
     public void SetIdle_Timeout(Double idleTimeout) throws Exception {
             Do("SetIdle_Timeout", "IdleTimeout", idleTimeout);
     }

    /**
     *Read device TCP Auto Start status
     * @return OptionTCPAutoStart
     * @throws Exception
     */
     public OptionTCPAutoStart ReadTCP_AutoStartStatus() throws Exception {
             return CreateRes(Do("ReadTCP_AutoStartStatus"), OptionTCPAutoStart.class);
     }

    /**
     *Prints the programmed graphical logo with the stated number.
     * @param  number
     *         Number of logo to be printed. If missing prints logo with number 0
     * @throws Exception
     */
     public void PrintLogo(Double number) throws Exception {
             Do("PrintLogo", "Number", number);
     }

    /**
     *Read the total number of customers, discounts, additions, corrections and accumulated amounts by specified operator.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's number
     * @return DailyGeneralRegistersByOperatorRes
     * @throws Exception
     */
     public DailyGeneralRegistersByOperatorRes ReadDailyGeneralRegistersByOperator(Double operNum) throws Exception {
             return CreateRes(Do("ReadDailyGeneralRegistersByOperator", "OperNum", operNum), DailyGeneralRegistersByOperatorRes.class);
     }

    /**
     *Provides information about device's GPRS password.
     * @return GPRS_PasswordRes
     * @throws Exception
     */
     public GPRS_PasswordRes ReadGPRS_Password() throws Exception {
             return CreateRes(Do("ReadGPRS_Password"), GPRS_PasswordRes.class);
     }

    /**
     *Read device communication usage with server
     * @return OptionModule
     * @throws Exception
     */
     public OptionModule ReadServer_UsedComModule() throws Exception {
             return CreateRes(Do("ReadServer_UsedComModule"), OptionModule.class);
     }

    /**
     *Print Customer X or Z report
     * @param  optionZeroing
     *         with following values: 
     *  - 'Z' -Zeroing 
     *  - 'X' - Without zeroing
     * @throws Exception
     */
     public void PrintCustomerReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintCustomerReport", "OptionZeroing", optionZeroing);
     }

    /**
     *Reads specific message number
     * @param  messageNum
     *         2 symbols for total number of messages
     * @return SpecificMessageRes
     * @throws Exception
     */
     public SpecificMessageRes ReadSpecificMessage(String messageNum) throws Exception {
             return CreateRes(Do("ReadSpecificMessage", "MessageNum", messageNum), SpecificMessageRes.class);
     }

    /**
     *Depending on the parameter prints:  − daily fiscal report with zeroing and fiscal memory record, preceded by Electronic Journal report print ('Z'); − daily fiscal report without zeroing ('X');
     * @param  optionZeroing
     *         1 character with following values:  
     * - 'Z' - Zeroing  
     * - 'X' - Without zeroing
     * @throws Exception
     */
     public void PrintDailyReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintDailyReport", "OptionZeroing", optionZeroing);
     }

    /**
     *Program TCP port of the device.
     * @param  tcpPortNumber
     *         5 symbols for TCP port number in format #####
     * @throws Exception
     */
     public void SetTcpPortNumber(Double tcpPortNumber) throws Exception {
             Do("SetTcpPortNumber", "TcpPortNumber", tcpPortNumber);
     }

    /**
     *Provides the content of the footer line.
     * @return FooterRes
     * @throws Exception
     */
     public FooterRes ReadFooter() throws Exception {
             return CreateRes(Do("ReadFooter"), FooterRes.class);
     }

    /**
     *Program device's HTTPS server address. To apply use - SaveNetworkSettings()
     * @param  addrLen
     *         Up to 3 symbols for the address length
     * @param  address
     *         Up to 50 symbols for the device's HTTPS address
     * @throws Exception
     */
     public void SetHTTPS_Address(Double addrLen, String address) throws Exception {
             Do("SetHTTPS_Address", "AddrLen", addrLen, "Address", address);
     }

    /**
     *Opens a non-fiscal receipt assigned to the specified operator and print type depends on NonFiscalPrintType parameter.
     * @param  operNum
     *         Symbols from 1 to 20 corresponding to operator's 
     * number
     * @param  operPass
     *         6 symbols for operator's password
     * @param  optionNonFiscalPrintType
     *         1 symbol with value: 
     *  - '0' - Step by step printing 
     *  - '1' - Postponed printing
     * @throws Exception
     */
     public void OpenNonFiscalReceipt(Double operNum, String operPass, OptionNonFiscalPrintType optionNonFiscalPrintType) throws Exception {
             Do("OpenNonFiscalReceipt", "OperNum", operNum, "OperPass", operPass, "OptionNonFiscalPrintType", optionNonFiscalPrintType);
     }

    /**
     *Calculate the subtotal amount with printing and display visualization options. Provide information about values of the calculated amounts. If a percent or value discount/addition has been specified the subtotal and the discount/addition value will be printed regardless the parameter for printing.
     * @param  optionPrinting
     *         1 symbol with value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  optionDisplay
     *         1 symbol with value: 
     *  - '1' - Yes 
     *  - '0' - No
     * @param  discAddV
     *         Up to 8 symbols for the value of the 
     * discount/addition. Use minus sign '-' for discount
     * @param  discAddP
     *         Up to 7 symbols for the percentage value of the 
     * discount/addition. Use minus sign '-' for discount
     * @return Double
     * @throws Exception
     */
     public Double Subtotal(OptionPrinting optionPrinting, OptionDisplay optionDisplay, Double discAddV, Double discAddP) throws Exception {
             return CreateRes(Do("Subtotal", "OptionPrinting", optionPrinting, "OptionDisplay", optionDisplay, "DiscAddV", discAddV, "DiscAddP", discAddP), Double.class);
     }

    /**
     *Erase HS codes.
     * @param  password
     *         6 symbols for password
     * @throws Exception
     */
     public void EraseHScodes(String password) throws Exception {
             Do("EraseHScodes", "Password", password);
     }

    /**
     *Print a detailed payment FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws Exception
     */
     public void PrintDetailedFMPaymentsReportByDate(Date startDate, Date endDate) throws Exception {
             Do("PrintDetailedFMPaymentsReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Program the proxy server address.
     * @param  paramLength
     *         Up to 3 symbols for parameter length
     * @param  address
     *         21 symbols for address
     * @throws Exception
     */
     public void ProgramProxyServerAddress(Double paramLength, String address) throws Exception {
             Do("ProgramProxyServerAddress", "ParamLength", paramLength, "Address", address);
     }

    /**
     *Read Electronic Journal Report by CU Invoice Number (Multiple invoices) in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.
     * @param  optionInvoiceReportFormat
     *         1 character with value 
     *  - 'M' - Detailed EJ 
     *  - 'n' - Brief EJ
     * @param  startCUInvoiceNum
     *         10 symbols for start CU invoice number in format: ##########.
     * @param  endCUInvoiceNum
     *         10 symbols for end CU invoice number in format: ##########.
     * @return Double
     * @throws Exception
     */
     public Double ReadEJByCUInvoiceNum_JSON(OptionInvoiceReportFormat optionInvoiceReportFormat, Double startCUInvoiceNum, Double endCUInvoiceNum) throws Exception {
             return CreateRes(Do("ReadEJByCUInvoiceNum_JSON", "OptionInvoiceReportFormat", optionInvoiceReportFormat, "StartCUInvoiceNum", startCUInvoiceNum, "EndCUInvoiceNum", endCUInvoiceNum), Double.class);
     }

    /**
     *Provides information about the RA amounts by type of payment and the total number of operations.
     * @return DailyRARes
     * @throws Exception
     */
     public DailyRARes ReadDailyRA() throws Exception {
             return CreateRes(Do("ReadDailyRA"), DailyRARes.class);
     }

    /**
     *Provides information about the number of customers (number of fiscal receipt issued), number of discounts, additions and corrections made and the accumulated amounts.
     * @return GeneralDailyRegistersRes
     * @throws Exception
     */
     public GeneralDailyRegistersRes ReadGeneralDailyRegisters() throws Exception {
             return CreateRes(Do("ReadGeneralDailyRegisters"), GeneralDailyRegistersRes.class);
     }

    /**
     *Stores in the memory the graphic file under stated number. Prints information about loaded in the printer graphic files.
     * @param  logoNumber
     *         1 character value from '0' to '9' or '?'. The number sets the active logo 
     * number, and the '?' invokes only printing of information
     * @throws Exception
     */
     public void SetActiveLogo(String logoNumber) throws Exception {
             Do("SetActiveLogo", "LogoNumber", logoNumber);
     }

    /**
     *Provides the content of the Display Greeting message.
     * @return String
     * @throws Exception
     */
     public String ReadDisplayGreetingMessage() throws Exception {
             return CreateRes(Do("ReadDisplayGreetingMessage"), String.class);
     }

    /**
     *Providing information about if the device's Bluetooth module is enabled or disabled.
     * @return OptionBTstatus
     * @throws Exception
     */
     public OptionBTstatus ReadBluetooth_Status() throws Exception {
             return CreateRes(Do("ReadBluetooth_Status"), OptionBTstatus.class);
     }

    /**
     *Program device's GPRS user name. To apply use - SaveNetworkSettings()
     * @param  gPRS_Username_Len
     *         Up to 3 symbols for the username len
     * @param  username
     *         Up to 100 symbols for the device's GPRS username
     * @throws Exception
     */
     public void SetGPRS_Username(Double gPRS_Username_Len, String username) throws Exception {
             Do("SetGPRS_Username", "GPRS_Username_Len", gPRS_Username_Len, "Username", username);
     }

    /**
     *Provides information about the accumulated EOD turnover and VAT
     * @return EODAmountsRes
     * @throws Exception
     */
     public EODAmountsRes ReadEODAmounts() throws Exception {
             return CreateRes(Do("ReadEODAmounts"), EODAmountsRes.class);
     }

    /**
     *Provide an information about modules supported by the device
     * @return DeviceModuleSupportRes
     * @throws Exception
     */
     public DeviceModuleSupportRes ReadDeviceModuleSupport() throws Exception {
             return CreateRes(Do("ReadDeviceModuleSupport"), DeviceModuleSupportRes.class);
     }

    /**
     *Provides information about device's GPRS username.
     * @return OptionAuthType
     * @throws Exception
     */
     public OptionAuthType ReadGPRS_AuthType() throws Exception {
             return CreateRes(Do("ReadGPRS_AuthType"), OptionAuthType.class);
     }

    /**
     *Read device's connected WiFi network name
     * @return WiFi_NetworkNameRes
     * @throws Exception
     */
     public WiFi_NetworkNameRes ReadWiFi_NetworkName() throws Exception {
             return CreateRes(Do("ReadWiFi_NetworkName"), WiFi_NetworkNameRes.class);
     }

    /**
     *Provides information about the programmed number of POS and the current values of the logo, display mode, enable/disable currency in receipt, EJ font type.
     * @return ParametersRes
     * @throws Exception
     */
     public ParametersRes ReadParameters() throws Exception {
             return CreateRes(Do("ReadParameters"), ParametersRes.class);
     }

    /**
     *Provides information about the device version.
     * @return String
     * @throws Exception
     */
     public String ReadVersion() throws Exception {
             return CreateRes(Do("ReadVersion"), String.class);
     }

    /**
     * Writes raw bytes to FP 
     * @param  bytes
     *         The bytes in BASE64 ecoded string to be written to FP
     * @throws Exception
     */
     public void RawWrite(byte[] bytes) throws Exception {
             Do("RawWrite", "Bytes", bytes);
     }

    /**
     *Programs HS code at a given position (HS number in order).
     * @param  hS_Number
     *         4 symbols for HS number in order in format ####
     * @param  hS_Code
     *         10 symbols for HS code
     * @param  hS_Name
     *         20 symbols for name of HS group
     * @param  optionTaxable
     *         1 symbol for parameter: 
     * - '1' - Exempted 
     * - '0' - Taxable
     * @param  mesureUnit
     *         3 symbols for mesure unit of item's code
     * @param  vAT_Rate
     *         Value of VAT rate from 2 to 5 symbols with format ##.##
     * @throws Exception
     */
     public void ProgHScode(Double hS_Number, String hS_Code, String hS_Name, OptionTaxable optionTaxable, String mesureUnit, Double vAT_Rate) throws Exception {
             Do("ProgHScode", "HS_Number", hS_Number, "HS_Code", hS_Code, "HS_Name", hS_Name, "OptionTaxable", optionTaxable, "MesureUnit", mesureUnit, "VAT_Rate", vAT_Rate);
     }

    /**
     *Paying the exact amount in cash, close the fiscal receipt and returns receipt info.
     * @return CashPayCloseReceiptRes
     * @throws Exception
     */
     public CashPayCloseReceiptRes CashPayCloseReceipt() throws Exception {
             return CreateRes(Do("CashPayCloseReceipt"), CashPayCloseReceiptRes.class);
     }

    /**
     *Programs the PLU VAT class, HS Code and HS Name for a certain article (item) from the internal database.
     * @param  pLUNum
     *         5 symbols for article number in format: #####
     * @param  optionVATClass
     *         1 symbol for article's VAT class with optional values: 
     *  - 'A' - VAT Class A 
     *  - 'B' - VAT Class B 
     *  - 'C' - VAT Class C 
     *  - 'D' - VAT Class D 
     *  - 'E' - VAT Class E
     * @param  hSCode
     *         10 symbols for HS Code in format XXXX.XX.XX
     * @param  hSName
     *         20 symbols for HS Name
     * @param  measureUnit
     *         3 symbols for measure unit
     * @throws Exception
     */
     public void ProgPLU_HSCodeAndHSName(Double pLUNum, OptionVATClass optionVATClass, String hSCode, String hSName, String measureUnit) throws Exception {
             Do("ProgPLU_HSCodeAndHSName", "PLUNum", pLUNum, "OptionVATClass", optionVATClass, "HSCode", hSCode, "HSName", hSName, "MeasureUnit", measureUnit);
     }

    /**
     *Program device's invoice threshold count. To apply use - SaveNetworkSettings()
     * @param  minutes
     *         10 symbols for the device's time threshold minutes
     * @throws Exception
     */
     public void SetTime_ThresholdMinutes(String minutes) throws Exception {
             Do("SetTime_ThresholdMinutes", "Minutes", minutes);
     }

    /**
     *Program the contents of a Display Greeting message.
     * @param  displayGreetingText
     *         20 symbols for display greeting message
     * @throws Exception
     */
     public void ProgDisplayGreetingMessage(String displayGreetingText) throws Exception {
             Do("ProgDisplayGreetingMessage", "DisplayGreetingText", displayGreetingText);
     }

    /**
     *Provides information about the PO amounts by type of payment and the total number of operations.
     * @return DailyPORes
     * @throws Exception
     */
     public DailyPORes ReadDailyPO() throws Exception {
             return CreateRes(Do("ReadDailyPO"), DailyPORes.class);
     }

    /**
     *Store a brief FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws Exception
     */
     public void ReadBriefFMReportByDate(Date startDate, Date endDate) throws Exception {
             Do("ReadBriefFMReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Store a brief FM report by initial and end FM report number.
     * @param  startNum
     *         4 symbols for the initial report number included in report, format ####
     * @param  endNum
     *         4 symbols for the final report number included in report, format ####
     * @param  optionStorage
     *         1 symbol for destination: 
     *  - '2' - Storage in External USB Flash memory. 
     *  - '4' - Storage in External SD card memory
     * @throws Exception
     */
     public void StoreBriefFMReportByNum(Double startNum, Double endNum, OptionStorage optionStorage) throws Exception {
             Do("StoreBriefFMReportByNum", "StartNum", startNum, "EndNum", endNum, "OptionStorage", optionStorage);
     }

    /**
     *Storage a detailed FM report by initial and end date.
     * @param  startDate
     *         6 symbols for initial date in the DDMMYY format
     * @param  endDate
     *         6 symbols for final date in the DDMMYY format
     * @throws Exception
     */
     public void ReadDetailedFMReportByDate(Date startDate, Date endDate) throws Exception {
             Do("ReadDetailedFMReportByDate", "StartDate", startDate, "EndDate", endDate);
     }

    /**
     *Prints an extended daily financial report (an article report followed by a daily financial report) with or without zeroing ('Z' or 'X').
     * @param  optionZeroing
     *         1 character with following values:  
     * - 'Z' - Zeroing  
     * - 'X' - Without zeroing
     * @throws Exception
     */
     public void PrintDetailedDailyReport(OptionZeroing optionZeroing) throws Exception {
             Do("PrintDetailedDailyReport", "OptionZeroing", optionZeroing);
     }

     public void ApplyClientLibraryDefinitions() throws Exception {
         String defsPart0 = "<Defs><ServerStartupSettings><Encoding CodePage=\"1252\" EncodingName=\"Western European (Windows)\" /><GenerationTimeStamp>2303271005</GenerationTimeStamp><SignalFD>0</SignalFD><SilentFindDevice>0</SilentFindDevice><EM>0</EM></ServerStartupSettings><Command Name=\"ReadDailyAvailableAmounts\" CmdByte=\"0x6E\"><FPOperation>Provides information about the amounts on hand by type of payment.</FPOperation><Args><Arg Name=\"\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'0\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"AmountPayment0\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 0</Desc></Res><Res Name=\"AmountPayment1\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 1</Desc></Res><Res Name=\"AmountPayment2\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 2</Desc></Res><Res Name=\"AmountPayment3\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 3</Desc></Res><Res Name=\"AmountPayment4\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 4</Desc></Res><Res Name=\"AmountCurrency\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 5</Desc></Res><ResFormatRaw><![CDATA[<\'0\'> <;> <AmountPayment0[1..13]> <;> <AmountPayment1[1..13]> <;> <AmountPayment2[1..13]> <;> <AmountPayment3[1..13]> <;> <AmountPayment4[1..13]> <;> <AmountCurrency[1..13]>]]></ResFormatRaw></Response></Command><Command Name=\"PrintArticleReport\" CmdByte=\"0x7E\"><FPOperation>Prints an article report with or without zeroing (\'Z\' or \'X\').</FPOperation><Args><Arg Name=\"OptionZeroing\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Without zeroing\" Value=\"X\" /><Option Name=\"Zeroing\" Value=\"Z\" /></Options><Desc>1 character with following values:  - \'Z\' - Zeroing  - \'X\' - Without zeroing</Desc></Arg><ArgsFormatRaw><![CDATA[ <OptionZeroing[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDecimalPoint\" CmdByte=\"0x63\"><FPOperation>Provides information about the current (the last value stored into the FM) decimal point format.</FPOperation><Response ACK=\"false\"><Res Name=\"OptionDecimalPointPosition\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Fractions\" Value=\"2\" /><Option Name=\"Whole numbers\" Value=\"0\" /></Options><Desc>1 symbol with values:  - \'0\'- Whole numbers  - \'2\' - Fractions</Desc></Res><ResFormatRaw><![CDATA[<DecimalPointPosition[1]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadInvoiceCopy\" CmdByte=\"0x7C\"><FPOperation>Read Invoice receipt copy.</FPOperation><Args><Arg Name=\"\" Value=\"J0\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"CUInvoiceNum\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for Invoice receipt Number.</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'J0\'><;><\'I\'><;> <CUInvoiceNum[10]>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"ProgParameters\" CmdByte=\"0x45\"><FPOperation>Programs the number of POS, printing of logo, cash drawer opening, external display management mode, enable or disable currency in receipt and EJ font type.</FPOperation><Args><Arg Name=\"POSNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for number of POS in format ####</Desc></Arg><Arg Name=\"OptionPrintLogo\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol of value:  - \'1\' - Yes  - \'0\' - No</Desc></Arg><Arg Name=\"OptionAutoOpenDrawer\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol of value:  - \'1\' - Yes  - \'0\' - No</Desc></Arg><Arg Name=\"reserved\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionExternalDispManagement\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Auto\" Value=\"0\" /><Option Name=\"Manual\" Value=\"1\" /></Options><Desc>1 symbol of value:  - \'1\' - Manual  - \'0\' - Auto</Desc></Arg><Arg Name=\"reserved\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionEnableCurrency\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol of value:  - \'1\' - Yes  - \'0\' - No</Desc></Arg><ArgsFormatRaw><![CDATA[ <POSNum[4]> <;> <PrintLogo[1]> <;> <AutoOpenDrawer[1]> <;> <reserved[\'1\']> <;> <ExternalDispManagement[1]> <;> <reserved[\'0\']> <;> <EnableCurrency[1]> <;>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"StartTest_Lan\" CmdByte=\"0x4E\"><FPOperation>Start LAN test on the device and print out the result</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'T\'><;><\'T\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDepartment\" CmdByte=\"0x67\"><FPOperation>Provides information for the programmed name from the stated department number</FPOperation><Args><Arg Name=\"DepNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"2\" Format=\"00\"><Desc>2 symbols for deparment number in format: ##</Desc></Arg><ArgsFormatRaw><![CDATA[ <DepNum[2]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"DepNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"2\" Format=\"00\"><Desc>Up to 2 symbols for department number in format ##</Desc></Res><Res Name=\"DepName\" Value=\"\" Type=\"Text\" MaxLen=\"23\"><Desc>23 symbols for department name</Desc></Res><ResFormatRaw><![CDATA[<DepNum[2]> <;><DepName[23]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadEJByReceiptNum\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report from receipt number to receipt number.</FPOperation><Args><Arg Name=\"\" Value=\"J0\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"000000.\"><Desc>6 symbols for initial receipt number included in report in format ######.</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"000000.\"><Desc>6 symbols for final receipt number included in report in format ######.</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'J0\'><;><\'N\'><;><StartNum[6]><;><EndNum[6]> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"PrintSpecialEventsFMReport\" CmdByte=\"0x77\"><FPOperation>Print all special FM events report.</FPOperation></Command><Command Name=\"ProgPLUgeneral\" CmdByte=\"0x4B\"><FPOperation>Programs the general data for a certain article in the internal database. The price may have variable length, while the name field is fixed.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Name\" Value=\"\" Type=\"Text\" MaxLen=\"34\"><Desc>34 symbols for article name</Desc></Arg><Arg Name=\"Price\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for article\'s price</Desc></Arg><Arg Name=\"OptionPrice\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Free price is disable valid only programmed price\" Value=\"0\" /><Option Name=\"Free price is enable\" Value=\"1\" /><Option Name=\"Limited price\" Value=\"2\" /></Options><Desc>1 symbol for Price flag with next value:  - \'0\'- Free price is disable valid only programmed price  - \'1\'- Free price is enable  - \'2\'- Limited price</Desc></Arg><Arg Name=\"MeasureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for measure unit</Desc></Arg><Arg Name=\"OptionVATClass\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"VAT Class A\" Value=\"A\" /><Option Name=\"VAT Class B\" Value=\"B\" /><Option Name=\"VAT Class C\" Value=\"C\" /><Option Name=\"VAT Class D\" Value=\"D\" /><Option Name=\"VAT Class E\" Value=\"E\" /></Options><Desc>1 symbol for article\'s VAT class with optional values:  - \'A\' - VAT Class A  - \'B\' - VAT Class B  - \'C\' - VAT Class C  - \'D\' - VAT Class D  - \'E\' - VAT Class E</Desc></Arg><Arg Name=\"BelongToDepNum\" Value=\"\" Type=\"Decimal_plus_80h\" MaxLen=\"2\"><Desc>BelongToDepNum + 80h, 1 symbol for article department attachment, formed in the following manner:</Desc></Arg><Arg Name=\"HSCode\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for HS Code in format XXXX.XX.XX</Desc></Arg><Arg Name=\"HSName\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols for HS Name</Desc></Arg><Arg Name=\"OptionSingleTransaction\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Active Single transaction in receipt\" Value=\"1\" /><Option Name=\"Inactive, default value\" Value=\"0\" /></Options><Desc>1 symbol with value:  - \'0\' - Inactive, default value  - \'1\' - Active Single transaction in receipt</Desc></Arg><Arg Name=\"Barcode\" Value=\"\" Type=\"Text\" MaxLen=\"13\"><Desc>13 symbols for barcode</Desc></Arg><Arg Name=\"AvailableQuantity\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for quantity in stock</Desc></Arg><Arg Name=\"OptionQuantityType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Availability of PLU stock is not monitored\" Value=\"0\" /><Option Name=\"Disable negative quantity\" Value=\"1\" /><Option Name=\"Enable negative quantity\" Value=\"2\" /></Options><Desc>1 symbol for Quantity flag with next value:   - \'0\'- Availability of PLU stock is not monitored   - \'1\'- Disable negative quantity   - \'2\'- Enable negative quantity</Desc></Arg><ArgsFormatRaw><![CDATA[ <PLUNum[5]> <;><Option[\'1\']><;> <Name[34]> <;><Price[1..10]><;> <OptionPrice[1]> <;> <MeasureUnit[3]> <;><OptionVATClass[1]> <;> <BelongToDepNum[1]> <;> <HSCode[10]> <;> <HSName[20]><;> <SingleTransaction[1]> <;><Barcode[13]><;> <AvailableQuantity [1..11]> <;> <OptionQuantityType[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintOrStoreEJByReceiptNum\" CmdByte=\"0x7C\"><FPOperation>Store Electronic Journal Report from receipt number to receipt number to External USB Flash memory, External SD card or Print.</FPOperation><Args><Arg Name=\"OptionReportStorage\" Value=\"\" Type=\"Option\" MaxLen=\"2\"><Options><Option Name=\"Printing\" Value=\"J1\" /><Option Name=\"Storage in External SD card memory\" Value=\"J4\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"J2\" /></Options><Desc>2 symbols for destination:  - \'J1\' - Printing   - \'J2\' - Storage in External USB Flash memory.  - \'J4\' - Storage in External SD card memory</Desc></Arg><Arg Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"000000\"><Desc>6 symbols for initial receipt number in format ###### included in report.</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"000000\"><Desc>6 symbolsfor final receipt number included in format ###### in report.</Desc></Arg><ArgsFormatRaw><![CDATA[ <OptionReportStorage[2]><;><\'N\'><;><StartNum[6]><;><EndNum[6]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetFiscalNum\" CmdByte=\"0x41\"><FPOperation>Stores the VAT and Fiscal Memory numbers into the operative memory.</FPOperation><Args><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6-symbols string</Desc></Arg><Arg Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"VATNum\" Value=\"\" Type=\"Text\" MaxLen=\"15\"><Desc>15 symbols VAT registration number</Desc></Arg><Arg Name=\"FMNum\" Value=\"\" Type=\"Text\" MaxLen=\"12\"><Desc>12 symbols Fiscal Memory serial number</Desc></Arg><Arg Name=\"PIN\" Value=\"\" Type=\"Text\" MaxLen=\"14\"><Desc>14 symbols: 2 letters, 8 digits, 1 symbol and 3 spaces</Desc></Arg><ArgsFormatRaw><![CDATA[ <Password[6]> <;> <\'1\'> <;> <VATNum[15]><;> <FMNum[12]><;><PIN[14]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintOrStoreEJ\" CmdByte=\"0x7C\"><FPOperation>Store whole Electronic Journal report to External USB Flash memory, External SD card or Print.</FPOperation><Args><Arg Name=\"OptionReportStorage\" Value=\"\" Type=\"Option\" MaxLen=\"2\"><Options><Option Name=\"Printing\" Value=\"J1\" /><Option Name=\"Storage in External SD card memory\" Value=\"J4\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"J2\" /></Options><Desc>2 symbols for destination:  - \'J1\' - Printing   - \'J2\' - Storage in External USB Flash memory.  - \'J4\' - Storage in External SD card memory</Desc></Arg><Arg Name=\"\" Value=\"*\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <OptionReportStorage[2]><;><\'*\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintOrStoreEJByPINofBuyer\" CmdByte=\"0x7C\"><FPOperation>Store Electronic Journal Report by PIN number of buyer to External SD card.</FPOperation><Args><Arg Name=\"OptionReportStorage\" Value=\"\" Type=\"Option\" MaxLen=\"2\"><Options><Option Name=\"Printing\" Value=\"J1\" /><Option Name=\"Storage in External SD card memory\" Value=\"J4\" /><Option Name=\"Storage in External SD card memory for JSON\" Value=\"JX\" /><Option Name=\"Storage in External USB Flash memory for JSON\" Value=\"Jx\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"J2\" /></Options><Desc>2 symbols for destination:  - \'J1\' - Printing   - \'J2\' - Storage in External USB Flash memory.  - \'J4\' - Storage in External SD card memory  - \'JX\' - Storage in External SD card memory for JSON - \'Jx\' - Storage in External USB Flash memory for JSON</Desc></Arg><Arg Name=\"OptionPINReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"p\" /><Option Name=\"Detailed EJ\" Value=\"P\" /></Options><Desc>1 character with value  - \'P\' - Detailed EJ  - \'p\' - Brief EJ</Desc></Arg><Arg Name=\"PINnumber\" Value=\"\" Type=\"Text\" MaxLen=\"11\"><Desc>11 symbols for PIN number</Desc></Arg><ArgsFormatRaw><![CDATA[<OptionReportStorage[2]> <;> <PINReportFormat[1]> <;> <PINnumber[11]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"RestorePreviousHeader\" CmdByte=\"0x57\"><FPOperation>Restore previous header if current header is not saved into fiscal memory.</FPOperation><Args><Arg Name=\"\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'0\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"CashDrawerOpen\" CmdByte=\"0x2A\"><FPOperation>Opens the cash drawer.</FPOperation></Command><Command Name=\"OpenDebitNoteWithFDCustomerDB\" CmdByte=\"0x30\"><FPOperation>Opens a fiscal invoice debit note receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.</FPOperation><Args><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbol from 1 to 20 corresponding to operator\'s number</Desc></Arg><Arg Name=\"OperPass\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><Arg Name=\"reserved\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionInvoiceDebitNotePrintType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Postponed Printing\" Value=\"B\" /><Option Name=\"Step by step printing\" Value=\"@\" /></Options><Desc>1 symbol with value:  - \'@\' - Step by step printing  - \'B\' - Postponed Printing</Desc></Arg><Arg Name=\"CustomerNum\" Value=\"\" Type=\"Text\" MaxLen=\"4\"><Desc>Symbol \'#\' and following up to 3 symbols for related customer ID number corresponding to the FD database</Desc></Arg><Arg Name=\"RelatedInvoiceNum\" Value=\"\" Type=\"Text\" MaxLen=\"19\"><Desc>19 symbols for the related invoice number in format ###################</Desc></Arg><ArgsFormatRaw><![CDATA[ <OperNum[1..2]> <;> <OperPass[6]> <;> <reserved[\'0\']> <;> <InvoiceDebitNotePrintType[1]> <;> <CustomerNum[4]> <;> <RelatedInvoiceNum[19]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"DisplayTextLines1and2\" CmdByte=\"0x27\"><FPOperation>Shows a 20-symbols text in the first line and last 20-symbols text in the second line of the external display lines.</FPOperation><Args><Arg Name=\"Text\" Value=\"\" Type=\"Text\" MaxLen=\"40\"><Desc>40 symbols text</Desc></Arg><ArgsFormatRaw><![CDATA[ <Text[40]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJByZReportNum\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report from report number to report number.</FPOperation><Args><Arg Name=\"\" Value=\"J0\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for initial number report in format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for final number report in format ####</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'J0\'><;><\'Z\'><;><StartNum[4]><;><EndNum[4]> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"SellPLUFromFD_DB\" CmdByte=\"0x32\"><FPOperation>Register the sell or correction with specified quantity of article from the internal FD database. The FD will perform a correction operation only if the same quantity of the article has already been sold.</FPOperation><Args><Arg Name=\"OptionSign\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Correction\" Value=\"-\" /><Option Name=\"Sale\" Value=\"+\" /></Options><Desc>1 symbol with optional value:  - \'+\' -Sale  - \'-\' - Correction</Desc><Meta MinLen=\"1\" Compulsory=\"true\" NoSemiColumnSeparatorAfterIt=\"true\" /></Arg><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for PLU number of FD\'s database in format #####</Desc></Arg><Arg Name=\"Price\" Value=\"\" Type=\"Decimal\" MaxLen=\"8\"><Desc>Up to 8 symbols for sale price</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\"$\" /></Arg><Arg Name=\"Quantity\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for article\'s quantity sold</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\"*\" /></Arg><Arg Name=\"DiscAddP\" Value=\"\" Type=\"Decimal\" MaxLen=\"7\"><Desc>Up to 7 for percentage of discount/addition. Use minus sign \'-\' for discount</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\",\" /></Arg><Arg Name=\"DiscAddV\" Value=\"\" Type=\"Decimal\" MaxLen=\"8\"><Desc>Up to 8 symbols for value of discount/addition. Use minus sign \'-\' for discount</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\":\" /></Arg><ArgsFormatRaw><![CDATA[ <OptionSign[1]> <PLUNum[5]> {<\'$\'> <Price[1..8]>} {<\'*\'> <Quantity[1..10]>} {<\',\'> <DiscAddP[1..7]>} {<\':\'> <DiscAddV[1..8]>} ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDateTime\" CmdByte=\"0x68\"><FPOperation>Provides information about the current date and time.</FPOperation><Response ACK=\"false\"><Res Name=\"DateTime\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>Date Time parameter in format: DD-MM-YY [Space] hh:mm</Desc></Res><ResFormatRaw><![CDATA[<DateTime \"DD-MM-YYYY HH:MM\">]]></ResFormatRaw></Response></Command><Command Name=\"PayExactSum\" CmdByte=\"0x35\"><FPOperation>Register the payment in the receipt with specified type of payment and exact amount received.</FPOperation><Args><Arg Name=\"OptionPaymentType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Currency\" Value=\"5\" /><Option Name=\"Payment 0\" Value=\"0\" /><Option Name=\"Payment 1\" Value=\"1\" /><Option Name=\"Payment 2\" Value=\"2\" /><Option Name=\"Payment 3\" Value=\"3\" /><Option Name=\"Payment 4\" Value=\"4\" /></Options><Desc>1 symbol for payment type:  - \'0\' - Payment 0  - \'1\' - Payment 1  - \'2\' - Payment 2  - \'3\' - Payment 3  - \'4\' - Payment 4  - \'5\' - Currency</Desc></Arg><Arg Name=\"Option\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Amount\" Value=\"&quot;\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <PaymentType[1]> <;> <Option[\'0\']> <;> <Amount[\'\"\']>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"StartTest_WiFi\" CmdByte=\"0x4E\"><FPOperation>Start WiFi test on the device and print out the result</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"W\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'W\'><;><\'T\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadFMfreeRecords\" CmdByte=\"0x74\"><FPOperation>Read the number of the remaining free records for Z-report in the Fiscal Memory.</FPOperation><Response ACK=\"false\"><Res Name=\"FreeFMrecords\" Value=\"\" Type=\"Text\" MaxLen=\"4\"><Desc>4 symbols for the number of free records for Z-report in the FM</Desc></Res><ResFormatRaw><![CDATA[<FreeFMrecords[4]><;>]]></ResFormatRaw></Response></Command><Command Name=\"ReadBluetooth_Password\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s Bluetooth password.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"B\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'> <;> <\'B\'> <;> <\'P\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"B\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"PassLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>(Length) Up to 3 symbols for the BT password length</Desc></Res><Res Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the BT password</Desc></Res><ResFormatRaw><![CDATA[<\'R\'> <;> <\'B\'> <;> <\'P\'> <;> <PassLength[1..3]> <;> <Password[100]>]]></ResFormatRaw></Response></Command><Command Name=\"CancelReceipt\" CmdByte=\"0x39\"><FPOperation>Available only if the receipt is not closed. Void all sales in the receipt and closes the fiscal receipt .</FPOperation></Command><Command Name=\"ReadInvoiceRange\" CmdByte=\"0x70\"><FPOperation>Provide information about invoice start and end numbers range.</FPOperation><Response ACK=\"false\"><Res Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"15\" Format=\"000000000000000\"><Desc>15 symbols for start No with leading zeroes in format ###############</Desc></Res><Res Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"15\" Format=\"000000000000000\"><Desc>15 symbols for end No with leading zeroes in format ###############</Desc></Res><ResFormatRaw><![CDATA[<StartNum[15]> <;> <EndNum[15]>]]></ResFormatRaw></Response></Command><Command Name=\"Read_IdleTimeout\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s idle timeout. This timeout is seconds in which the connection will be closed when there is an inactivity. This information is available if the device has LAN or WiFi. Maximal value - 7200, minimal value 1. 0 is for never close the connection.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'Z\'><;><\'I\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"IdleTimeout\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for password in format ####</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'Z\'><;><\'I\'><;><IdleTimeout[4]>]]></ResFormatRaw></Response></Command><Command Name=\"ProgOperator\" CmdByte=\"0x4A\"><FPOperation>Programs the operator\'s name and password.</FPOperation><Args><Arg Name=\"Number\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from \'1\' to \'20\' corresponding to operator\'s number</Desc></Arg><Arg Name=\"Name\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols for operator\'s name</Desc></Arg><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><ArgsFormatRaw><![CDATA[ <Number[1..2]> <;> <Name[20]> <;> <Password[6]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadInvoice_Threshold\" CmdByte=\"0x4E\"><FPOperation>Providing information about the invoice threshold count</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'S\'><;><\'I\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Threshold\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 Symbols for Invoice threshold count value</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'S\'><;><\'I\'><;><Threshold[10]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadTimeThreshold_Minutes\" CmdByte=\"0x4E\"><FPOperation>Providing information about the time threshold minutes</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'S\'><;><\'I\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Minutes\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 Symbols for time threshold minutes value</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'S\'><;><\'I\'><;><Minutes[10]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadHTTPS_Server\" CmdByte=\"0x4E\"><FPOperation>Providing information about the HTTPS server address</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"H\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'S\'><;><\'H\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"C\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"AddrLen\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>(Length) Up to 3 symbols for the HTTTPS server address length</Desc></Res><Res Name=\"Address\" Value=\"\" Type=\"Text\" MaxLen=\"50\"><Desc>Up to 50 symbols for the HTTPS address</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'S\'><;><\'C\'><;><AddrLen[1..3]><;><Address[50]>]]></ResFormatRaw></Response></Command><Command Name=\"StoreDetailedFMReportByZNum\" CmdByte=\"0x78\"><FPOperation>Storage a detailed FM report by initial and end FM report number.</FPOperation><Args><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the initial report number included in report, format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the final report number included in report, format ####</Desc></Arg><Arg Name=\"OptionStorage\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Storage in External SD card memory\" Value=\"4\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"2\" /></Options><Desc>1 symbol for destination:  - \'2\' - Storage in External USB Flash memory.  - \'4\' - Storage in External SD card memory</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\";\" /></Arg><ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]>{<;><OptionStorage[1]>} ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetDeviceTCP_MACAddress\" CmdByte=\"0x4E\"><FPOperation>Program device\'s MAC address . To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"6\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"MACAddress\" Value=\"\" Type=\"Text\" MaxLen=\"12\"><Desc>12 symbols for the MAC address</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'T\'><;><\'6\'> <;><MACAddress[12]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SellPLUfromExtDB_HS\" CmdByte=\"0x31\"><FPOperation>Register the sell (for correction use minus sign in the price field) of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.</FPOperation><Args><Arg Name=\"NamePLU\" Value=\"\" Type=\"Text\" MaxLen=\"36\"><Desc>36 symbols for article\'s name</Desc></Arg><Arg Name=\"reservde\" Value=\" \" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Price\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for article\'s price with upto 5 digits after decimal point</Desc></Arg><Arg Name=\"reserved\" Value=\"   \" Type=\"OptionHardcoded\" MaxLen=\"3\" /><Arg Name=\"HSCode\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for HS Code in format XXXX.XX.XX</Desc></Arg><Arg Name=\"reserved\" Value=\"                    \" Type=\"OptionHardcoded\" MaxLen=\"20\" /><Arg Name=\"Quantity\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>1 to 10 symbols for quantity</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\"*\" /></Arg><Arg Name=\"DiscAddP\" Value=\"\" Type=\"Decimal\" MaxLen=\"7\"><Desc>1 to 7 for percentage of discount/addition</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\",\" /></Arg><ArgsFormatRaw><![CDATA[ <NamePLU[36]> <;> <reservde[\' \']> <;> <Price[1..13]> <;> <reserved[\'   \']> <;><HSCode[10]> <;> <reserved[\'                    \']> {<\'*\'> <Quantity[1..10]>} {<\',\'> <DiscAddP[1..7]>}  ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetBluetooth_Password\" CmdByte=\"0x4E\"><FPOperation>Program device\'s Bluetooth password.</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"B\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"PassLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the BT password len</Desc></Arg><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the BT password</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'> <;> <\'B\'> <;> <\'P\'> <;> <PassLength[1..3]> <;> <Password[100]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadGPRS_APN\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s GRPS APN.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"A\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'G\'><;><\'A\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"A\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"GPRS_APN_Len\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>(Length) Up to 3 symbols for the APN length</Desc></Res><Res Name=\"APN\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the device\'s GPRS APN</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'G\'><;><\'A\'><;><GPRS_APN_Len[1..3]><;><APN[100]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadPLUqty\" CmdByte=\"0x6B\"><FPOperation>Provides information about the quantity registers of the specified article.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option[\'2\']> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format #####</Desc></Res><Res Name=\"Option\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"AvailableQuantity\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to13 symbols for quantity in stock</Desc></Res><Res Name=\"OptionQuantityType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Availability of PLU stock is not monitored\" Value=\"0\" /><Option Name=\"Disable negative quantity\" Value=\"1\" /><Option Name=\"Enable negative quantity\" Value=\"2\" /></Options><Desc>1 symbol for Quantity flag with next value:  - \'0\'- Availability of PLU stock is not monitored  - \'1\'- Disable negative quantity  - \'2\'- Enable negative quantity</Desc></Res><ResFormatRaw><![CDATA[<PLUNum[5]><;><Option[\'2\']><;><AvailableQuantity[1..11]><;> <OptionQuantityType[1]>]]></ResFormatRaw></Response></Command><Command Name=\"ScanAndPrintWiFiNetworks\" CmdByte=\"0x4E\"><FPOperation>Scan and print all available WiFi networks</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"W\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'W\'><;><\'S\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadSerialAndFiscalNums\" CmdByte=\"0x60\"><FPOperation>Provides information about the manufacturing number of the fiscal device and FM number.</FPOperation><Response ACK=\"false\"><Res Name=\"SerialNum\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>(Serial Number) 20 symbols Manufacturing number FMNumber (FM Number) 12 symbols for FM individual number</Desc></Res><Res Name=\"FMNum\" Value=\"\" Type=\"Text\" MaxLen=\"12\"><Desc>ber (FM Number) 12 symbols for FM individual number</Desc></Res><ResFormatRaw><![CDATA[<SerialNum[20]><;><FMNum [12]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadGPRS_Username\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s GPRS username.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"U\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'G\'><;><\'U\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"U\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"GPRS_User_Len\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>(Length) Up to 3 symbols for the GPRS username length</Desc></Res><Res Name=\"Username\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the device\'s GPRS username</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'G\'><;><\'U\'><;><GPRS_User_Len[1..3]><;><Username[100]>]]></ResFormatRaw></Response></Command><Command Name=\"ReceivedOnAccount_PaidOut\" CmdByte=\"0x3B\"><FPOperation>Registers cash received on account or paid out.</FPOperation><Args><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbol from 1 to 20 corresponding to the operator\'s number</Desc></Arg><Arg Name=\"OperPass\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><Arg Name=\"OptionPayType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Cash\" Value=\"0\" /><Option Name=\"Currency\" Value=\"5\" /></Options><Desc>1 symbol with value  - \'0\' - Cash  - \'5\' - Currency</Desc></Arg><Arg Name=\"Amount\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>1 to 10 symbols for the amount lodged/withdrawn</Desc></Arg><Arg Name=\"Text\" Value=\"\" Type=\"Text\" MaxLen=\"64\"><Desc>Text - TextLength-2 symbols length</Desc><Meta MinLen=\"64\" Compulsory=\"false\" ValIndicatingPresence=\"@\" /></Arg><ArgsFormatRaw><![CDATA[ <OperNum[1..2]> <;> <OperPass[6]> <;> <PayType[1]> <;> <Amount[1..10]>{<\'@\'> <Text[TextLength-2]>} ]]></ArgsFormatRaw></Args></Command><Command Name=\"StoreDetailedFMReportByDate\" CmdByte=\"0x7A\"><FPOperation>Storage a detailed FM report by initial and end date.</FPOperation><Args><Arg Name=\"StartDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><Arg Name=\"OptionStorage\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Storage in External SD card memory\" Value=\"4\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"2\" /></Options><Desc>1 symbol for destination:  - \'2\' - Storage in External USB Flash memory.  - \'4\' - Storage in External SD card memory</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\";\" /></Arg><ArgsFormatRaw><![CDATA[ <StartDate \"DDMMYY\"><;><EndDate \"DDMMYY\"> {<;><OptionStorage[1]>} ]]></ArgsFormatRaw></Args></Command><Command Name=\"SaveNetworkSettings\" CmdByte=\"0x4E\"><FPOperation>After every change on Idle timeout, LAN/WiFi/GPRS usage, LAN/WiFi/TCP/GPRS password or TCP auto start networks settings this Save command needs to be execute.</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"A\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'A\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEODAmountsByDate\" CmdByte=\"0x6D\"><FPOperation>Provides information about the accumulated EOD turnover and VAT amounts by date</FPOperation><Args><Arg Name=\"Option\" Value=\"d\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"EOD_Date\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><ArgsFormatRaw><![CDATA[ <Option[\'d\']> <;> <EOD_Date \"DDMMYY\"> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"Option\" Value=\"d\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"EOD_Date\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Res><Res Name=\"EOD_sale_turnover\" Value=\"\" Type=\"Decimal\" MaxLen=\"20\"><Desc>Up to 20 symbols for the EOD sale turnover</Desc></Res><Res Name=\"EOD_credit_turnover\" Value=\"\" Type=\"Decimal\" MaxLen=\"20\"><Desc>Up to 20 symbols for the EOD credit turnover</Desc></Res><Res Name=\"EOD_saleVAT\" Value=\"\" Type=\"Decimal\" MaxLen=\"20\"><Desc>Up to 20 symbols for the EOD VAT from sales</Desc></Res><Res Name=\"EOD_creditVAT\" Value=\"\" Type=\"Decimal\" MaxLen=\"20\"><Desc>Up to 20 symbols for the EOD VAT from credit invoices</Desc></Res><Res Name=\"InvoiceCount\" Value=\"\" Type=\"Text\" MaxLen=\"4\"><Desc>4 symbols for invoices count</Desc></Res><Res Name=\"CreditCount\" Value=\"\" Type=\"Text\" MaxLen=\"4\"><Desc>4 symbols for credit count</Desc></Res><ResFormatRaw><![CDATA[<Option[\'d\']> <;> <EOD_Date \"DDMMYY\"> <;> <EOD_sale_turnover[1..20]> <;> <EOD_credit_turnover[1..20]> <;> <EOD_saleVAT[1..20]> <;> <EOD_creditVAT [1..20]> <;> <InvoiceCount[4]> <;> <CreditCount[4]>]]></ResFormatRaw></Response></Command><Command Name=\"DirectCommand\" CmdByte=\"0xF1\"><FPOperation>Executes the direct command .</FPOperation><Args><Arg Name=\"Input\" Value=\"\" Type=\"Text\" MaxLen=\"200\"><Desc>Raw request to FP</Desc></Arg></Args><Response ACK=\"false\"><Res Name=\"Output\" Value=\"\" Type=\"Text\" MaxLen=\"200\"><Desc>FP raw response</Desc></Res></Response></Command><Command Name=\"ReadDetailedFMReportByZNum\" CmdByte=\"0x78\"><FPOperation>Storage a detailed FM report by initial and end FM report number.</FPOperation><Args><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the initial report number included in report, format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the final report number included in report, format ####</Desc></Arg><Arg Name=\"PCStorage\" Value=\"8\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]><;><PCStorage[\'8\']> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"PrintOrStoreEJByCUInvoiceNum\" CmdByte=\"0x7C\"><FPOperation>Store Electronic Journal Report by CU Invoice Number (Multiple invoices) to External SD card.</FPOperation><Args><Arg Name=\"OptionReportStorage\" Value=\"\" Type=\"Option\" MaxLen=\"2\"><Options><Option Name=\"Printing\" Value=\"J1\" /><Option Name=\"Storage in External SD card memory\" Value=\"J4\" /><Option Name=\"Storage in External SD card memory for JSON\" Value=\"JX\" /><Option Name=\"Storage in External USB Flash memory for JSON\" Value=\"Jx\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"J2\" /></Options><Desc>2 symbols for destination:  - \'J1\' - Printing   - \'J2\' - Storage in External USB Flash memory.  - \'J4\' - Storage in External SD card memory  - \'JX\' - Storage in External SD card memory for JSON - \'Jx\' - Storage in External USB Flash memory for JSON</Desc></Arg><Arg Name=\"OptionInvoiceReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"n\" /><Option Name=\"Detailed EJ\" Value=\"M\" /></Options><Desc>1 character with value  - \'M\' - Detailed EJ  - \'n\' - Brief EJ</Desc></Arg><Arg Name=\"StartCUInvoiceNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"10\" Format=\"0000000000.\"><Desc>10 symbols for start CU invoice number in format: ##########.</Desc></Arg><Arg Name=\"EndCUInvoiceNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"10\" Format=\"0000000000.\"><Desc>10 symbols for end CU invoice number in format: ##########.</Desc></Arg><ArgsFormatRaw><![CDATA[<OptionReportStorage[2]> <;> <InvoiceReportFormat[1]> <;> <StartCUInvoiceNum[10]> <;> <EndCUInvoiceNum[10]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintOrStoreEJByDateTime\" CmdByte=\"0x7C\"><FPOperation>Store Electronic Journal Report from report from datetime to datetime to External SD card.</FPOperation><Args><Arg Name=\"OptionReportStorage\" Value=\"\" Type=\"Option\" MaxLen=\"2\"><Options><Option Name=\"Printing\" Value=\"J1\" /><Option Name=\"Storage in External SD card memory\" Value=\"J4\" /><Option Name=\"Storage in External SD card memory for JSON\" Value=\"JX\" /><Option Name=\"Storage in External USB Flash memory for JSON\" Value=\"Jx\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"J2\" /></Options><Desc>2 symbols for destination:  - \'J1\' - Printing   - \'J2\' - Storage in External USB Flash memory.  - \'J4\' - Storage in External SD card memory  - \'JX\' - Storage in External SD card memory for JSON - \'Jx\' - Storage in External USB Flash memory for JSON</Desc></Arg><Arg Name=\"OptionReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"t\" /><Option Name=\"Detailed EJ\" Value=\"T\" /></Options><Desc>1 character with value  - \'T\' - Detailed EJ  - \'t\' - Brief EJ</Desc></Arg><Arg Name=\"StartRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>16 symbols for initial date in the DD-MM-YYYY</Desc></Arg><Arg Name=\"EndRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>16 symbols for final date in the DD-MM-YYYY</Desc></Arg><ArgsFormatRaw><![CDATA[<OptionReportStorage[2]> <;> <ReportFormat[1]> <;> <StartRepFromDate \"DD-MM-YYYY HH:MM\"> <;> <EndRepFromDate \"DD-MM-YYYY HH:MM\"> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJByDateTime\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report by initial to end date and time.</FPOperation><Args><Arg Name=\"\" Value=\"J0\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"OptionReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"t\" /><Option Name=\"Detailed EJ\" Value=\"T\" /></Options><Desc>1 character with value  - \'T\' - Detailed EJ  - \'t\' - Brief EJ</Desc></Arg><Arg Name=\"StartRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>16 symbols for initial date in the DD-MM-</Desc></Arg><Arg Name=\"EndRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>16 symbols for final date in the DD-MM-</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'J0\'> <;> <ReportFormat[1]> <;> <StartRepFromDate \"DD-MM-YYYY HH:MM\"><;> <EndRepFromDate \"DD-MM-YYYY HH:MM\"> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"SetWiFi_NetworkName\" CmdByte=\"0x4E\"><FPOperation>Program device\'s WiFi network name where it will connect. To apply use -SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"W\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"WiFiNameLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the WiFi network name len</Desc></Arg><Arg Name=\"WiFiNetworkName\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the device\'s WiFi ssid network name</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'W\'><;><\'N\'><;><WiFiNameLength[1..3]><;><WiFiNetworkName[100]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadHScode\" CmdByte=\"0x4F\"><FPOperation>Programs HS code at a given position (HS number in order).</FPOperation><Args><Arg Name=\"Option\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionR\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"HS_Number\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for HS number in order in format ####</Desc></Arg><ArgsFormatRaw><![CDATA[ <Option[\'Z\']> <;><OptionR[\'R\']><;><HS_Number[4]>  ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"Option\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionR\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"HS_Number\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for HS number in order in format ####</Desc></Res><Res Name=\"HS_Code\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for HS code</Desc></Res><Res Name=\"HS_Name\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols for name of HS group</Desc></Res><Res Name=\"OptionTaxable\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Exempted\" Value=\"1\" /><Option Name=\"Taxable\" Value=\"0\" /></Options><Desc>1 symbol for parameter: - \'1\' - Exempted - \'0\' - Taxable</Desc></Res><Res Name=\"MesureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for mesure unit of item\'s code</Desc></Res><Res Name=\"VAT_Rate\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"00.00\"><Desc>(VAT rate) Value of VAT rate from 2 to 5 symbols with format ##.##</Desc></Res><ResFormatRaw><![CDATA[<Option[\'Z\']> <;><OptionR[\'R\']><;><HS_Number[4]> <;> <HS_Code[10]> <;> <HS_Name[20]> <;><OptionTaxable[1]> <;> <MesureUnit[3]> <;> < VAT_Rate[2..6]>]]></ResFormatRaw></Response></Command><Command Name=\"ProgCustomerData\" CmdByte=\"0x52\"><FPOperation>Programs the customer DB for special customer receipt issuing.</FPOperation><Args><Arg Name=\"Option\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"CustomerNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"3\" Format=\"000\"><Desc>3 symbols for customer number in order in format ###</Desc></Arg><Arg Name=\"PinNumber\" Value=\"\" Type=\"Text\" MaxLen=\"14\"><Desc>14 symbols for customer PIN number</Desc></Arg><Arg Name=\"CustomerCompanyName\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer name</Desc></Arg><Arg Name=\"HeadQuarters\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for headquarters</Desc></Arg><Arg Name=\"Address\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer\'s address</Desc></Arg><Arg Name=\"City\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer\'s city</Desc></Arg><Arg Name=\"ExemptionNum\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer\'s exemption number</Desc></Arg><ArgsFormatRaw><![CDATA[ <Option[\'P\']> <;><CustomerNum[3]> <;> <PinNumber[14]> <;> <CustomerCompanyName[30]> <;> <HeadQuarters[30] <;><Address[30]> <;> <City[30]> <;> <ExemptionNum[30]>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJByCUInvoiceNum\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report by CU Invoice Number (Multiple invoices)</FPOperation><Args><Arg Name=\"\" Value=\"J0\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"OptionInvoiceReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"n\" /><Option Name=\"Detailed EJ\" Value=\"M\" /></Options><Desc>1 character with value  - \'M\' - Detailed EJ  - \'n\' - Brief EJ</Desc></Arg><Arg Name=\"StartCUInvoiceNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"10\" Format=\"0000000000.\"><Desc>10 symbols for start CU invoice number in format: ##########.</Desc></Arg><Arg Name=\"EndCUInvoiceNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"10\" Format=\"0000000000.\"><Desc>10 symbols for end CU invoice number in format: ##########.</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'J0\'> <;> <InvoiceReportFormat[1]> <;> <StartCUInvoiceNum[10]> <;> <EndCUInvoiceNum[10]> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"PrintBriefFMReportByDate\" CmdByte=\"0x7B\"><FPOperation>Print a brief FM report by initial and end date.</FPOperation><Args><Arg Name=\"StartDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><ArgsFormatRaw><![CDATA[ <StartDate \"DDMMYY\"><;><EndDate \"DDMMYY\"> ]]></ArgsFormatRaw></Args></Command><Command Name=\"DisplayTextLine1\" CmdByte=\"0x25\"><FPOperation>Shows a 20-symbols text in the upper external display line.</FPOperation><Args><Arg Name=\"Text\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols text</Desc></Arg><ArgsFormatRaw><![CDATA[ <Text[20]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadVATrates\" CmdByte=\"0x62\"><FPOperation>Provides information about the current VAT rates (the last value stored in FM).</FPOperation><Response ACK=\"false\"><Res Name=\"VATrateA\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"7\" Format=\"00.00%\"><Desc>(VAT rate A) Up to 7 symbols for VATrates of VAT class A in format ##.##%</Desc></Res><Res Name=\"VATrateB\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"7\" Format=\"00.00%\"><Desc>(VAT rate B) Up to 7 symbols for VATrates of VAT class B in format ##.##%</Desc></Res><Res Name=\"VATrateC\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"7\" Format=\"00.00%\"><Desc>(VAT rate C) Up to 7 symbols for VATrates of VAT class C in format ##.##%</Desc></Res><Res Name=\"VATrateD\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"7\" Format=\"00.00%\"><Desc>(VAT rate D) Up to 7 symbols for VATrates of VAT class D in format ##.##%</Desc></Res><Res Name=\"VATrateE\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"7\" Format=\"00.00%\"><Desc>(VAT rate E) Up to 7 symbols for VATrates of VAT class E in format ##.##%</Desc></Res><ResFormatRaw><![CDATA[<VATrateA[1..7]> <;> <VATrateB[1..7]> <;> <VATrateC[1..7]> <;> <VATrateD[1..7]> <;> <VATrateE[1..7]>]]></ResFormatRaw></Response></Command><Command Name=\"OpenDebitNoteWithFreeCustomerData\" CmdByte=\"0x30\"><FPOperation>Opens a fiscal invoice debit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.</FPOperation><Args><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbol from 1 to 20 corresponding to operator\'s number</Desc></Arg><Arg Name=\"OperPass\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><Arg Name=\"reserved\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionInvoiceDebitNotePrintType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Postponed Printing\" Value=\"B\" /><Option Name=\"Step by step printing\" Value=\"@\" /></Options><Desc>1 symbol with value:  - \'@\' - Step by step printing  - \'B\' - Postponed Printing</Desc></Arg><Arg Name=\"CompanyName\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for Invoice company name</Desc></Arg><Arg Name=\"ClientPINnum\" Value=\"\" Type=\"Text\" MaxLen=\"11\"><Desc>11 symbols for client PIN number</Desc></Arg><Arg Name=\"HeadQuarters\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer headquarters</Desc></Arg><Arg Name=\"Address\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for Address</Desc></Arg><Arg Name=\"PostalCodeAndCity\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for postal code and city</Desc></Arg><Arg Name=\"ExemptionNum\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for exemption number</Desc></Arg><Arg Name=\"RelatedInvoiceNum\" Value=\"\" Type=\"Text\" MaxLen=\"19\"><Desc>19 symbols for the related invoice number in format ####################</Desc></Arg><ArgsFormatRaw><![CDATA[ <OperNum[1..2]> <;> <OperPass[6]> <;> <reserved[\'0\']> <;> <InvoiceDebitNotePrintType[1]> <;> <CompanyName[30]> <;> <ClientPINnum[11]> <;> <HeadQuarters[30]> <;> <Address[30]> <;> <PostalCodeAndCity[30]> <;> <ExemptionNum[30]> <;> <RelatedInvoiceNum[19]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJByDateTime_JSON\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report by initial to end date and time in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.</FPOperation><Args><Arg Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"OptionReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"t\" /><Option Name=\"Detailed EJ\" Value=\"T\" /></Options><Desc>1 character with value  - \'T\' - Detailed EJ  - \'t\' - Brief EJ</Desc></Arg><Arg Name=\"StartRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>16 symbols for initial date in the DD-MM-</Desc></Arg><Arg Name=\"EndRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>16 symbols for final date in the DD-MM-</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'JY\'> <;> <ReportFormat[1]> <;> <StartRepFromDate \"DD-MM-YYYY HH:MM\"><;> <EndRepFromDate \"DD-MM-YYYY HH:MM\"> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Length\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for length</Desc></Res><ResFormatRaw><![CDATA[<\'JY\'> <;> <\'Z\'> <;> <Length[1..10]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadProxyServerAddress\" CmdByte=\"0x4E\"><FPOperation>Provides information about the proxy server address.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'S\'><;><\'P\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"ParamLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for parameter length</Desc></Res><Res Name=\"Address\" Value=\"\" Type=\"Text\" MaxLen=\"21\"><Desc>21 symbols for address</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'S\'><;><\'P\'><;> <ParamLength[1..3]> <;> <Address[21]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadHScodeNumber\" CmdByte=\"0x4F\"><FPOperation>Read the number of HS codes.</FPOperation><Args><Arg Name=\"Option\" Value=\"z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionR\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <Option[\'z\']> <;><OptionR[\'R\']>  ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"Option\" Value=\"z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionR\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"HScodesNumber\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for HS codes number in format ####</Desc></Res><ResFormatRaw><![CDATA[<Option[\'z\']> <;><OptionR[\'R\']><;>< HScodesNumber [4]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadDailyReceivedSalesAmounts\" CmdByte=\"0x6E\"><FPOperation>Provides information about the amounts received from sales by type of payment.</FPOperation><Args><Arg Name=\"\" Value=\"4\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'4\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"4\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"AmountPayment0\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 0</Desc></Res><Res Name=\"AmountPayment1\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 1</Desc></Res><Res Name=\"AmountPayment2\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 2</Desc></Res><Res Name=\"AmountPayment3\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 3</Desc></Res><Res Name=\"AmountPayment4\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 4</Desc></Res><Res Name=\"AmountCurrency\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 5</Desc></Res><ResFormatRaw><![CDATA[<\'4\'> <;> <AmountPayment0[1..13]> <;> <AmountPayment1[1..13]> <;> <AmountPayment2[1..13]> <;> <AmountPayment3[1..13]> <;> <AmountPayment4[1..13]> <;> <AmountCurrency[1..13]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadLastAndTotalReceiptNum\" CmdByte=\"0x71\"><FPOperation>Provides information about the number of the last issued receipt.</FPOperation><Response ACK=\"false\"><Res Name=\"LastCUInvoiceNum\" Value=\"\" Type=\"Text\" MaxLen=\"19\"><Desc>19 symbols for the last number of invoice according the middleware, CU, internal invoice counter</Desc></Res><Res Name=\"LastReceiptNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"7\" Format=\"0000000\"><Desc>7 symbols for last receipt number in format #######</Desc></Res><ResFormatRaw><![CDATA[<LastCUInvoiceNum[19]> <;> <LastReceiptNum[7]>]]></ResFormatRaw></Response></Command><Command Name=\"ProgPLUqty\" CmdByte=\"0x4B\"><FPOperation>Programs available quantity and Quantiy type for a certain article in the internal database.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"AvailableQuantity\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for quantity in stock</Desc></Arg><Arg Name=\"OptionQuantityType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Availability of PLU stock is not monitored\" Value=\"0\" /><Option Name=\"Disable negative quantity\" Value=\"1\" /><Option Name=\"Enable negative quantity\" Value=\"2\" /></Options><Desc>1 symbol for Quantity flag with next value:   - \'0\'- Availability of PLU stock is not monitored   - \'1\'- Disable negative quantity   - \'2\'- Enable negative quantity</Desc></Arg><ArgsFormatRaw><![CDATA[<PLUNum[5]><;><Option[\'2\']><;><AvailableQuantity [1..11]> <;> <OptionQuantityType[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ClearDisplay\" CmdByte=\"0x24\"><FPOperation>Clears the external display.</FPOperation></Command><Command Name=\"SetDHCP_Enabled\" CmdByte=\"0x4E\"><FPOperation>Program device\'s TCP network DHCP enabled or disabled. To apply use -SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionDHCPEnabled\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Disabled\" Value=\"0\" /><Option Name=\"Enabled\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - Disabled  - \'1\' - Enabled</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'T\'><;><\'1\'><;><DHCPEnabled[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetGPRS_APN\" CmdByte=\"0x4E\"><FPOperation>Program device\'s GPRS APN. To apply use -SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"A\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"GPRS_APN_Len\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the APN len</Desc></Arg><Arg Name=\"APN\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the device\'s GPRS APN</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'G\'><;><\'A\'><;><GPRS_APN_Len[1..3]><;><APN[100]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDailyPObyOperator\" CmdByte=\"0x6F\"><FPOperation>Read the PO by type of payment and the total number of operations by specified operator</FPOperation><Args><Arg Name=\"\" Value=\"3\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'3\'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"3\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Res><Res Name=\"AmountPO_Payment0\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the PO by type of payment 0</Desc></Res><Res Name=\"AmountPO_Payment1\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the PO by type of payment 1</Desc></Res><Res Name=\"AmountPO_Payment2\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the PO by type of payment 2</Desc></Res><Res Name=\"AmountPO_Payment3\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the PO by type of payment 3</Desc></Res><Res Name=\"AmountPO_Payment4\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the PO by type of payment 4</Desc></Res><Res Name=\"AmountPO_Currency\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the PO by type of payment 5</Desc></Res><Res Name=\"NumPO\" Value=\";
         String defsPart1 = ""\" Type=\"Decimal\" MaxLen=\"5\"><Desc>5 symbols for the total number of operations</Desc></Res><ResFormatRaw><![CDATA[<\'3\'> <;> <OperNum[1..2]> <;> <AmountPO_Payment0[1..13]> <;> <AmountPO_Payment1[1..13]> <;> <AmountPO_Payment2[1..13]> <;> <AmountPO_Payment3[1..13]> <;> <AmountPO_Payment4[1..13]> <;> <AmountPO_Currency[1..13]> <;> <NumPO[1..5]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadEJByPINofBuyer\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report by PIN number of buyer.</FPOperation><Args><Arg Name=\"\" Value=\"J0\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"OptionPINReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"p\" /><Option Name=\"Detailed EJ\" Value=\"P\" /></Options><Desc>1 character with value  - \'P\' - Detailed EJ  - \'p\' - Brief EJ</Desc></Arg><Arg Name=\"PINnumber\" Value=\"\" Type=\"Text\" MaxLen=\"11\"><Desc>11 symbols for PIN number</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'J0\'> <;> <PINReportFormat[1]> <;> <PINnumber[11]>  ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"AddNewHScode\" CmdByte=\"0x4F\"><FPOperation>Programs the customer DB for special customer receipt issuing.</FPOperation><Args><Arg Name=\"Option\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionW\" Value=\"W\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"reserved\" Value=\"0000\" Type=\"OptionHardcoded\" MaxLen=\"4\" /><Arg Name=\"HS_Code\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for HS code</Desc></Arg><Arg Name=\"HS_Name\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols for name of HS group</Desc></Arg><Arg Name=\"OptionTaxable\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Exempted\" Value=\"1\" /><Option Name=\"Taxable\" Value=\"0\" /></Options><Desc>1 symbol for parameter: - \'1\' - Exempted - \'0\' - Taxable</Desc></Arg><Arg Name=\"MesureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for mesure unit of item\'s code</Desc></Arg><Arg Name=\"VAT_rate\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"00.00\"><Desc>Value of VAT rate from 2 to 5 symbols with format ##.##</Desc></Arg><ArgsFormatRaw><![CDATA[ <Option[\'Z\']> <;>< OptionW[\'W\']><;><reserved[\'0000\']> <;> <HS_Code[10]> <;> <HS_Name[20]><;><OptionTaxable[1]><;><MesureUnit[3]><;><VAT_rate[2..6]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetSerialNum\" CmdByte=\"0x40\"><FPOperation>Stores the Manufacturing number into the operative memory.</FPOperation><Args><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6-symbols string</Desc></Arg><Arg Name=\"SerialNum\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols Manufacturing number</Desc></Arg><ArgsFormatRaw><![CDATA[ <Password[6]> <;> <SerialNum[20]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintDetailedFMPaymentsReportByZNum\" CmdByte=\"0x78\"><FPOperation>Print a detailed FM payment report by initial and end FM report number.</FPOperation><Args><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the initial report number included in report, format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the final report number included in report, format ####</Desc></Arg><Arg Name=\"OptionPayment\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]><;><OptionPayment[\'P\']> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ProgPLUprice\" CmdByte=\"0x4B\"><FPOperation>Program the price, Option Price and Measure Unit for a certain article (item) from the internal database. Measure Unit parameter is optional.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"4\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Price\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for article price</Desc></Arg><Arg Name=\"OptionPrice\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Free price is disable valid only programmed price\" Value=\"0\" /><Option Name=\"Free price is enable\" Value=\"1\" /><Option Name=\"Limited price\" Value=\"2\" /></Options><Desc>1 symbol for Price flag with next value:  - \'0\'- Free price is disable valid only programmed price  - \'1\'- Free price is enable  - \'2\'- Limited price</Desc></Arg><Arg Name=\"MeasureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for measure unit</Desc><Meta MinLen=\"3\" Compulsory=\"false\" ValIndicatingPresence=\";\" /></Arg><ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option[\'4\']><;><Price[1..10]><;><OptionPrice[1]>  {<;> <MeasureUnit[3]>} ]]></ArgsFormatRaw></Args></Command><Command Name=\"RawRead\" CmdByte=\"0xFF\"><FPOperation> Reads raw bytes from FP.</FPOperation><Args><Arg Name=\"Count\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>How many bytes to read if EndChar is not specified</Desc></Arg><Arg Name=\"EndChar\" Value=\"\" Type=\"Text\" MaxLen=\"1\"><Desc>The character marking the end of the data. If present Count parameter is ignored.</Desc></Arg></Args><Response ACK=\"false\"><Res Name=\"Bytes\" Value=\"\" Type=\"Base64\" MaxLen=\"100000\"><Desc>FP raw response in BASE64 encoded string</Desc></Res></Response></Command><Command Name=\"ReadDHCP_Status\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s DHCP status</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'T\'><;><\'1\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionDhcpStatus\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Disabled\" Value=\"0\" /><Option Name=\"Enabled\" Value=\"1\" /></Options><Desc>(DHCP Status) 1 symbol for device\'s DHCP status - \'0\' - Disabled  - \'1\' - Enabled</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'T\'><;><\'1\'><;><DhcpStatus[1]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadTCP_Addresses\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s IP address, subnet mask, gateway address, DNS address.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionAddressType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"DNS address\" Value=\"5\" /><Option Name=\"Gateway address\" Value=\"4\" /><Option Name=\"IP address\" Value=\"2\" /><Option Name=\"Subnet Mask\" Value=\"3\" /></Options><Desc>1 symbol with value:  - \'2\' - IP address  - \'3\' - Subnet Mask  - \'4\' - Gateway address  - \'5\' - DNS address</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'T\'><;><AddressType[1]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionAddressType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"DNS address\" Value=\"5\" /><Option Name=\"Gateway address\" Value=\"4\" /><Option Name=\"IP address\" Value=\"2\" /><Option Name=\"Subnet Mask\" Value=\"3\" /></Options><Desc>(Address) 1 symbol with value:  - \'2\' - IP address  - \'3\' - Subnet Mask  - \'4\' - Gateway address  - \'5\' - DNS address</Desc></Res><Res Name=\"DeviceAddress\" Value=\"\" Type=\"Text\" MaxLen=\"15\"><Desc>15 symbols for the device\'s addresses</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'T\'><;>< AddressType[1]><;><DeviceAddress[15]>]]></ResFormatRaw></Response></Command><Command Name=\"ProgHeader\" CmdByte=\"0x49\"><FPOperation>Program the contents of header lines.</FPOperation><Args><Arg Name=\"\" Value=\"H\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionHeaderLine\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Header 1\" Value=\"1\" /><Option Name=\"Header 2\" Value=\"2\" /><Option Name=\"Header 3\" Value=\"3\" /><Option Name=\"Header 4\" Value=\"4\" /><Option Name=\"Header 5\" Value=\"5\" /><Option Name=\"Header 6\" Value=\"6\" /><Option Name=\"Header 7\" Value=\"7\" /><Option Name=\"Header 8\" Value=\"8\" /></Options><Desc>1 symbol with value:  - \'1\' - Header 1  - \'2\' - Header 2  - \'3\' - Header 3  - \'4\' - Header 4  - \'5\' - Header 5  - \'6\' - Header 6  - \'7\' - Header 7  - \'8\' - Header 8</Desc></Arg><Arg Name=\"HeaderText\" Value=\"\" Type=\"Text\" MaxLen=\"64\"><Desc>TextLength symbols for header lines</Desc></Arg><ArgsFormatRaw><![CDATA[<\'H\'><;><OptionHeaderLine[1]> <;> <HeaderText[TextLength]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"CloseNonFiscalReceipt\" CmdByte=\"0x2F\"><FPOperation>Closes the non-fiscal receipt.</FPOperation></Command><Command Name=\"PrintBriefFMPaymentsReportByZNum\" CmdByte=\"0x79\"><FPOperation>Print a brief payment FM report by initial and end FM report number.</FPOperation><Args><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the initial report number included in report, format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the final report number included in report, format ####</Desc></Arg><Arg Name=\"OptionPayment\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]><;><OptionPayment[\'P\']> ]]></ArgsFormatRaw></Args></Command><Command Name=\"UnpairAllDevices\" CmdByte=\"0x4E\"><FPOperation>Removes all paired devices.</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"B\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'P\'> <;> <\'B\'> <;> <\'D\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"DisplayDateTime\" CmdByte=\"0x28\"><FPOperation>Shows the current date and time on the external display.</FPOperation></Command><Command Name=\"SetTCP_AutoStart\" CmdByte=\"0x4E\"><FPOperation>Set device\'s TCP autostart . To apply use -SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionTCPAutoStart\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - No  - \'1\' - Yes</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'Z\'><;><\'2\'><;><TCPAutoStart[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintOrStoreEJByDate\" CmdByte=\"0x7C\"><FPOperation>Store Electronic Journal Report from report from date to date to External USB Flash memory, External SD card or Print.</FPOperation><Args><Arg Name=\"OptionReportStorage\" Value=\"\" Type=\"Option\" MaxLen=\"2\"><Options><Option Name=\"Printing\" Value=\"J1\" /><Option Name=\"Storage in External SD card memory\" Value=\"J4\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"J2\" /></Options><Desc>2 symbols for destination:  - \'J1\' - Printing   - \'J2\' - Storage in External USB Flash memory.  - \'J4\' - Storage in External SD card memory</Desc></Arg><Arg Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"StartRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><ArgsFormatRaw><![CDATA[<OptionReportStorage[2]> <;> <\'D\'> <;> <StartRepFromDate \"DDMMYY\"> <;> <EndRepFromDate \"DDMMYY\"> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetTCP_ActiveModule\" CmdByte=\"0x4E\"><FPOperation>Sets the used TCP module for communication - Lan or WiFi. To apply use -SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"U\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionUsedModule\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"LAN\" Value=\"1\" /><Option Name=\"WiFi\" Value=\"2\" /></Options><Desc>1 symbol with value:  - \'1\' - LAN  - \'2\' - WiFi</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'Z\'><;><\'U\'><;><UsedModule[1]><;> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadTCP_UsedModule\" CmdByte=\"0x4E\"><FPOperation>Read the used TCP module for communication - Lan or WiFi</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"U\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'Z\'><;><\'U\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"U\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionUsedModule\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"LAN\" Value=\"1\" /><Option Name=\"WiFi\" Value=\"2\" /></Options><Desc>(Module) 1 symbol with value:  - \'1\' - LAN  - \'2\' - WiFi</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'Z\'><;><\'U\'><;><UsedModule[1]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadTCP_MACAddress\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s MAC address.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"6\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'T\'><;><\'6\' > ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"6\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"MACAddress\" Value=\"\" Type=\"Text\" MaxLen=\"12\"><Desc>12 symbols for the device\'s MAC address</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'T\'><;><\'6\'><;><MACAddress[12]>]]></ResFormatRaw></Response></Command><Command Name=\"PaperFeed\" CmdByte=\"0x2B\"><FPOperation>Feeds one line of paper.</FPOperation></Command><Command Name=\"CloseReceipt\" CmdByte=\"0x38\"><FPOperation>Closes the opened fiscal receipt and returns receipt info.</FPOperation><Response ACK=\"false\"><Res Name=\"InvoiceNum\" Value=\"\" Type=\"Text\" MaxLen=\"19\"><Desc>19 symbols for CU invoice number</Desc></Res><Res Name=\"QRcode\" Value=\"\" Type=\"Text\" MaxLen=\"128\"><Desc>128 symbols for QR code</Desc></Res><ResFormatRaw><![CDATA[<InvoiceNum[19]<;><QRcode[128]>]]></ResFormatRaw></Response></Command><Command Name=\"OpenCreditNoteWithFreeCustomerData\" CmdByte=\"0x30\"><FPOperation>Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.</FPOperation><Args><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbol from 1 to 20 corresponding to operator\'s number</Desc></Arg><Arg Name=\"OperPass\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><Arg Name=\"reserved\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionInvoiceCreditNotePrintType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Postponed Printing\" Value=\"C\" /><Option Name=\"Step by step printing\" Value=\"A\" /></Options><Desc>1 symbol with value: - \'A\' - Step by step printing - \'C\' - Postponed Printing</Desc></Arg><Arg Name=\"CompanyName\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for Invoice company name</Desc></Arg><Arg Name=\"ClientPINnum\" Value=\"\" Type=\"Text\" MaxLen=\"11\"><Desc>11 symbols for client PIN number</Desc></Arg><Arg Name=\"HeadQuarters\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer headquarters</Desc></Arg><Arg Name=\"Address\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for Address</Desc></Arg><Arg Name=\"PostalCodeAndCity\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for postal code and city</Desc></Arg><Arg Name=\"ExemptionNum\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for exemption number</Desc></Arg><Arg Name=\"RelatedInvoiceNum\" Value=\"\" Type=\"Text\" MaxLen=\"19\"><Desc>19 symbols for the related invoice number in format ###################</Desc></Arg><ArgsFormatRaw><![CDATA[ <OperNum[1..2]> <;> <OperPass[6]> <;> <reserved[\'0\']> <;> <InvoiceCreditNotePrintType[1]> <;> <CompanyName[30]> <;> <ClientPINnum[11]> <;> <HeadQuarters[30]> <;> <Address[30]> <;> <PostalCodeAndCity[30]> <;> <ExemptionNum[30]> <;> <RelatedInvoiceNum[19]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintBarcode\" CmdByte=\"0x51\"><FPOperation>Prints barcode from type stated by CodeType and CodeLen and with data stated in CodeData field.</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionCodeType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"CODABAR\" Value=\"6\" /><Option Name=\"CODE 128\" Value=\"I\" /><Option Name=\"CODE 39\" Value=\"4\" /><Option Name=\"CODE 93\" Value=\"H\" /><Option Name=\"EAN 13\" Value=\"2\" /><Option Name=\"EAN 8\" Value=\"3\" /><Option Name=\"ITF\" Value=\"5\" /><Option Name=\"UPC A\" Value=\"0\" /><Option Name=\"UPC E\" Value=\"1\" /></Options><Desc>1 symbol with possible values:  - \'0\' - UPC A  - \'1\' - UPC E  - \'2\' - EAN 13  - \'3\' - EAN 8  - \'4\' - CODE 39  - \'5\' - ITF  - \'6\' - CODABAR  - \'H\' - CODE 93  - \'I\' - CODE 128</Desc></Arg><Arg Name=\"CodeLen\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>1 or 2 bytes for number of bytes according to the table without checksum</Desc></Arg><Arg Name=\"CodeData\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>From 0 to 255 bytes data in range according to the table</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'> <;> <CodeType[1]> <;> <CodeLen[1..2]> <;> <CodeData[100]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintDepartmentReport\" CmdByte=\"0x76\"><FPOperation>Print a department report with or without zeroing (\'Z\' or \'X\').</FPOperation><Args><Arg Name=\"OptionZeroing\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Without zeroing\" Value=\"X\" /><Option Name=\"Zeroing\" Value=\"Z\" /></Options><Desc>1 symbol with value:  - \'Z\' - Zeroing  - \'X\' - Without zeroing</Desc></Arg><ArgsFormatRaw><![CDATA[ <OptionZeroing[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadTcpPortNumber\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s TCP port number.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'Z\'><;><\'P\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"TcpPortNumber\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for TCP port in format #####</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'Z\'><;><\'P\'><;><TcpPortNumber[5]>]]></ResFormatRaw></Response></Command><Command Name=\"DisplayTextLine2\" CmdByte=\"0x26\"><FPOperation>Shows a 20-symbols text in the lower external display line.</FPOperation><Args><Arg Name=\"Text\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols text</Desc></Arg><ArgsFormatRaw><![CDATA[ <Text[20]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDailyCounters\" CmdByte=\"0x6E\"><FPOperation>Provides information about the current reading of the daily-report- with-zeroing counter, the number of the last block stored in FM, the number of EJ and the date and time of the last block storage in the FM.</FPOperation><Args><Arg Name=\"\" Value=\"5\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'5\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"5\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"LastReportNumFromReset\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of the last report from reset</Desc></Res><Res Name=\"NumLastFMBlock\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of the last FM report</Desc></Res><Res Name=\"NumEJ\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of EJ</Desc></Res><Res Name=\"DateTime\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>16 symbols for date and time of the last block storage in FM in format \"DD-MM-YYYY HH:MM\"</Desc></Res><ResFormatRaw><![CDATA[<\'5\'> <;> <LastReportNumFromReset[1..5]> <;> <NumLastFMBlock[1..5]> <;> <NumEJ[1..5]> <;> <DateTime \"DD-MM-YYYY HH:MM\">]]></ResFormatRaw></Response></Command><Command Name=\"PrintDetailedFMReportByZNum\" CmdByte=\"0x78\"><FPOperation>Print a detailed FM report by initial and end FM report number.</FPOperation><Args><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the initial report number included in report, format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the final report number included in report, format ####</Desc></Arg><ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"StoreBriefFMReportByDate\" CmdByte=\"0x7B\"><FPOperation>Store a brief FM report by initial and end date.</FPOperation><Args><Arg Name=\"StartDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><Arg Name=\"OptionStorage\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Storage in External SD card memory\" Value=\"4\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"2\" /></Options><Desc>1 symbol for destination:  - \'2\' - Storage in External USB Flash memory.  - \'4\' - Storage in External SD card memory</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\";\" /></Arg><ArgsFormatRaw><![CDATA[ <StartDate \"DDMMYY\"><;><EndDate \"DDMMYY\"> {<;><OptionStorage[1]>} ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJByTraderSystemInvNum\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report by Trader System Invoice Number (Single Invoice).</FPOperation><Args><Arg Name=\"\" Value=\"J0\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"OptionTraderSystemReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"s\" /><Option Name=\"Detailed EJ\" Value=\"S\" /></Options><Desc>1 character with value  - \'S\' - Detailed EJ  - \'s\' - Brief EJ</Desc></Arg><Arg Name=\"TraderSystemInvNum\" Value=\"\" Type=\"Text\" MaxLen=\"15\"><Desc>15 symbols for trader system invoice number</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'J0\'> <;> <TraderSystemReportFormat[1]> <;> <TraderSystemInvNum[15]> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"SetWiFi_Password\" CmdByte=\"0x4E\"><FPOperation>Program device\'s WiFi network password where it will connect. To apply use -SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"W\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"PassLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the WiFi password len</Desc></Arg><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the device\'s WiFi password</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'W\'><;><\'P\'><;><PassLength[1..3]><;><Password[100]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"StartTest_Bluetooth\" CmdByte=\"0x4E\"><FPOperation>Start Bluetooth test on the device and print out the result</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"B\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'B\'><;><\'T\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadInfoFromLastServerCommunication\" CmdByte=\"0x5A\"><FPOperation>Provide information from the last communication with the server.</FPOperation><Args><Arg Name=\"Option\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionServerResponse\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"At send EOD\" Value=\"Z\" /><Option Name=\"At send receipt\" Value=\"R\" /></Options><Desc>1 symbol with value - \'R\' - At send receipt - \'Z\' - At send EOD</Desc></Arg><Arg Name=\"OptionTransactionType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Error Code\" Value=\"c\" /><Option Name=\"Error Message\" Value=\"m\" /><Option Name=\"Exception Message\" Value=\"e\" /><Option Name=\"Response Code\" Value=\"r\" /><Option Name=\"Status\" Value=\"s\" /></Options><Desc>1 symbol with value - \'c\' - Error Code - \'m\' - Error Message - \'s\' - Status - \'e\' - Exception Message - \'r\' - Response Code</Desc></Arg><ArgsFormatRaw><![CDATA[ <Option[\'S\']><;> <ServerResponse[1]><;><TransactionType[1]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"Option\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionServerResponse\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"At send EOD\" Value=\"Z\" /><Option Name=\"At send receipt\" Value=\"R\" /></Options><Desc>1 symbol with value - \'R\' - At send receipt - \'Z\' - At send EOD</Desc></Res><Res Name=\"OptionTransactionType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Error Code\" Value=\"c\" /><Option Name=\"Error Message\" Value=\"m\" /><Option Name=\"Exception Message\" Value=\"e\" /><Option Name=\"Response Code\" Value=\"r\" /><Option Name=\"Status\" Value=\"s\" /></Options><Desc>1 symbol with value - \'c\' - Error Code - \'m\' - Error Message - \'s\' - Status - \'e\' - Exception Message - \'r\' - Response Code</Desc></Res><Res Name=\"Message\" Value=\"\" Type=\"Text\" MaxLen=\"200\"><Desc>Up to 200 symbols for the message from the server</Desc></Res><ResFormatRaw><![CDATA[<Option[\'S\']><;> <ServerResponse[1]><;><TransactionType[1]><;><Message[200]>]]></ResFormatRaw></Response></Command><Command Name=\"PrintCurrentHeader\" CmdByte=\"0x57\"><FPOperation>Print current headers and Fiscal Memory operative header</FPOperation><Args><Arg Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'1\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"EraseAllPLUs\" CmdByte=\"0x4B\"><FPOperation>Erase all PLUs data from the internal database and return the default values.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"00000\" Type=\"OptionHardcoded\" MaxLen=\"5\" /><Arg Name=\"Option\" Value=\"$\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for password</Desc></Arg><ArgsFormatRaw><![CDATA[ <PLUNum[\'00000\']><;><Option[\'$\']><;><Password[6]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ConfirmFiscalization\" CmdByte=\"0x41\"><FPOperation>Confirm VAT and Fiscal Memory number into the operative memory.</FPOperation><Args><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6-symbols string</Desc></Arg><Arg Name=\"\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <Password[6]> <;> <\'2\'>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"StoreCurrentHeaderInFM\" CmdByte=\"0x57\"><FPOperation>Store the header into fiscal memory.</FPOperation><Args><Arg Name=\"\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6-symbols string</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'2\'> <;> <Password[6]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDailyRAbyOperator\" CmdByte=\"0x6F\"><FPOperation>Read the RA by type of payment and the total number of operations by specified operator.</FPOperation><Args><Arg Name=\"\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20corresponding to operator\'s number</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'2\'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Res><Res Name=\"AmountRA_Payment0\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the RA by type of payment 0</Desc></Res><Res Name=\"AmountRA_Payment1\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the RA by type of payment 1</Desc></Res><Res Name=\"AmountRA_Payment2\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the RA by type of payment 2</Desc></Res><Res Name=\"AmountRA_Payment3\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the RA by type of payment 3</Desc></Res><Res Name=\"AmountRA_Payment4\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 4</Desc></Res><Res Name=\"AmountRA_Currency\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 5</Desc></Res><Res Name=\"NumRA\" Value=\"\" Type=\"Text\" MaxLen=\"5\"><Desc>5 symbols for the total number of operations</Desc></Res><ResFormatRaw><![CDATA[<\'2\'> <;> <OperNum[1..2]> <;> <AmountRA_Payment0[1..13]> <;> <AmountRA_Payment1[1..13]> <;><AmountRA_Payment2[1..13]> <;> <AmountRA_Payment3[1..13]> <;> <AmountRA_Payment4[1..13]> <;> <AmountRA_Currency[1..13]> <;><NumRA[5]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadFirstEODDate\" CmdByte=\"0x6D\"><FPOperation>Provides information about first EOD date</FPOperation><Args><Arg Name=\"Option\" Value=\"d\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Option\" Value=\"f\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <Option[\'d\']> <;> <Option[\'f\']> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"Option\" Value=\"d\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Option\" Value=\"f\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"DateTime\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>Date Time parameter in format: DDMMYY</Desc></Res><ResFormatRaw><![CDATA[<Option[\'d\']> <;> <Option[\'f\']> <;> <DateTime \"DDMMYY\">]]></ResFormatRaw></Response></Command><Command Name=\"StartTest_GPRS\" CmdByte=\"0x4E\"><FPOperation>Start GPRS test on the device and print out the result</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'G\'><;><\'T\'> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadHeader\" CmdByte=\"0x69\"><FPOperation>Provides the content of the header lines</FPOperation><Args><Arg Name=\"\" Value=\"H\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionHeaderLine\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Header 1\" Value=\"1\" /><Option Name=\"Header 2\" Value=\"2\" /><Option Name=\"Header 3\" Value=\"3\" /><Option Name=\"Header 4\" Value=\"4\" /><Option Name=\"Header 5\" Value=\"5\" /><Option Name=\"Header 6\" Value=\"6\" /><Option Name=\"Header 7\" Value=\"7\" /><Option Name=\"Header 8\" Value=\"8\" /></Options><Desc>1 symbol with value:  - \'1\' - Header 1  - \'2\' - Header 2  - \'3\' - Header 3  - \'4\' - Header 4  - \'5\' - Header 5  - \'6\' - Header 6  - \'7\' - Header 7  - \'8\' - Header 8</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'H\'><;><OptionHeaderLine[1]>  ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"H\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionHeaderLine\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Header 1\" Value=\"1\" /><Option Name=\"Header 2\" Value=\"2\" /><Option Name=\"Header 3\" Value=\"3\" /><Option Name=\"Header 4\" Value=\"4\" /><Option Name=\"Header 5\" Value=\"5\" /><Option Name=\"Header 6\" Value=\"6\" /><Option Name=\"Header 7\" Value=\"7\" /><Option Name=\"Header 8\" Value=\"8\" /></Options><Desc>(Line Number) 1 symbol with value:  - \'1\' - Header 1  - \'2\' - Header 2  - \'3\' - Header 3  - \'4\' - Header 4  - \'5\' - Header 5  - \'6\' - Header 6  - \'7\' - Header 7  - \'8\' - Header 8</Desc></Res><Res Name=\"HeaderText\" Value=\"\" Type=\"Text\" MaxLen=\"64\"><Desc>TextLength symbols for header lines</Desc></Res><ResFormatRaw><![CDATA[<\'H\'><;><OptionHeaderLine[1]><;><HeaderText[TextLength]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadVATNum\" CmdByte=\"0x61\"><FPOperation>Read the VAT registration number.</FPOperation><Response ACK=\"false\"><Res Name=\"VATNum\" Value=\"\" Type=\"Text\" MaxLen=\"15\"><Desc>(VAT Number) 15 symbols VAT registration number</Desc></Res><Res Name=\"FMNum\" Value=\"\" Type=\"Text\" MaxLen=\"12\"><Desc>(FM Number) 12 symbols Fiscal Memory serial number</Desc></Res><Res Name=\"PIN\" Value=\"\" Type=\"Text\" MaxLen=\"14\"><Desc>(PIN) 14 symbols: 2 letters, 8 digits, 1 symbol and 3 spaces</Desc></Res><ResFormatRaw><![CDATA[<VATNum[15]><;> <FMNum[12]><;><PIN[14]>]]></ResFormatRaw></Response></Command><Command Name=\"CutPaper\" CmdByte=\"0x29\"><FPOperation>Start paper cutter devices.</FPOperation></Command><Command Name=\"ReadDeviceModuleSupportByFirmware\" CmdByte=\"0x4E\"><FPOperation>Provide an information about modules supported by device\'s firmware</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'D\'><;><\'S\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionLAN\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol for LAN suppor - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"OptionWiFi\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol for WiFi support - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"OptionGPRS\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol for GPRS support - \'0\' - No  - \'1\' - Yes BT (Bluetooth) 1 symbol for Bluetooth support - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"OptionBT\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>(Bluetooth) 1 symbol for Bluetooth support - \'0\' - No  - \'1\' - Yes</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'D\'><;><\'S\'><;><LAN[1]><;><WiFi[1]><;><GPRS[1]><;><BT[1]>]]></ResFormatRaw></Response></Command><Command Name=\"SetInvoiceRange\" CmdByte=\"0x50\"><FPOperation>Set invoice start and end number range. To execute the command is necessary to grand following condition: the number range to be spent, not used, or not set after the last RAM reset.</FPOperation><Args><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"15\" Format=\"000000000000000\"><Desc>15 characters for start number in format: ###############</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"15\" Format=\"000000000000000\"><Desc>15 characters for end number in format: ###############</Desc></Arg><ArgsFormatRaw><![CDATA[ <StartNum[15]> <;> <EndNum[15]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadWiFi_Password\" CmdByte=\"0x4E\"><FPOperation>Read device\'s connected WiFi network password</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"W\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'W\'><;><\'P\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"W\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"PassLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>(Length) Up to 3 symbols for the WiFi password length</Desc></Res><Res Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the device\'s WiFi password</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'W\'><;><\'P\'><;><PassLength[1..3]><;><Password[100]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadEJByPINofBuyer_JSON\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report by PIN number of buyer in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.</FPOperation><Args><Arg Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"OptionPINReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"p\" /><Option Name=\"Detailed EJ\" Value=\"P\" /></Options><Desc>1 character with value  - \'P\' - Detailed EJ  - \'p\' - Brief EJ</Desc></Arg><Arg Name=\"PINnumber\" Value=\"\" Type=\"Text\" MaxLen=\"11\"><Desc>11 symbols for PIN number</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'JY\'> <;> < PINReportFormat[1]> <;> <PINnumber[11]>  ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Length\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for length</Desc></Res><ResFormatRaw><![CDATA[<\'JY\'> <;> <\'Z\'> <;> <Length[1..10]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadNTP_Address\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s NTP address.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'S\'><;><\'N\' > ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"AddressLen\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the address length</Desc></Res><Res Name=\"NTPAddress\" Value=\"\" Type=\"Text\" MaxLen=\"50\"><Desc>(NTP Address)50 symbols for the device\'s NTP address</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'S\'><;><\'N\'><;><AddressLen[1..3]><;><NTPAddress[50]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadDailyAmountsByVAT\" CmdByte=\"0x6D\"><FPOperation>Provides information about the accumulated amounts and refunded amounts by VAT class.</FPOperation><Response ACK=\"false\"><Res Name=\"SaleAmountVATGrA\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the amount accumulated in the VAT group A</Desc></Res><Res Name=\"SaleAmountVATGrB\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the amount accumulated in the VAT group B</Desc></Res><Res Name=\"SaleAmountVATGrC\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the amount accumulated in the VAT group C</Desc></Res><Res Name=\"SaleAmountVATGrD\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the amount accumulated in the VAT group D</Desc></Res><Res Name=\"SaleAmountVATGrE\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the amount accumulated in the VAT group E</Desc></Res><Res Name=\"TurnoverAmountVAT\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the turnover amount for VATs A, B, C, D</Desc></Res><Res Name=\"RefundAmountVATGrA\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the refund amount accumulated in the VAT group A</Desc></Res><Res Name=\"RefundAmountVATGrB\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the refund amount accumulated in the VAT group B</Desc></Res><Res Name=\"RefundAmountVATGrC\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the refund amount accumulated in the VAT group C</Desc></Res><Res Name=\"RefundAmountVATGrD\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the refund amount accumulated in the VAT group D</Desc></Res><Res Name=\"RefundAmountVATGrE\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the refund amount accumulated in the VAT group E</Desc></Res><Res Name=\"TurnoverRefundAmountVAT\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the refund turnover amount for VATs A, B, C, D</Desc></Res><ResFormatRaw><![CDATA[<SaleAmountVATGrA[1..13]> <;> <SaleAmountVATGrB[1..13]> <;> <SaleAmountVATGrC[1..13]> <;><SaleAmountVATGrD[1..13]> <;><SaleAmountVATGrE[1..13]> <;> <TurnoverAmountVAT[1..13]> <;> <RefundAmountVATGrA[1..13]> <;> <RefundAmountVATGrB[1..13]> <;> <RefundAmountVATGrC[1..13]> <;> <RefundAmountVATGrD[1..13]> <;> <RefundAmountVATGrE[1..13]> <;> <TurnoverRefundAmountVAT[1..13]>]]></ResFormatRaw></Response></Command><Command Name=\"ProgPLUbarcode\" CmdByte=\"0x4B\"><FPOperation>Program the barcode number for a certain article from the internal database.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"3\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Barcode\" Value=\"\" Type=\"Text\" MaxLen=\"13\"><Desc>13 symbols for barcode</Desc></Arg><ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option[\'3\']><;><Barcode[13]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintDetailedFMReportByDate\" CmdByte=\"0x7A\"><FPOperation>Prints a detailed FM report by initial and end date.</FPOperation><Args><Arg Name=\"StartDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><ArgsFormatRaw><![CDATA[ <StartDate \"DDMMYY\"><;><EndDate \"DDMMYY\"> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadBriefFMReportByNum\" CmdByte=\"0x79\"><FPOperation>Store a brief FM report by initial and end FM report number.</FPOperation><Args><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the initial report number included in report, format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the final report number included in report, format ####</Desc></Arg><Arg Name=\"PCStorage\" Value=\"8\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]> <;><PCStorage[\'8\']> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"ReadPLUgeneral\" CmdByte=\"0x6B\"><FPOperation>Provides information about the general registers of the specified article.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option[\'1\']> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format #####</Desc></Res><Res Name=\"Option\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"PLUName\" Value=\"\" Type=\"Text\" MaxLen=\"34\"><Desc>34 symbols for article name</Desc></Res><Res Name=\"Price\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for article\'s price</Desc></Res><Res Name=\"OptionPrice\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Free price is disable valid only programmed price\" Value=\"0\" /><Option Name=\"Free price is enable\" Value=\"1\" /><Option Name=\"Limited price\" Value=\"2\" /></Options><Desc>1 symbol for Price flag with next value:  - \'0\'- Free price is disable valid only programmed price  - \'1\'- Free price is enable  - \'2\'- Limited price</Desc></Res><Res Name=\"MeasureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for measure unit</Desc></Res><Res Name=\"OptionVATClass\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"VAT Class A\" Value=\"A\" /><Option Name=\"VAT Class B\" Value=\"B\" /><Option Name=\"VAT Class C\" Value=\"C\" /><Option Name=\"VAT Class D\" Value=\"D\" /><Option Name=\"VAT Class E\" Value=\"E\" /></Options><Desc>1 symbol for article\'s VAT class with optional values:  - \'A\' - VAT Class A  - \'B\' - VAT Class B  - \'C\' - VAT Class C  - \'D\' - VAT Class D  - \'E\' - VAT Class E</Desc></Res><Res Name=\"BelongToDepNum\" Value=\"\" Type=\"Decimal_plus_80h\" MaxLen=\"2\"><Desc>(Department Number) BelongToDepNum + 80h, 1 symbol for article department attachment, formed in the following manner:</Desc></Res><Res Name=\"HSCode\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>(HS Code) 10 symbols for HS Code in format XXXX.XX.XX</Desc></Res><Res Name=\"HSName\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>(HS Name) 20 symbols for HS Name</Desc></Res><Res Name=\"OptionSingleTransaction\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Active Single transaction in receipt\" Value=\"1\" /><Option Name=\"Inactive, default value\" Value=\"0\" /></Options><Desc>1 symbol with value:  - \'0\' - Inactive, default value  - \'1\' - Active Single transaction in receipt</Desc></Res><Res Name=\"Barcode\" Value=\"\" Type=\"Text\" MaxLen=\"13\"><Desc>13 symbols for barcode</Desc></Res><Res Name=\"AvailableQuantity\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>(Available Quantity) Up to 11 symbols for quantity in stock</Desc></Res><Res Name=\"OptionQuantityType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Availability of PLU stock is not monitored\" Value=\"0\" /><Option Name=\"Disable negative quantity\" Value=\"1\" /><Option Name=\"Enable negative quantity\" Value=\"2\" /></Options><Desc>1 symbol for Quantity flag with next value:   - \'0\'- Availability of PLU stock is not monitored   - \'1\'- Disable negative quantity   - \'2\'- Enable negative quantity</Desc></Res><Res Name=\"TurnoverAmount\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 11 symbols for PLU accumulated turnover</Desc></Res><Res Name=\"SoldQuantity\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for Sales quantity of the article</Desc></Res><Res Name=\"RefundTurnoverAmount\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for Refund turnover amount</Desc></Res><Res Name=\"RefundTurnoverQuantity\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for Refund turnover quantity</Desc></Res><Res Name=\"LastZReportNumber\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for the number of the last in format #####  article report with zeroing</Desc></Res><Res Name=\"LastZReportDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>16 symbols for the date and time of the last article report with zeroing</Desc></Res><ResFormatRaw><![CDATA[<PLUNum[5]><;><Option[\'1\']><;><PLUName[34]><;><Price[1..10]><;> <OptionPrice[1]> <;> <MeasureUnit[3]> <;><OptionVATClass[1]> <;> <BelongToDepNum[1]> <;> <HSCode[10]> <;> <HSName[20]><;> <SingleTransaction[1]> <;><Barcode[13]> <;> <AvailableQuantity [1..11]> <;> <OptionQuantityType[1]><;> <TurnoverAmount[1..10]> <;> <SoldQuantity[1..11]> <;> <RefundTurnoverAmount[1..11]> <;> <RefundTurnoverQuantity[1..11]><;> <LastZReportNumber[1..5]><;> <LastZReportDate\"DD-MM-YYYY HH:MM\">]]></ResFormatRaw></Response></Command><Command Name=\"ReadDailyReceivedSalesAmountsByOperator\" CmdByte=\"0x6F\"><FPOperation>Read the amounts received from sales by type of payment and specified operator.</FPOperation><Args><Arg Name=\"\" Value=\"4\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'4\'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"4\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Res><Res Name=\"ReceivedSalesAmountPayment0\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for amounts received by sales for payment 0</Desc></Res><Res Name=\"ReceivedSalesAmountPayment1\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for amounts received by sales for payment 1</Desc></Res><Res Name=\"ReceivedSalesAmountPayment2\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for amounts received by sales for payment 2</Desc></Res><Res Name=\"ReceivedSalesAmountPayment3\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for amounts received by sales for payment 3</Desc></Res><Res Name=\"ReceivedSalesAmountPayment4\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for amounts received by sales for payment 4</Desc></Res><Res Name=\"ReceivedSalesAmountCurrency\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for amounts received by sales for payment 5</Desc></Res><ResFormatRaw><![CDATA[<\'4\'> <;> <OperNum[1..2]> <;> <ReceivedSalesAmountPayment0[1..13]> <;> <ReceivedSalesAmountPayment1[1..13]> <;> <ReceivedSalesAmountPayment2[1..13]> <;> <ReceivedSalesAmountPayment3[1..13]> <;> <ReceivedSalesAmountPayment4[1..13]> <;> <ReceivedSalesAmountCurrency[1..13]> <;>]]></ResFormatRaw></Response></Command><Command Name=\"ReadCustomerData\" CmdByte=\"0x52\"><FPOperation>Provide information for specified customer from FD database.</FPOperation><Args><Arg Name=\"Option\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"CustomerNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"3\" Format=\"000\"><Desc>3 symbols for customer number in order in format ###</Desc></Arg><ArgsFormatRaw><![CDATA[ <Option[\'R\']> <;><CustomerNum[3]>  ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"Option\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"CustomerNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"3\" Format=\"000\"><Desc>3 symbols for customer number in order in format ###</Desc></Res><Res Name=\"PinNumber\" Value=\"\" Type=\"Text\" MaxLen=\"14\"><Desc>14 symbols for customer PIN number</Desc></Res><Res Name=\"CustomerCompanyName\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>(Company name) 30 symbols for customer name</Desc></Res><Res Name=\"HeadQuarters\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for headquarters</Desc></Res><Res Name=\"Address\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer\'s address</Desc></Res><Res Name=\"City\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer\'s city</Desc></Res><Res Name=\"ExemptionNum\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer\'s exemption number</Desc></Res><Res Name=\"CustTurnover\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for accumulated turnover of the customer</Desc></Res><Res Name=\"CustomerRefundTurnover\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for customer refund turnover</Desc></Res><ResFormatRaw><![CDATA[<Option[\'R\']><;><CustomerNum[3]> <;> <PinNumber[14]> <;> <CustomerCompanyName[30]> <;> <HeadQuarters[30] <;><Address[30]> <;> <City[30]> <;> <ExemptionNum[30]> <;> <CustTurnover[1..11]> <;> <CustomerRefundTurnover[1..11]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadTotalMessagesCount\" CmdByte=\"0x4E\"><FPOperation>Reads all messages from log</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"L\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'L\'><;><\'0\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"L\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Count\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for the messages count</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'L\'><;><\'0\'><;><Count[3]>]]></ResFormatRaw></Response></Command><Command Name=\"SetInvoice_ThresholdCount\" CmdByte=\"0x4E\"><FPOperation>Program device\'s invoice threshold count. To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Threshold\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for the device\'s invoice threshold count</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'S\'><;><\'I\'><;><Threshold[10]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetServer_UsedComModule\" CmdByte=\"0x4E\"><FPOperation>Program device used to talk with the server . To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"E\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionModule\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"GSM\" Value=\"0\" /><Option Name=\"LAN/WiFi\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - GSM  - \'1\' - LAN/WiFi</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'S\'><;><\'E\'><;><Module[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetTCP_Password\" CmdByte=\"0x4E\"><FPOperation>Program device\'s TCP password. To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"PassLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the password len</Desc></Arg><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the TCP password</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'Z\'><;><\'1\'><;><PassLength[1..3]><;><Password[100]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadCurrentReceiptInfo\" CmdByte=\"0x72\"><FPOperation>Read the current status of the receipt.</FPOperation><Response ACK=\"false\"><Res Name=\"OptionIsReceiptOpened\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"SalesNumber\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for number of sales</Desc></Res><Res Name=\"SubtotalAmountVATGA\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for subtotal by VAT group A</Desc></Res><Res Name=\"SubtotalAmountVATGB\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for subtotal by VAT group B</Desc></Res><Res Name=\"SubtotalAmountVATGC\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for subtotal by VAT group C</Desc></Res><Res Name=\"SubtotalAmountVATGD\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for subtotal by VAT group D</Desc></Res><Res Name=\"SubtotalAmountVATGE\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols for subtotal by VAT group E</Desc></Res><Res Name=\"OptionForbiddenVoid\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"allowed\" Value=\"0\" /><Option Name=\"forbidden\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - allowed  - \'1\' - forbidden</Desc></Res><Res Name=\"OptionVATinReceipt\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"OptionReceiptFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief\" Value=\"0\" /><Option Name=\"Detailed\" Value=\"1\" /></Options><Desc>(Format) 1 symbol with value:  - \'1\' - Detailed  - \'0\' - Brief</Desc></Res><Res Name=\"OptionInitiatedPayment\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"OptionFinalizedPayment\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"OptionClientReceipt\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"invoice (client) receipt\" Value=\"1\" /><Option Name=\"standard receipt\" Value=\"0\" /></Options><Desc>1 symbol with value:  - \'1\' - invoice (client) receipt  - \'0\' - standard receipt</Desc></Res><Res Name=\"OptionPowerDownInReceipt\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol with value: - \'0\' - No - \'1\' - Yes</Desc></Res><Res Name=\"ChangeAmount\" Value=\"\" Type=\"Decimal\" MaxLen=\"11\"><Desc>Up to 11 symbols the amount of the due change in the stated payment type</Desc></Res><ResFormatRaw><![CDATA[<IsReceiptOpened[1]> <;> <SalesNumber[3]> <;> <SubtotalAmountVATGA[1..11]> <;> <SubtotalAmountVATGB[1..11]> <;> <SubtotalAmountVATGC[1..11]> <;> <SubtotalAmountVATGD[1..11]> <;> <SubtotalAmountVATGE[1..11]> <;> <ForbiddenVoid[1]> <;><VATinReceipt[1]> <;> <ReceiptFormat[1]> <;> <InitiatedPayment[1]> <;> <FinalizedPayment[1]> <;> <ClientReceipt[1]> <;> <PowerDownInReceipt[1]> <;> <ChangeAmount[1..11]>]]></ResFormatRaw></Response></Command><Command Name=\"OpenInvoiceWithFDCustomerDB\" CmdByte=\"0x30\"><FPOperation>Opens a fiscal invoice receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.</FPOperation><Args><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbol from 1 to 20 corresponding to operator\'s number</Desc></Arg><Arg Name=\"OperPass\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><Arg Name=\"reserved\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionInvoicePrintType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Postponed Printing\" Value=\"3\" /><Option Name=\"Step by step printing\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'1\' - Step by step printing  - \'3\' - Postponed Printing</Desc></Arg><Arg Name=\"CustomerNum\" Value=\"\" Type=\"Text\" MaxLen=\"4\"><Desc>Symbol \'#\' and following up to 3 symbols for related customer ID number corresponding to the FD database</Desc></Arg><ArgsFormatRaw><![CDATA[ <OperNum[1..2]> <;> <OperPass[6]> <;> <reserved[\'0\']> <;> <InvoicePrintType[1]> <;> <CustomerNum[4]>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJ\" CmdByte=\"0x7C\"><FPOperation>Read whole Electronic Journal report from beginning to the end.</FPOperation><Args><Arg Name=\"\" Value=\"J0\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"\" Value=\"*\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'J0\'><;><\'*\'> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"Payment\" CmdByte=\"0x35\"><FPOperation>Register the payment in the receipt with specified type of payment with amount received.</FPOperation><Args><Arg Name=\"OptionPaymentType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Currency\" Value=\"5\" /><Option Name=\"Payment 0\" Value=\"0\" /><Option Name=\"Payment 1\" Value=\"1\" /><Option Name=\"Payment 2\" Value=\"2\" /><Option Name=\"Payment 3\" Value=\"3\" /><Option Name=\"Payment 4\" Value=\"4\" /></Options><Desc>1 symbol for payment type:  - \'0\' - Payment 0  - \'1\' - Payment 1  - \'2\' - Payment 2  - \'3\' - Payment 3  - \'4\' - Payment 4  - \'5\' - Currency</Desc></Arg><Arg Name=\"OptionChange\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"With Change\" Value=\"0\" /><Option Name=\"Without Change\" Value=\"1\" /></Options><Desc>Default value is 0, 1 symbol with value:  - \'0 - With Change  - \'1\' - Without Change</Desc></Arg><Arg Name=\"Amount\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 characters for received amount</Desc></Arg><Arg Name=\"OptionChangeType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Change In Cash\" Value=\"0\" /><Option Name=\"Change In Currency\" Value=\"2\" /><Option Name=\"Same As The payment\" Value=\"1\" /></Options><Desc>1 symbols with value:  - \'0\' - Change In Cash  - \'1\' - Same As The payment  - \'2\' - Change In Currency</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\";\" /></Arg><ArgsFormatRaw><![CDATA[ <PaymentType[1]> <;> <OptionChange[1]> <;> <Amount[1..10]> { <;> <OptionChangeType[1]> } ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadFMcontent\" CmdByte=\"0x75\"><FPOperation>Provides consequently information about every single block stored in the FM starting with Acknowledgements and ending with end message.</FPOperation><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"SetDeviceTCP_Addresses\" CmdByte=\"0x4E\"><FPOperation>Program device\'s network IP address, subnet mask, gateway address, DNS address. To apply use -SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionAddressType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"DNS address\" Value=\"5\" /><Option Name=\"Gateway address\" Value=\"4\" /><Option Name=\"IP address\" Value=\"2\" /><Option Name=\"Subnet Mask\" Value=\"3\" /></Options><Desc>1 symbol with value:  - \'2\' - IP address  - \'3\' - Subnet Mask  - \'4\' - Gateway address  - \'5\' - DNS address</Desc></Arg><Arg Name=\"DeviceAddress\" Value=\"\" Type=\"Text\" MaxLen=\"15\"><Desc>15 symbols for the selected address</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'T\'><;><AddressType[1]> <;><DeviceAddress[15]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadLastDailyRe";
         String defsPart2 = "portInfo\" CmdByte=\"0x73\"><FPOperation>Read the date and number of the last Z-report and the last RAM reset event.</FPOperation><Response ACK=\"false\"><Res Name=\"LastZDailyReportDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy\"><Desc>10 symbols for last Z-report date in DD-MM-YYYY format</Desc></Res><Res Name=\"LastZDailyReportNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>Up to 4 symbols for the number of the last daily report in format ####</Desc></Res><Res Name=\"LastRAMResetNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>Up to 4 symbols for the number of the last RAM reset in format ####</Desc></Res><ResFormatRaw><![CDATA[<LastZDailyReportDate \"DD-MM-YYYY\"> <;> <LastZDailyReportNum[1..4]> <;> <LastRAMResetNum[1..4]>]]></ResFormatRaw></Response></Command><Command Name=\"PrintOrStoreEJByZReportNum\" CmdByte=\"0x7C\"><FPOperation>Store Electronic Journal Report from report number to report number to External USB Flash memory, External SD card or Print.</FPOperation><Args><Arg Name=\"OptionReportStorage\" Value=\"\" Type=\"Option\" MaxLen=\"2\"><Options><Option Name=\"Printing\" Value=\"J1\" /><Option Name=\"Storage in External SD card memory\" Value=\"J4\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"J2\" /></Options><Desc>2 symbols for destination:  - \'J1\' - Printing   - \'J2\' - Storage in External USB Flash memory.  - \'J4\' - Storage in External SD card memory</Desc></Arg><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for initial number report in format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for final number report in format ####</Desc></Arg><ArgsFormatRaw><![CDATA[ <OptionReportStorage[2]><;><\'Z\'><;><StartNum[4]><;><EndNum[4]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJByDate_JSON\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report by initial to end date in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.</FPOperation><Args><Arg Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"StartRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'JY\'> <;> <\'D\'> <;> <StartRepFromDate \"DDMMYY\"><;>  <EndRepFromDate \"DDMMYY\"> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Length\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for length</Desc></Res><ResFormatRaw><![CDATA[<\'JY\'> <;> <\'Z\'> <;> <Length[1..10]>]]></ResFormatRaw></Response></Command><Command Name=\"PrintText\" CmdByte=\"0x37\"><FPOperation>Prints a free text.</FPOperation><Args><Arg Name=\"Text\" Value=\"\" Type=\"Text\" MaxLen=\"64\"><Desc>Free text - TextLength symbols</Desc></Arg><ArgsFormatRaw><![CDATA[ <Text[TextLength]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"OpenCreditNoteWithFDCustomerDB\" CmdByte=\"0x30\"><FPOperation>Opens a fiscal invoice credit note receipt assigned to the specified operator number and operator password with internal DB info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.</FPOperation><Args><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbol from 1 to 20 corresponding to operator\'s number</Desc></Arg><Arg Name=\"OperPass\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><Arg Name=\"reserved\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionInvoiceCreditNotePrintType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Postponed Printing\" Value=\"C\" /><Option Name=\"Step by step printing\" Value=\"A\" /></Options><Desc>1 symbol with value:  - \'A\' - Step by step printing  - \'C\' - Postponed Printing</Desc></Arg><Arg Name=\"CustomerNum\" Value=\"\" Type=\"Text\" MaxLen=\"4\"><Desc>Symbol \'#\' and following up to 3 symbols for related customer ID number corresponding to the FD database</Desc></Arg><Arg Name=\"RelatedInvoiceNum\" Value=\"\" Type=\"Text\" MaxLen=\"19\"><Desc>19 symbols for the related invoice number in format ###################</Desc></Arg><ArgsFormatRaw><![CDATA[ <OperNum[1..2]> <;> <OperPass[6]> <;> <reserved[\'0\']> <;> <InvoiceCreditNotePrintType[1]> <;> <CustomerNum[4]> <;> <RelatedInvoiceNum[19]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintBriefFMReportByZNum\" CmdByte=\"0x79\"><FPOperation>Print a brief FM report by initial and end FM report number.</FPOperation><Args><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the initial FM report number included in report, format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the final FM report number included in report, format ####</Desc></Arg><ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintBriefFMPaymentReportByDate\" CmdByte=\"0x7B\"><FPOperation>Print a brief payment FM report by initial and end date.</FPOperation><Args><Arg Name=\"StartDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><Arg Name=\"OptionPayment\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <StartDate \"DDMMYY\"> <;> <EndDate \"DDMMYY\"> <;> <OptionPayment[\'P\']> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintOperatorReport\" CmdByte=\"0x7D\"><FPOperation>Prints an operator\'s report for a specified operator (0 = all operators) with or without zeroing (\'Z\' or \'X\'). When a \'Z\' value is specified the report should include all operators.</FPOperation><Args><Arg Name=\"OptionZeroing\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Without zeroing\" Value=\"X\" /><Option Name=\"Zeroing\" Value=\"Z\" /></Options><Desc>1 character with following values:  - \'Z\' - Zeroing  - \'X\' - Without zeroing</Desc></Arg><Arg Name=\"Number\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 0 to 20 corresponding to operator\'s number, 0 = all operators</Desc></Arg><ArgsFormatRaw><![CDATA[ <OptionZeroing[1]> <;> <Number[1..2]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJByTraderSystemInvNum_JSON\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report by Trader System Invoice Number (Single Invoice) in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.</FPOperation><Args><Arg Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"OptionTraderSystemReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"s\" /><Option Name=\"Detailed EJ\" Value=\"S\" /></Options><Desc>1 character with value  - \'S\' - Detailed EJ  - \'s\' - Brief EJ</Desc></Arg><Arg Name=\"TraderSystemInvNum\" Value=\"\" Type=\"Text\" MaxLen=\"15\"><Desc>15 symbols for trader system invoice number</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'JY\'> <;> < TraderSystemReportFormat[1]> <;> <TraderSystemInvNum[15]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Length\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for length</Desc></Res><ResFormatRaw><![CDATA[<\'JY\'> <;> <\'Z\'> <;> <Length[1..10]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadStatus\" CmdByte=\"0x20\"><FPOperation>Provides detailed 6 bytes information about the current status of the fiscal printer.</FPOperation><Response ACK=\"false\"><Res Name=\"FM_Read_only\" Value=\"\" Type=\"Status\" Byte=\"0\" Bit=\"0\"><Desc>FM Read only</Desc></Res><Res Name=\"Power_down_in_opened_fiscal_receipt\" Value=\"\" Type=\"Status\" Byte=\"0\" Bit=\"1\"><Desc>Power down in opened fiscal receipt</Desc></Res><Res Name=\"Printer_not_ready_overheat\" Value=\"\" Type=\"Status\" Byte=\"0\" Bit=\"2\"><Desc>Printer not ready - overheat</Desc></Res><Res Name=\"DateTime_not_set\" Value=\"\" Type=\"Status\" Byte=\"0\" Bit=\"3\"><Desc>DateTime not set</Desc></Res><Res Name=\"DateTime_wrong\" Value=\"\" Type=\"Status\" Byte=\"0\" Bit=\"4\"><Desc>DateTime wrong</Desc></Res><Res Name=\"RAM_reset\" Value=\"\" Type=\"Status\" Byte=\"0\" Bit=\"5\"><Desc>RAM reset</Desc></Res><Res Name=\"Hardware_clock_error\" Value=\"\" Type=\"Status\" Byte=\"0\" Bit=\"6\"><Desc>Hardware clock error</Desc></Res><Res Name=\"Printer_not_ready_no_paper\" Value=\"\" Type=\"Status\" Byte=\"1\" Bit=\"0\"><Desc>Printer not ready - no paper</Desc></Res><Res Name=\"Reports_registers_Overflow\" Value=\"\" Type=\"Status\" Byte=\"1\" Bit=\"1\"><Desc>Reports registers Overflow</Desc></Res><Res Name=\"Blocking_after_24_hours\" Value=\"\" Type=\"Status\" Byte=\"1\" Bit=\"2\"><Desc>Blocking after 24 hours</Desc></Res><Res Name=\"Daily_report_is_not_zeroed\" Value=\"\" Type=\"Status\" Byte=\"1\" Bit=\"3\"><Desc>Daily report is not zeroed</Desc></Res><Res Name=\"Article_report_is_not_zeroed\" Value=\"\" Type=\"Status\" Byte=\"1\" Bit=\"4\"><Desc>Article report is not zeroed</Desc></Res><Res Name=\"Operator_report_is_not_zeroed\" Value=\"\" Type=\"Status\" Byte=\"1\" Bit=\"5\"><Desc>Operator report is not zeroed</Desc></Res><Res Name=\"Non_printed_copy\" Value=\"\" Type=\"Status\" Byte=\"1\" Bit=\"6\"><Desc>Non-printed copy</Desc></Res><Res Name=\"Opened_Non_fiscal_Receipt\" Value=\"\" Type=\"Status\" Byte=\"2\" Bit=\"0\"><Desc>Opened Non-fiscal Receipt</Desc></Res><Res Name=\"Opened_Fiscal_Receipt\" Value=\"\" Type=\"Status\" Byte=\"2\" Bit=\"1\"><Desc>Opened Fiscal Receipt</Desc></Res><Res Name=\"Receipt_Invoice_Type\" Value=\"\" Type=\"Status\" Byte=\"2\" Bit=\"2\"><Desc>Receipt Invoice Type</Desc></Res><Res Name=\"VAT_included_in_receipt\" Value=\"\" Type=\"Status\" Byte=\"2\" Bit=\"3\"><Desc>VAT included in receipt</Desc></Res><Res Name=\"Detailed_Receipt\" Value=\"\" Type=\"Status\" Byte=\"2\" Bit=\"4\"><Desc>Detailed Receipt</Desc></Res><Res Name=\"No_FM_module\" Value=\"\" Type=\"Status\" Byte=\"3\" Bit=\"0\"><Desc>No FM module</Desc></Res><Res Name=\"FM_error\" Value=\"\" Type=\"Status\" Byte=\"3\" Bit=\"1\"><Desc>FM error</Desc></Res><Res Name=\"FM_full\" Value=\"\" Type=\"Status\" Byte=\"3\" Bit=\"2\"><Desc>FM full</Desc></Res><Res Name=\"FM_near_full\" Value=\"\" Type=\"Status\" Byte=\"3\" Bit=\"3\"><Desc>FM near full</Desc></Res><Res Name=\"Decimal_point\" Value=\"\" Type=\"Status\" Byte=\"3\" Bit=\"4\"><Desc>Decimal point (1=fract, 0=whole)</Desc></Res><Res Name=\"FM_fiscalized\" Value=\"\" Type=\"Status\" Byte=\"3\" Bit=\"5\"><Desc>FM fiscalized</Desc></Res><Res Name=\"FM_produced\" Value=\"\" Type=\"Status\" Byte=\"3\" Bit=\"6\"><Desc>FM produced</Desc></Res><Res Name=\"Paired_with_TIMS\" Value=\"\" Type=\"Status\" Byte=\"4\" Bit=\"0\"><Desc>Paired with TIMS</Desc></Res><Res Name=\"External_display_transparent_display\" Value=\"\" Type=\"Status\" Byte=\"4\" Bit=\"1\"><Desc>External display: transparent display</Desc></Res><Res Name=\"Drawer_automatic_opening\" Value=\"\" Type=\"Status\" Byte=\"4\" Bit=\"4\"><Desc>Drawer: automatic opening</Desc></Res><Res Name=\"Owner_logo_included_in_the_receipt\" Value=\"\" Type=\"Status\" Byte=\"4\" Bit=\"5\"><Desc>Owner  logo included in the receipt</Desc></Res><Res Name=\"Customer_report_is_not_zeroed\" Value=\"\" Type=\"Status\" Byte=\"4\" Bit=\"6\"><Desc>Customer report is not zeroed</Desc></Res><Res Name=\"No_Sec_IC\" Value=\"\" Type=\"Status\" Byte=\"5\" Bit=\"0\"><Desc>No Sec.IC</Desc></Res><Res Name=\"No_certificates\" Value=\"\" Type=\"Status\" Byte=\"5\" Bit=\"1\"><Desc>No certificates</Desc></Res><Res Name=\"Service_jumper\" Value=\"\" Type=\"Status\" Byte=\"5\" Bit=\"2\"><Desc>Service jumper</Desc></Res><Res Name=\"Missing_SD_card\" Value=\"\" Type=\"Status\" Byte=\"5\" Bit=\"4\"><Desc>Missing SD card</Desc></Res><Res Name=\"Wrong_SD_card\" Value=\"\" Type=\"Status\" Byte=\"5\" Bit=\"5\"><Desc>Wrong SD card</Desc></Res><Res Name=\"Update_is_available\" Value=\"\" Type=\"Status\" Byte=\"5\" Bit=\"6\"><Desc>Update is available</Desc></Res><ResFormatRaw><![CDATA[<StatusBytes[6]>]]></ResFormatRaw></Response></Command><Command Name=\"OpenReceipt\" CmdByte=\"0x30\"><FPOperation>Opens a fiscal receipt assigned to the specified operator number and operator password, parameters for receipt format, print VAT and printing type.</FPOperation><Args><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Arg><Arg Name=\"OperPass\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><Arg Name=\"OptionReceiptFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief\" Value=\"0\" /><Option Name=\"Detailed\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'1\' - Detailed  - \'0\' - Brief</Desc></Arg><Arg Name=\"OptionFiscalReceiptPrintType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Postponed printing\" Value=\"2\" /><Option Name=\"Step by step printing\" Value=\"0\" /></Options><Desc>1 symbol with value: - \'0\' - Step by step printing - \'2\' - Postponed printing</Desc></Arg><ArgsFormatRaw><![CDATA[<OperNum[1..2]> <;> <OperPass[6]> <;> <ReceiptFormat[1]> <;> <FiscalReceiptPrintType [1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetDateTime\" CmdByte=\"0x48\"><FPOperation>Sets the date and time and prints out the current values.</FPOperation><Args><Arg Name=\"DateTime\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yy HH:mm\"><Desc>Date Time parameter in format: DD-MM-YY HH:MM</Desc></Arg><ArgsFormatRaw><![CDATA[ <DateTime \"DD-MM-YY HH:MM\"> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ProgDecimalPointPosition\" CmdByte=\"0x43\"><FPOperation>Stores a block containing the number format into the fiscal memory. Print the current status on the printer.</FPOperation><Args><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6-symbol string</Desc></Arg><Arg Name=\"OptionDecimalPointPosition\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Fractions\" Value=\"2\" /><Option Name=\"Whole numbers\" Value=\"0\" /></Options><Desc>1 symbol with values:  - \'0\'- Whole numbers  - \'2\' - Fractions</Desc></Arg><ArgsFormatRaw><![CDATA[ <Password [6]> <;> <DecimalPointPosition[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SellPLUfromExtDB\" CmdByte=\"0x31\"><FPOperation>Register the sell (for correction use minus sign in the price field) of article with specified name, price, quantity, VAT class and/or discount/addition on the transaction.</FPOperation><Args><Arg Name=\"NamePLU\" Value=\"\" Type=\"Text\" MaxLen=\"36\"><Desc>36 symbols for article\'s name</Desc></Arg><Arg Name=\"OptionVATClass\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"VAT Class A\" Value=\"A\" /></Options><Desc>1 symbol for article\'s VAT class with optional values:\"  - \'A\' - VAT Class A</Desc></Arg><Arg Name=\"Price\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>1 to 13 symbols for article\'s price with upto 5 digits after decimal point</Desc></Arg><Arg Name=\"MeasureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for measure unit</Desc></Arg><Arg Name=\"HSCode\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for HS Code in format XXXX.XX.XX</Desc></Arg><Arg Name=\"HSName\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols for HS Name</Desc></Arg><Arg Name=\"Quantity\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>1 to 10 symbols for quantity</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\"*\" /></Arg><Arg Name=\"DiscAddP\" Value=\"\" Type=\"Decimal\" MaxLen=\"7\"><Desc>1 to 7 for percentage of discount/addition</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\",\" /></Arg><Arg Name=\"DiscAddV\" Value=\"\" Type=\"Decimal\" MaxLen=\"8\"><Desc>Up to 8 symbols for value of discount/addition. Use minus sign \'-\' for discount</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\":\" /></Arg><ArgsFormatRaw><![CDATA[ <NamePLU[36]> <;> <OptionVATClass[1]> <;> <Price[1..13]> <;> <MeasureUnit[3]> <;><HSCode[10]> <;> <HSName[20]> {<\'*\'> <Quantity[1..10]>} {<\',\'> <DiscAddP[1..7]>} {<\':\'> <DiscAddV[1..8]>} ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadOperatorNamePassword\" CmdByte=\"0x6A\"><FPOperation>Provides information about an operator\'s name and password.</FPOperation><Args><Arg Name=\"Number\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbol from 1 to 9 corresponding to the number of operators</Desc></Arg><ArgsFormatRaw><![CDATA[ <Number[1..2]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"Number\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbol from 1 to 20 corresponding to the number of operator</Desc></Res><Res Name=\"Name\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols for operator\'s name</Desc></Res><Res Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Res><ResFormatRaw><![CDATA[<Number[1..2]> <;> <Name[20]> <;> <Password[6]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadDailyCountersByOperator\" CmdByte=\"0x6F\"><FPOperation>Read the last operator\'s report number and date and time.</FPOperation><Args><Arg Name=\"\" Value=\"5\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'5\'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"5\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Res><Res Name=\"WorkOperatorsCounter\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of the work operators</Desc></Res><Res Name=\"LastOperatorReportDateTime\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>16 symbols for date and time of the last operator\'s report in format DD-MM-YYYY HH:MM</Desc></Res><ResFormatRaw><![CDATA[<\'5\'> <;> <OperNum[1..2]> <;> <WorkOperatorsCounter[1..5]> <;> <LastOperatorReportDateTime \"DD-MM-YYYY HH:MM\">]]></ResFormatRaw></Response></Command><Command Name=\"ReadPayments\" CmdByte=\"0x64\"><FPOperation>Provides information about all programmed types of payment.</FPOperation><Response ACK=\"false\"><Res Name=\"NamePayment0\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>(Payment 0) 10 symbols for type 0 of payment name</Desc></Res><Res Name=\"NamePayment1\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>(Payment 1) 10 symbols for type 1 of payment name</Desc></Res><Res Name=\"NamePayment2\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>(Payment 2) 10 symbols for type 2 of payment name</Desc></Res><Res Name=\"NamePayment3\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>(Payment 3) 10 symbols for type 3 of payment name</Desc></Res><Res Name=\"NamePayment4\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>(Payment 4) 10 symbols for type 4 of payment name</Desc></Res><Res Name=\"CurrencyName\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>(Currency name) 10 symbols for type 5 of currency payment name</Desc></Res><Res Name=\"ExchangeRate\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"10\" Format=\"0000.00000\"><Desc>10 symbols for exchange rate of payment type 5 in format: ####.#####</Desc></Res><ResFormatRaw><![CDATA[<NamePayment0[10]> <;> <NamePayment1[10]> <;> <NamePayment2[10]> <;> <NamePayment3[10]> <;> <NamePayment4[10]> <;> <CurrencyName[10]> <;> <ExchangeRate[1..10]>]]></ResFormatRaw></Response></Command><Command Name=\"ProgPayment\" CmdByte=\"0x44\"><FPOperation>Programs the name of the type of payment.</FPOperation><Args><Arg Name=\"OptionPaymentNum\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Currency\" Value=\"5\" /><Option Name=\"Payment 1\" Value=\"1\" /><Option Name=\"Payment 2\" Value=\"2\" /><Option Name=\"Payment 3\" Value=\"3\" /><Option Name=\"Payment 4\" Value=\"4\" /></Options><Desc>1 symbol for payment type:  - \'1\' - Payment 1  - \'2\' - Payment 2  - \'3\' - Payment 3  - \'4\' - Payment 4  - \'5\' - Currency</Desc></Arg><Arg Name=\"Name\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for payment type name</Desc></Arg><Arg Name=\"Rate\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"10\" Format=\"0000.00000\"><Desc>10 symbols for exchange rate in format: ####.#####  of the 5th payment type, maximal value 0420.00000</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\";\" /></Arg><ArgsFormatRaw><![CDATA[ <PaymentNum[1]><;> <Name[10]> {<;> <Rate[1..10]>} ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintOrStoreInvoiceCopy\" CmdByte=\"0x7C\"><FPOperation>Print/Store Invoice receipt copy to External USB Flash memory, External SD card or Print.</FPOperation><Args><Arg Name=\"OptionReportStorage\" Value=\"\" Type=\"Option\" MaxLen=\"2\"><Options><Option Name=\"Printing\" Value=\"J1\" /><Option Name=\"Storage in External SD card memory\" Value=\"J4\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"J2\" /></Options><Desc>2 symbols for destination:  - \'J1\' - Printing   - \'J2\' - Storage in External USB Flash memory.  - \'J4\' - Storage in External SD card memory</Desc></Arg><Arg Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"CUInvoiceNum\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for Invoice receipt Number.</Desc></Arg><ArgsFormatRaw><![CDATA[ <OptionReportStorage[2]><;><\'I\'><;> <CUInvoiceNum[10]>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintOrStoreEJByTraderSystemInvNum\" CmdByte=\"0x7C\"><FPOperation>Store Electronic Journal Report by Trader System Invoice Number (Single Invoice) to External SD card.</FPOperation><Args><Arg Name=\"OptionReportStorage\" Value=\"\" Type=\"Option\" MaxLen=\"2\"><Options><Option Name=\"Printing\" Value=\"J1\" /><Option Name=\"Storage in External SD card memory\" Value=\"J4\" /><Option Name=\"Storage in External SD card memory for JSON\" Value=\"JX\" /><Option Name=\"Storage in External USB Flash memory for JSON\" Value=\"Jx\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"J2\" /></Options><Desc>2 symbols for destination:  - \'J1\' - Printing   - \'J2\' - Storage in External USB Flash memory.  - \'J4\' - Storage in External SD card memory  - \'JX\' - Storage in External SD card memory for JSON - \'Jx\' - Storage in External USB Flash memory for JSON</Desc></Arg><Arg Name=\"OptionTraderSystemReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"s\" /><Option Name=\"Detailed EJ\" Value=\"S\" /></Options><Desc>1 character with value  - \'S\' - Detailed EJ  - \'s\' - Brief EJ</Desc></Arg><Arg Name=\"TraderSystemInvNum\" Value=\"\" Type=\"Text\" MaxLen=\"15\"><Desc>15 symbols for trader system invoice number</Desc></Arg><ArgsFormatRaw><![CDATA[<OptionReportStorage[2]> <;> <TraderSystemReportFormat[1]> <;> <TraderSystemInvNum[15]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintDiagnostics\" CmdByte=\"0x22\"><FPOperation>Prints out a diagnostic receipt.</FPOperation></Command><Command Name=\"ReadPLUprice_MU\" CmdByte=\"0x6B\"><FPOperation>Provides information about the price, price type and measure unit of the specified article.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"4\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option[\'4\']> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format #####</Desc></Res><Res Name=\"Option\" Value=\"4\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Price\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for article price</Desc></Res><Res Name=\"OptionPrice\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Free price is disable valid only programmed price\" Value=\"0\" /><Option Name=\"Free price is enable\" Value=\"1\" /><Option Name=\"Limited price\" Value=\"2\" /></Options><Desc>1 symbol for Price flag with next value:  - \'0\'- Free price is disable valid only programmed price  - \'1\'- Free price is enable  - \'2\'- Limited price</Desc></Res><Res Name=\"MeasureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for measure unit</Desc></Res><ResFormatRaw><![CDATA[<PLUNum[5]> <;> <Option[\'4\']> <;> <Price[1..10]> <;> <OptionPrice[1]> <;> <MeasureUnit[3]>]]></ResFormatRaw></Response></Command><Command Name=\"OpenInvoiceWithFreeCustomerData\" CmdByte=\"0x30\"><FPOperation>Opens a fiscal invoice receipt assigned to the specified operator number and operator password with free info for customer data. The Invoice receipt can be issued only if the invoice range (start and end numbers) is set.</FPOperation><Args><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbol from 1 to 20 corresponding to operator\'s number</Desc></Arg><Arg Name=\"OperPass\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><Arg Name=\"reserved\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionInvoicePrintType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Postponed Printing\" Value=\"3\" /><Option Name=\"Step by step printing\" Value=\"1\" /></Options><Desc>1 symbol with value: - \'1\' - Step by step printing - \'3\' - Postponed Printing</Desc></Arg><Arg Name=\"CompanyName\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for Invoice company name</Desc></Arg><Arg Name=\"ClientPINnum\" Value=\"\" Type=\"Text\" MaxLen=\"11\"><Desc>11 symbols for client PIN number</Desc></Arg><Arg Name=\"HeadQuarters\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for customer headquarters</Desc></Arg><Arg Name=\"Address\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for Address</Desc></Arg><Arg Name=\"PostalCodeAndCity\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for postal code and city</Desc></Arg><Arg Name=\"ExemptionNum\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>30 symbols for exemption number</Desc></Arg><ArgsFormatRaw><![CDATA[ <OperNum[1..2]> <;> <OperPass[6]> <;> <reserved[\'0\']> <;> <InvoicePrintType[1]> <;> <CompanyName[30]> <;> <ClientPINnum[11]> <;> <HeadQuarters[30]> <;> <Address[30]> <;> <PostalCodeAndCity[30]> <;> <ExemptionNum[30]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ProgFooter\" CmdByte=\"0x49\"><FPOperation>Program the content of footer line.</FPOperation><Args><Arg Name=\"\" Value=\"F\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"FooterText\" Value=\"\" Type=\"Text\" MaxLen=\"64\"><Desc>TextLength symbols for footer line</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'F\'><;><\'1\'><;> <FooterText[TextLength]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintLastReceiptDuplicate\" CmdByte=\"0x3A\"><FPOperation>Print a copy of the last receipt document issued</FPOperation></Command><Command Name=\"SetGPRS_Password\" CmdByte=\"0x4E\"><FPOperation>Program device\'s GPRS password. To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"PassLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the GPRS password len</Desc></Arg><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the device\'s GPRS password</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'G\'><;><\'P\'><;><PassLength[1..3]><;><Password[100]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SoftwareReset\" CmdByte=\"0x3F\"><FPOperation>Restore default parameters of the device.</FPOperation><Args><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6-symbols string</Desc></Arg><ArgsFormatRaw><![CDATA[ <Password[6]>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetGPRS_AuthType\" CmdByte=\"0x4E\"><FPOperation>Program device\'s GPRS user name. To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionAuthType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"CHAP\" Value=\"2\" /><Option Name=\"None\" Value=\"0\" /><Option Name=\"PAP\" Value=\"1\" /><Option Name=\"PAP or CHAP\" Value=\"3\" /></Options><Desc>1 symbol with value:  - \'0\' - None  - \'1\' - PAP  - \'2\' - CHAP  - \'3\' - PAP or CHAP</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'G\'><;><\'N\'><;><AuthType[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadTCP_Password\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s TCP password.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'Z\'><;><\'1\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"PassLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>(Length) Up to 3 symbols for the password length</Desc></Res><Res Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the TCP password</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'Z\'><;><\'1\'><;><PassLength[1..3]><;><Password[100]>]]></ResFormatRaw></Response></Command><Command Name=\"ProgVATrates\" CmdByte=\"0x42\"><FPOperation>Stores a block containing the values of the VAT rates into the fiscal memory. Print the values on the printer.</FPOperation><Args><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6-symbols string</Desc></Arg><Arg Name=\"VATrateA\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"00.00\"><Desc>Value of VAT rate A from 2 to 6 symbols with format ##.##</Desc></Arg><Arg Name=\"VATrateB\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"00.00\"><Desc>Value of VAT rate B from 2 to 6 symbols with format ##.##</Desc></Arg><Arg Name=\"VATrateC\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"00.00\"><Desc>Value of VAT rate C from 2 to 6 symbols with format ##.##</Desc></Arg><Arg Name=\"VATrateD\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"00.00\"><Desc>Value of VAT rate D from 2 to 6 symbols with format ##.##</Desc></Arg><Arg Name=\"VATrateE\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"00.00\"><Desc>Value of VAT rate E from 2 to 6 symbols with format ##.##</Desc></Arg><ArgsFormatRaw><![CDATA[ <Password[6]> <;> <VATrateA[1..6]> <;> <VATrateB[1..6]> <;> <VATrateC[1..6]> <;> <VATrateD[1..6]> <;> <VATrateE[1..6]>   ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadPLU_HScodeAndHSname\" CmdByte=\"0x6B\"><FPOperation>Provides information about the category of the specified article.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"5\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option[\'5\']> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format #####</Desc></Res><Res Name=\"Option\" Value=\"5\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionVATClass\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"VAT Class A\" Value=\"A\" /><Option Name=\"VAT Class B\" Value=\"B\" /><Option Name=\"VAT Class C\" Value=\"C\" /><Option Name=\"VAT Class D\" Value=\"D\" /><Option Name=\"VAT Class E\" Value=\"E\" /></Options><Desc>1 symbol for article\'s VAT class with optional values:\"  - \'A\' - VAT Class A  - \'B\' - VAT Class B  - \'C\' - VAT Class C  - \'D\' - VAT Class D  - \'E\' - VAT Class E</Desc></Res><Res Name=\"HSCode\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>(HS Code) 10 symbols for HS Code in format XXXX.XX.XX</Desc></Res><Res Name=\"HSName\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>(HS Name) 20 symbols for HS Name</Desc></Res><Res Name=\"MeasureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for measure unit</Desc></Res><ResFormatRaw><![CDATA[<PLUNum[5]><;><Option[\'5\']> <;> <OptionVATClass[1]> <;> <HSCode[10]> <;> <HSName[20]> <;> <MeasureUnit[3]>]]></ResFormatRaw></Response></Command><Command Name=\"SetDeviceNTP_Address\" CmdByte=\"0x4E\"><FPOperation>Program device\'s NTP address . To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"AddressLen\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the address length</Desc></Arg><Arg Name=\"NTPAddress\" Value=\"\" Type=\"Text\" MaxLen=\"50\"><Desc>50 symbols for the device\'s NTP address</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'S\'><;><\'N\'> <;><AddressLen[1..3]><;><NTPAddress[50]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetBluetooth_Status\" CmdByte=\"0x4E\"><FPOperation>Program device\'s Bluetooth module to be enabled or disabled.</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"B\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionBTstatus\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Disabled\" Value=\"0\" /><Option Name=\"Enabled\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - Disabled  - \'1\' - Enabled</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'> <;> <\'B\'> <;> <\'S\'> <;> <BTstatus[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJByDate\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report initial date to report end date.</FPOperation><Args><Arg Name=\"\" Value=\"J0\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"StartRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndRepFromDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'J0\'><;><\'D\'><;><StartRepFromDate \"DDMMYY\"><;>  <EndRepFromDate \"DDMMYY\"> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"ReadPLUbarcode\" CmdByte=\"0x6B\"><FPOperation>Provides information about the barcode of the specified article.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"3\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option[\'3\']> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number with leading zeroes in format #####</Desc></Res><Res Name=\"Option\" Value=\"3\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Barcode\" Value=\"\" Type=\"Text\" MaxLen=\"13\"><Desc>13 symbols for article barcode</Desc></Res><ResFormatRaw><![CDATA[<PLUNum[5]><;><Option[\'3\']><;><Barcode[13]>]]></ResFormatRaw></Response></Command><Command Name=\"ProgDepartment\" CmdByte=\"0x47\"><FPOperation>Set name for the stated department number from the internal FD database.</FPOperation><Args><Arg Name=\"Number\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"2\" Format=\"00\"><Desc>2 symbols department number in format: ##</Desc></Arg><Arg Name=\"Name\" Value=\"\" Type=\"Text\" MaxLen=\"23\"><Desc>23 characters department name</Desc></Arg><ArgsFormatRaw><![CDATA[ <Number[2]> <;><Name[23]>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetIdle_Timeout\" CmdByte=\"0x4E\"><FPOperation>Sets device\'s idle timeout setting. Set timeout for closing the connection if there is an inactivity. Maximal value - 7200, minimal value 1. 0 is for never close the connection. This option can be used only if the device has LAN or WiFi. To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"I\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"IdleTimeout\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for Idle timeout in format ####</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'Z\'><;><\'I\'><;><IdleTimeout[4]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadTCP_AutoStartStatus\" CmdByte=\"0x4E\"><FPOperation>Read device TCP Auto Start status</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'Z\'><;><\'2\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionTCPAutoStart\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol for TCP auto start status - \'0\' - No  - \'1\' - Yes</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'Z\'><;><\'2\'><;><TCPAutoStart[1]>]]></ResFormatRaw></Response></Command><Command Name=\"PrintLogo\" CmdByte=\"0x6C\"><FPOperation>Prints the programmed graphical logo with the stated number.</FPOperation><Args><Arg Name=\"Number\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Number of logo to be printed. If missing prints logo with number 0</Desc></Arg><ArgsFormatRaw><![CDATA[ <Number[1..2]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDailyGeneralRegistersByOperator\" CmdByte=\"0x6F\"><FPOperation>Read the total number of customers, discounts, additions, corrections and accumulated amounts by specified operator.</FPOperation><Args><Arg Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'1\'> <;> <OperNum[1..2]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Res><Res Name=\"CustomersNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of customers</Desc></Res><Res Name=\"DiscountsNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of discounts</Desc></Res><Res Name=\"DiscountsAmount\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for accumulated amount of discounts</Desc></Res><Res Name=\"AdditionsNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number ofadditions</Desc></Res><Res Name=\"AdditionsAmount\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for accumulated amount of additions</Desc></Res><Res Name=\"CorrectionsNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of corrections</Desc></Res><Res Name=\"CorrectionsAmount\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for accumulated amount of corrections</Desc></Res><ResFormatRaw><![CDATA[<\'1\'> <;> <OperNum[1..2]> <;> <CustomersNum[1..5]> <;> <DiscountsNum[1..5]> <;> <DiscountsAmount[1..13]> <;> <AdditionsNum[1..5]> <;> <AdditionsAmount[1..13]> <;> <CorrectionsNum[1..5]> <;> <CorrectionsAmount[1..13]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadGPRS_Password\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s GPRS password.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'G\'><;><\'P\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"PassLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>(Length) Up to 3 symbols for the GPRS password length</Desc></Res><Res Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the device\'s GPRS password</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'G\'><;><\'P\'><;><PassLength[1..3]><;><Password[100]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadServer_UsedComModule\" CmdByte=\"0x4E\"><FPOperation>Read device communication usage with server</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"E\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'S\'><;><\'E\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"E\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionModule\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"GSM\" Value=\"0\" /><Option Name=\"LAN/WiFi\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'0\' - GSM  - \'1\' - LAN/WiFi</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'S\'><;><\'E\'><;><Module [1]>]]></ResFormatRaw></Response></Command><Command Name=\"PrintCustomerReport\" CmdByte=\"0x52\"><FPOperation>Print Customer X or Z report</FPOperation><Args><Arg Name=\"OptionZeroing\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Without zeroing\" Value=\"X\" /><Option Name=\"Zeroing\" Value=\"Z\" /></Options><Desc>with following values:  - \'Z\' -Zeroing  - \'X\' - Without zeroing</Desc></Arg><ArgsFormatRaw><![CDATA[ <OptionZeroing[1]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadSpecificMessage\" CmdByte=\"0x4E\"><FPOperation>Reads specific message number</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"L\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"MessageNum\" Value=\"\" Type=\"Text\" MaxLen=\"2\"><Desc>2 symbols for total number of messages</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'L\'><;><MessageNum[2]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"L\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"MessageNum\" Value=\"\" Type=\"Text\" MaxLen=\"2\"><Desc>2 symbols for total number of messages</Desc></Res><Res Name=\"DateTime\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"dd-MM-yyyy HH:mm\"><Desc>Date Time parameter</Desc></Res><Res Name=\"Type\" Value=\"\" Type=\"Text\" MaxLen=\"1\"><Desc>1 symbol for type</Desc></Res><Res Name=\"Code\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for code</Desc></Res><Res Name=\"MessageText\" Value=\"\" Type=\"Text\" MaxLen=\"128\"><Desc>Up to 128 symbols for message text</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'L\'><;><MessageNum[2]><;> <DateTime \"DD-MM-YYYY HH:MM\"> <;><Type[1]><;><Code[3]> <;><MessageText[128]>]]></ResFormatRaw></Response></Command><Command Name=\"PrintDailyReport\" CmdByte=\"0x7C\"><FPOperation>Depending on the parameter prints:  − daily fiscal report with zeroing and fiscal memory record, preceded by Electronic Journal report print (\'Z\'); − daily fiscal report without zeroing (\'X\');</FPOperation><Args><Arg Name=\"OptionZeroing\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Without zeroing\" Value=\"X\" /><Option Name=\"Zeroing\" Value=\"Z\" /></Options><Desc>1 character with following values:  - \'Z\' - Zeroing  - \'X\' - Without zeroing</Desc></Arg><ArgsFormatRaw><![CDATA[ <OptionZeroing[1]>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetTcpPortNumber\" CmdByte=\"0x4E\"><FPOperation>Program TCP port of the device.</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"TcpPortNumber\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for TCP port number in format #####</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'Z\'><;><\'P\'><;><TcpPortNumber[5]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadFooter\" CmdByte=\"0x69\"><FPOperation>Provides the content of the footer line.</FPOperation><Args><Arg Name=\"\" Value=\"F\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"FooterNum\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[<\'F\'><;><FooterNum[\'1\']> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"F\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"FooterNum\" Value=\"\" Type=\"Text\" MaxLen=\"1\"><Desc>1 symbol for the footer line number</Desc></Res><Res Name=\"FooterText\" Value=\"\" Type=\"Text\" MaxLen=\"64\"><Desc>TextLength symbols for footer line</Desc></Res><ResFormatRaw><![CDATA[<\'F\'><;><FooterNum[1]><;><FooterText[TextLength]>]]></ResFormatRaw></Response></Command><Command Name=\"SetHTTPS_Address\" CmdByte=\"0x4E\"><FPOperation>Program device\'s HTTPS server address. To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"H\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"AddrLen\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the address length</Desc></Arg><Arg Name=\"Address\" Value=\"\" Type=\"Text\" MaxLen=\"50\"><Desc>Up to 50 symbols for the device\'s HTTPS address</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'S\'><;><\'H\'><;><AddrLen[1..3]><;><Address[50]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"OpenNonFiscalReceipt\" CmdByte=\"0x2E\"><FPOperation>Opens a non-fiscal receipt assigned to the specified operator and print type depends on NonFiscalPrintType parameter.</FPOperation><Args><Arg Name=\"OperNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"2\"><Desc>Symbols from 1 to 20 corresponding to operator\'s number</Desc></Arg><Arg Name=\"OperPass\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for operator\'s password</Desc></Arg><Arg Name=\"OptionNonFiscalPrintType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Postponed printing\" Value=\"1\" /><Option Name=\"Step by step printing\" Value=\"0\" /></Options><Desc>1 symbol with value:  - \'0\' - Step by step printing  - \'1\' - Postponed printing</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\";\" /></Arg><ArgsFormatRaw><![CDATA[ <OperNum[1..2]> <;> <OperPass[6]> { <;> <NonFiscalPrintType[1]> } ]]></ArgsFormatRaw></Args></Command><Command Name=\"Subtotal\" CmdByte=\"0x33\"><FPOperation>Calculate the subtotal amount with printing and display visualization options. Provide information about values of the calculated amounts. If a percent or value discount/addition has been specified the subtotal and the discount/addition value will be printed regardless the parameter for printing.</FPOperation><Args><Arg Name=\"OptionPrinting\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'1\' - Yes  - \'0\' - No</Desc></Arg><Arg Name=\"OptionDisplay\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol with value:  - \'1\' - Yes  - \'0\' - No</Desc></Arg><Arg Name=\"DiscAddV\" Value=\"\" Type=\"Decimal\" MaxLen=\"8\"><Desc>Up to 8 symbols for the value of the discount/addition. Use minus sign \'-\' for discount</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\":\" /></Arg><Arg Name=\"DiscAddP\" Value=\"\" Type=\"Decimal\" MaxLen=\"7\"><Desc>Up to 7 symbols for the percentage value of the discount/addition. Use minus sign \'-\' for discount</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\",\" /></Arg><ArgsFormatRaw><![CDATA[ <OptionPrinting[1]> <;> <OptionDisplay[1]> {<\':\'> <DiscAddV[1..8]>} {<\',\'> <DiscAddP[1..7]>} ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"SubtotalValue\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for the value of the subtotal amount</Desc></Res><ResFormatRaw><![CDATA[<SubtotalValue[1..10]>]]></ResFormatRaw></Response></Command><Command Name=\"EraseHScodes\" CmdByte=\"0x4F\"><FPOperation>Erase HS codes.</FPOperation><Args><Arg Name=\"Option\" Value=\"z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionR\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Password\" Value=\"\" Type=\"Text\" MaxLen=\"6\"><Desc>6 symbols for password</Desc></Arg><ArgsFormatRaw><![CDATA[ <Option[\'z\']><;><OptionR[\'D\']><;><Password[6]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"PrintDetailedFMPaymentsReportByDate\" CmdByte=\"0x7A\"><FPOperation>Print a detailed payment FM report by initial and end date.</FPOperation><Args><Arg Name=\"StartDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><Arg Name=\"OptionPayment\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <StartDate \"DDMMYY\"> <;> <EndDate \"DDMMYY\"> <;> <OptionPayment[\'P\']> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ProgramProxyServerAddress\" CmdByte=\"0x4E\"><FPOperation>Program the proxy server address.</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"ParamLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for parameter length</Desc></Arg><Arg Name=\"Address\" Value=\"\" Type=\"Text\" MaxLen=\"21\"><Desc>21 symbols for address</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'S\'><;><\'P\'><;> <ParamLength[1..3]> <;> <Address[21]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEJByCUInvoiceNum_JSON\" CmdByte=\"0x7C\"><FPOperation>Read Electronic Journal Report by CU Invoice Number (Multiple invoices) in the JSON format. The number of bytes equal to Length for JSON data must be read subsequently.</FPOperation><Args><Arg Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"2\" /><Arg Name=\"OptionInvoiceReportFormat\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Brief EJ\" Value=\"n\" /><Option Name=\"Detailed EJ\" Value=\"M\" /></Options><Desc>1 character with value  - \'M\' - Detailed EJ  - \'n\' - Brief EJ</Desc></Arg><Arg Name=\"StartCUInvoiceNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"10\" Format=\"0000000000.\"><Desc>10 symbols for start CU invoice number in format: ##########.</Desc></Arg><Arg Name=\"EndCUInvoiceNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"10\" Format=\"0000000000.\"><Desc>10 symbols for end CU invoice number in format: ##########.</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'JY\'> <;> < InvoiceReportFormat[1]> <;> <StartCUInvoiceNum[10]> <;> <EndCUInvoiceNum[10]> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"JY\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"Length\" Value=\"\" Type=\"Decimal\" MaxLen=\"10\"><Desc>Up to 10 symbols for length</Desc></Res><ResFormatRaw><![CDATA[<\'JY\'> <;> <\'Z\'> <;> <Length[1..10]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadDailyRA\" CmdByte=\"0x6E\"><FPOperation>Provides information about the RA amounts by type of payment and the total number of operations.</FPOperation><Args><Arg Name=\"\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'2\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"2\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"AmountPayment0\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 0</Desc></Res><Res Name=\"AmountPayment1\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 1</Desc></Res><Res Name=\"AmountPayment2\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 2</Desc></Res><Res Name=\"AmountPayment3\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 3</Desc></Res><Res Name=\"AmountPayment4\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 4</Desc></Res><Res Name=\"AmountCurrency\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 5</Desc></Res><Res Name=\"NumRA\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for the total number of operations</Desc></Res><ResFormatRaw><![CDATA[<\'2\'> <;> <AmountPayment0[1..13]> <;> <AmountPayment1[1..13]> <;> <AmountPayment2[1..13]> <;> <AmountPayment3[1..13]> <;> <AmountPayment4[1..13]> <;> <AmountCurrency[1..13]> <;> <NumRA[1..5]> <;>]]></ResFormatRaw></Response></Command><Command Name=\"ReadGeneralDailyRegisters\" CmdByte=\"0x6E\"><FPOperation>Provides information about the number of customers (number of fiscal receipt issued), number of discounts, additions and corrections made and the accumulated amounts.</FPOperation><Args><Arg Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'1\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"CustomersNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of customers</Desc></Res><Res Name=\"DiscountsNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of discounts</Desc></Res><Res Name=\"DiscountsAmount\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for accumulated amount of discounts</Desc></Res><Res Name=\"AdditionsNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of additions</Desc></Res><Res Name=\"AdditionsAmount\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for accumulated amount of additions</Desc></Res><Res Name=\"CorrectionsNum\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for number of corrections</Desc></Res><Res Name=\"CorrectionsAmount\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for accumulated amount of corrections</Desc></Res><ResFormatRaw><![CDATA[<\'1\'> <;> <CustomersNum[1..5]> <;> <DiscountsNum[1..5]> <;> <DiscountsAmount[1..13]> <;> <AdditionsNum[1..5]> <;> <AdditionsAmount[1..13]> <;> <CorrectionsNum[1..5]> <;> <CorrectionsAmount[1..13]>]]></ResFormatRaw></Response></Command><Command Name=\"SetActiveLogo\" CmdByte=\"0x23\"><FPOperation>Stores in the memory the graphic file under stated number. Prints information about loaded in the printer graphic files.</FPOperation><Args><Arg Name=\"LogoNumber\" Value=\"\" Type=\"Text\" MaxLen=\"1\"><Desc>1 character value from \'0\' to \'9\' or \'?\'. The number sets the active logo number, and the \'?\' invokes only printing of information</Desc></Arg><ArgsFormatRaw><![CDATA[ <LogoNumber[1]>  ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDisplayGreetingMessage\" CmdByte=\"0x69\"><FPOperation>Provides the content of the Display Greeting message.</FPOperation><Args><Arg Name=\"\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'0\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"DisplayGreetingText\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>32 symbols for display greeting message</Desc></Res><ResFormatRaw><![CDATA[<\'0\'> <;> <DisplayGreetingText[20]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadBluetooth_Status\" CmdByte=\"0x4E\"><FPOperation>Providing information about if the device\'s Bluetooth module is enabled or disabled.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"B\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'> <;> <\'B\'> <;> <\'S\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"B\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionBTstatus\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Disabled\" Value=\"0\" /><Option Name=\"Enabled\" Value=\"1\" /></Options><Desc>(Status) 1 symbol with value:  - \'0\' - Disabled  - \'1\' - Enabled</Desc></Res><ResFormatRaw><![CDATA[<\'R\'> <;> <\'B\'> <;> <\'S\'> <;> <BTstatus[1]>]]></ResFormatRaw></Response></Command><Command Name=\"SetGPRS_Username\" CmdByte=\"0x4E\"><FPOperation>Program device\'s GPRS user name. To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"U\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"GPRS_Username_Len\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>Up to 3 symbols for the username len</Desc></Arg><Arg Name=\"Username\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>Up to 100 symbols for the device\'s GPRS username</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'G\'><;><\'U\'><;><GPRS_Username_Len[1..3]><;><Username[100]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadEODAmounts\" CmdByte=\"0x6D\"><FPOperation>Provides information about the accumulated EOD turnover and VAT</FPOperation><Args><Arg Name=\"Option\" Value=\"d\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <Option[\'d\']> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"Option\" Value=\"d\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"EOD_sale_turnover\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the EOD sale turnover</Desc></Res><Res Name=\"EOD_credit_turnover\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the EOD credit turnover</Desc></Res><Res Name=\"EOD_saleVAT\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the EOD VAT from sales</Desc></Res><Res Name=\"EOD_creditVAT\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the EOD VAT from credit invoices</Desc></Res><ResFormatRaw><![CDATA[<Option[\'d\']> <;> <EOD_sale_turnover[1..13]> <;> <EOD_credit_turnover[1..13]> <;> <EOD_saleVAT [1..13]> <;> <EOD_creditVAT [1..13]> <;>]]></ResFormatRaw></Response></Command><Command Name=\"ReadDeviceModuleSupport\" CmdByte=\"0x4E\"><FPOperation>Provide an information about modules supported by the device</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'D\'><;><\'D\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"D\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionLAN\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol for LAN suppor - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"OptionWiFi\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol for WiFi support - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"OptionGPRS\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>1 symbol for GPRS support - \'0\' - No  - \'1\' - Yes BT (Bluetooth) 1 symbol for Bluetooth support - \'0\' - No  - \'1\' - Yes</Desc></Res><Res Name=\"OptionBT\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>(Bluetooth) 1 symbol for Bluetooth support - \'0\' - No  - \'1\' - Yes</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'D\'><;><\'D\'><;><LAN[1]><;><WiFi[1]><;><GPRS[1]><;><BT[1]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadGPRS_AuthType\" CmdByte=\"0x4E\"><FPOperation>Provides information about device\'s GPRS username.</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'G\'><;><\'N\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"G\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionAuthType\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"CHAP\" Value=\"2\" /><Option Name=\"None\" Value=\"0\" /><Option Name=\"PAP\" Value=\"1\" /><Option Name=\"PAP or CHAP\" Value=\"3\" /></Options><Desc>(Authentication type) 1 symbol with value:  - \'0\' - None  - \'1\' - PAP  - \'2\' - CHAP  - \'3\' - PAP or CHAP</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'G\'><;><\'N\'><;><AuthType[1]]]></ResFormatRaw></Response></Command><Command Name=\"ReadWiFi_NetworkName\" CmdByte=\"0x4E\"><FPOperation>Read device\'s connected WiFi network name</FPOperation><Args><Arg Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"W\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'R\'><;><\'W\'><;><\'N\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"R\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"W\" Type=\"Opti";
         String defsPart3 = "onHardcoded\" MaxLen=\"1\" /><Res Name=\"\" Value=\"N\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"WiFiNameLength\" Value=\"\" Type=\"Decimal\" MaxLen=\"3\"><Desc>(Length) Up to 3 symbols for the WiFi name length</Desc></Res><Res Name=\"WiFiNetworkName\" Value=\"\" Type=\"Text\" MaxLen=\"100\"><Desc>(Name) Up to 100 symbols for the device\'s WiFi network name</Desc></Res><ResFormatRaw><![CDATA[<\'R\'><;><\'W\'><;><\'N\'><;><WiFiNameLength[1..3]><;><WiFiNetworkName[100]>]]></ResFormatRaw></Response></Command><Command Name=\"ReadParameters\" CmdByte=\"0x65\"><FPOperation>Provides information about the programmed number of POS and the current values of the logo, display mode, enable/disable currency in receipt, EJ font type.</FPOperation><Response ACK=\"false\"><Res Name=\"POSNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>(POS Number) 4 symbols for number of POS in format ####</Desc></Res><Res Name=\"OptionPrintLogo\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>(Print Logo) 1 symbol of value:  - \'1\' - Yes  - \'0\' - No</Desc></Res><Res Name=\"OptionAutoOpenDrawer\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>(Auto Open Drawer) 1 symbol of value:  - \'1\' - Yes  - \'0\' - No</Desc></Res><Res Name=\"reserved\" Value=\"1\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionExternalDispManagement\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Auto\" Value=\"0\" /><Option Name=\"Manual\" Value=\"1\" /></Options><Desc>(Ext. Display Management) 1 symbol of value:  - \'1\' - Manual  - \'0\' - Auto</Desc></Res><Res Name=\"reserved\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"OptionEnableCurrency\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"No\" Value=\"0\" /><Option Name=\"Yes\" Value=\"1\" /></Options><Desc>(Enable Currency) 1 symbol of value:  - \'1\' - Yes  - \'0\' - No</Desc></Res><ResFormatRaw><![CDATA[<POSNum[4]> <;> <PrintLogo[1]> <;> <AutoOpenDrawer[1]> <;> <reserved[\'1\']> <;> <ExternalDispManagement[1]> <;> <reserved[\'0\']> <;> <EnableCurrency[1]> <;>]]></ResFormatRaw></Response></Command><Command Name=\"ReadVersion\" CmdByte=\"0x21\"><FPOperation>Provides information about the device version.</FPOperation><Response ACK=\"false\"><Res Name=\"Version\" Value=\"\" Type=\"Text\" MaxLen=\"30\"><Desc>Up to 30 symbols for Version name and Check sum</Desc></Res><ResFormatRaw><![CDATA[<Version[30]>]]></ResFormatRaw></Response></Command><Command Name=\"RawWrite\" CmdByte=\"0xFE\"><FPOperation> Writes raw bytes to FP </FPOperation><Args><Arg Name=\"Bytes\" Value=\"\" Type=\"Base64\" MaxLen=\"5000\"><Desc>The bytes in BASE64 ecoded string to be written to FP</Desc></Arg></Args></Command><Command Name=\"ProgHScode\" CmdByte=\"0x4F\"><FPOperation>Programs HS code at a given position (HS number in order).</FPOperation><Args><Arg Name=\"Option\" Value=\"Z\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionW\" Value=\"W\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"HS_Number\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for HS number in order in format ####</Desc></Arg><Arg Name=\"HS_Code\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for HS code</Desc></Arg><Arg Name=\"HS_Name\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols for name of HS group</Desc></Arg><Arg Name=\"OptionTaxable\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Exempted\" Value=\"1\" /><Option Name=\"Taxable\" Value=\"0\" /></Options><Desc>1 symbol for parameter: - \'1\' - Exempted - \'0\' - Taxable</Desc></Arg><Arg Name=\"MesureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for mesure unit of item\'s code</Desc></Arg><Arg Name=\"VAT_Rate\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"6\" Format=\"00.00\"><Desc>Value of VAT rate from 2 to 5 symbols with format ##.##</Desc></Arg><ArgsFormatRaw><![CDATA[ <Option[\'Z\']> <;><OptionW[\'W\']><;><HS_Number[4]> <;> <HS_Code[10]> <;> <HS_Name[20]><;><OptionTaxable[1]> <;> <MesureUnit[3]> <;> < VAT_Rate[2..6]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"CashPayCloseReceipt\" CmdByte=\"0x36\"><FPOperation>Paying the exact amount in cash, close the fiscal receipt and returns receipt info.</FPOperation><Response ACK=\"false\"><Res Name=\"InvoiceNum\" Value=\"\" Type=\"Text\" MaxLen=\"19\"><Desc>19 symbols for CU invoice number</Desc></Res><Res Name=\"QRcode\" Value=\"\" Type=\"Text\" MaxLen=\"128\"><Desc>128 symbols for QR code</Desc></Res><ResFormatRaw><![CDATA[<InvoiceNum[19]<;><QRcode[128]>]]></ResFormatRaw></Response></Command><Command Name=\"ProgPLU_HSCodeAndHSName\" CmdByte=\"0x4B\"><FPOperation>Programs the PLU VAT class, HS Code and HS Name for a certain article (item) from the internal database.</FPOperation><Args><Arg Name=\"PLUNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"5\" Format=\"00000\"><Desc>5 symbols for article number in format: #####</Desc></Arg><Arg Name=\"Option\" Value=\"5\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"OptionVATClass\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"VAT Class A\" Value=\"A\" /><Option Name=\"VAT Class B\" Value=\"B\" /><Option Name=\"VAT Class C\" Value=\"C\" /><Option Name=\"VAT Class D\" Value=\"D\" /><Option Name=\"VAT Class E\" Value=\"E\" /></Options><Desc>1 symbol for article\'s VAT class with optional values:  - \'A\' - VAT Class A  - \'B\' - VAT Class B  - \'C\' - VAT Class C  - \'D\' - VAT Class D  - \'E\' - VAT Class E</Desc></Arg><Arg Name=\"HSCode\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for HS Code in format XXXX.XX.XX</Desc></Arg><Arg Name=\"HSName\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols for HS Name</Desc></Arg><Arg Name=\"MeasureUnit\" Value=\"\" Type=\"Text\" MaxLen=\"3\"><Desc>3 symbols for measure unit</Desc></Arg><ArgsFormatRaw><![CDATA[ <PLUNum[5]><;><Option[\'5\']> <;> <OptionVATClass[1]> <;> <HSCode[10]> <;> <HSName[20]> <;> <MeasureUnit[3]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"SetTime_ThresholdMinutes\" CmdByte=\"0x4E\"><FPOperation>Program device\'s invoice threshold count. To apply use - SaveNetworkSettings()</FPOperation><Args><Arg Name=\"\" Value=\"P\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"S\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"\" Value=\"T\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"Minutes\" Value=\"\" Type=\"Text\" MaxLen=\"10\"><Desc>10 symbols for the device\'s time threshold minutes</Desc></Arg><ArgsFormatRaw><![CDATA[ <\'P\'><;><\'S\'><;><\'T\'><;><Minutes[10]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ProgDisplayGreetingMessage\" CmdByte=\"0x49\"><FPOperation>Program the contents of a Display Greeting message.</FPOperation><Args><Arg Name=\"\" Value=\"0\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Arg Name=\"DisplayGreetingText\" Value=\"\" Type=\"Text\" MaxLen=\"20\"><Desc>20 symbols for display greeting message</Desc></Arg><ArgsFormatRaw><![CDATA[<\'0\'> <;> <DisplayGreetingText[20]> ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDailyPO\" CmdByte=\"0x6E\"><FPOperation>Provides information about the PO amounts by type of payment and the total number of operations.</FPOperation><Args><Arg Name=\"\" Value=\"3\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <\'3\'> ]]></ArgsFormatRaw></Args><Response ACK=\"false\"><Res Name=\"\" Value=\"3\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><Res Name=\"AmountPayment0\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 0</Desc></Res><Res Name=\"AmountPayment1\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 1</Desc></Res><Res Name=\"AmountPayment2\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 2</Desc></Res><Res Name=\"AmountPayment3\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 3</Desc></Res><Res Name=\"AmountPayment4\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 4</Desc></Res><Res Name=\"AmountCurrency\" Value=\"\" Type=\"Decimal\" MaxLen=\"13\"><Desc>Up to 13 symbols for the accumulated amount by payment type 5</Desc></Res><Res Name=\"NumPO\" Value=\"\" Type=\"Decimal\" MaxLen=\"5\"><Desc>Up to 5 symbols for the total number of operations</Desc></Res><ResFormatRaw><![CDATA[<\'3\'> <;> <AmountPayment0[1..13]> <;> <AmountPayment1[1..13]> <;> <AmountPayment2[1..13]> <;> <AmountPayment3[1..13]> <;> <AmountPayment4[1..13]> <;> <AmountCurrency[1..13]> <;> <NumPO[1..5]> <;>]]></ResFormatRaw></Response></Command><Command Name=\"ReadBriefFMReportByDate\" CmdByte=\"0x7B\"><FPOperation>Store a brief FM report by initial and end date.</FPOperation><Args><Arg Name=\"StartDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><Arg Name=\"PCStorage\" Value=\"8\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <StartDate \"DDMMYY\"><;><EndDate \"DDMMYY\"> <;><PCStorage[\'8\']> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"StoreBriefFMReportByNum\" CmdByte=\"0x79\"><FPOperation>Store a brief FM report by initial and end FM report number.</FPOperation><Args><Arg Name=\"StartNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the initial report number included in report, format ####</Desc></Arg><Arg Name=\"EndNum\" Value=\"\" Type=\"Decimal_with_format\" MaxLen=\"4\" Format=\"0000\"><Desc>4 symbols for the final report number included in report, format ####</Desc></Arg><Arg Name=\"OptionStorage\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Storage in External SD card memory\" Value=\"4\" /><Option Name=\"Storage in External USB Flash memory.\" Value=\"2\" /></Options><Desc>1 symbol for destination:  - \'2\' - Storage in External USB Flash memory.  - \'4\' - Storage in External SD card memory</Desc><Meta MinLen=\"1\" Compulsory=\"false\" ValIndicatingPresence=\";\" /></Arg><ArgsFormatRaw><![CDATA[ <StartNum[4]><;><EndNum[4]> {<;><OptionStorage[1]>} ]]></ArgsFormatRaw></Args></Command><Command Name=\"ReadDetailedFMReportByDate\" CmdByte=\"0x7A\"><FPOperation>Storage a detailed FM report by initial and end date.</FPOperation><Args><Arg Name=\"StartDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for initial date in the DDMMYY format</Desc></Arg><Arg Name=\"EndDate\" Value=\"\" Type=\"DateTime\" MaxLen=\"10\" Format=\"ddMMyy\"><Desc>6 symbols for final date in the DDMMYY format</Desc></Arg><Arg Name=\"PCStorage\" Value=\"8\" Type=\"OptionHardcoded\" MaxLen=\"1\" /><ArgsFormatRaw><![CDATA[ <StartDate \"DDMMYY\"><;><EndDate \"DDMMYY\"> <;><PCStorage[\'8\']> ]]></ArgsFormatRaw></Args><Response ACK=\"true\" ACK_PLUS=\"true\" /></Command><Command Name=\"PrintDetailedDailyReport\" CmdByte=\"0x7F\"><FPOperation>Prints an extended daily financial report (an article report followed by a daily financial report) with or without zeroing (\'Z\' or \'X\').</FPOperation><Args><Arg Name=\"OptionZeroing\" Value=\"\" Type=\"Option\" MaxLen=\"1\"><Options><Option Name=\"Without zeroing\" Value=\"X\" /><Option Name=\"Zeroing\" Value=\"Z\" /></Options><Desc>1 character with following values:  - \'Z\' - Zeroing  - \'X\' - Without zeroing</Desc></Arg><ArgsFormatRaw><![CDATA[ <OptionZeroing[1]> ]]></ArgsFormatRaw></Args></Command></Defs>";

        SendRawRequest(defsPart0 + defsPart1 + defsPart2 + defsPart3);
    }
     }

